
lab2_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005930  08005930  00006930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb8  08005cb8  000073a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cc0  08005cc0  000073a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc0  08005cc0  00006cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  08005cc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  200003a4  0800606c  000073a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800606c  000078cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000073a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dce0  00000000  00000000  000073d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dc  00000000  00000000  000150b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00017390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a43  00000000  00000000  000180f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003418  00000000  00000000  00018b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6ce  00000000  00000000  0001bf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab3f  00000000  00000000  0002b621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  000c61a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ca8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a4 	.word	0x200003a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005914 	.word	0x08005914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003a8 	.word	0x200003a8
 80001dc:	08005914 	.word	0x08005914

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eb4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ec8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00b      	beq.n	8000ee8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed0:	e000      	b.n	8000ed4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ed2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f9      	beq.n	8000ed2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ede:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000efc:	f000 fbd8 	bl	80016b0 <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f001 ff8b 	bl	8002e1c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f001 ff88 	bl	8002e1c <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f001 ff85 	bl	8002e1c <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f001 ff82 	bl	8002e1c <BSP_LED_Init>

  /* Configure the system clock to 100 MHz */
  SystemClock_Config();
 8000f18:	f000 f89c 	bl	8001054 <SystemClock_Config>

  /* Configure GPIO so that we can probe PB2 with an Oscilloscope */
  GPIOA_Init();
 8000f1c:	f000 f978 	bl	8001210 <GPIOA_Init>

  /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f20:	2101      	movs	r1, #1
 8000f22:	2000      	movs	r0, #0
 8000f24:	f002 f80c 	bl	8002f40 <BSP_PB_Init>

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8000f28:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <main+0x12c>)
 8000f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001028 <main+0x130>)
 8000f2c:	601a      	str	r2, [r3, #0]

  /* Initialize TIM3 peripheral to toggle with a frequency of ~ 8 kHz
   * System clock is 100 MHz and TIM3 is counting at the rate of the system clock
   * so 100 M / 8 k is 12500
   */
  TimHandle.Init.Period = 12499;
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <main+0x12c>)
 8000f30:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 8000f34:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 0;
 8000f36:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <main+0x12c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <main+0x12c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <main+0x12c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <main+0x12c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000f4e:	4835      	ldr	r0, [pc, #212]	@ (8001024 <main+0x12c>)
 8000f50:	f001 fcee 	bl	8002930 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <main+0x66>
  {
	  /* Initialization Error */
	  Error_Handler();
 8000f5a:	f000 f951 	bl	8001200 <Error_Handler>
  }

  ITM_Port32(30) = 0;
 8000f5e:	4b33      	ldr	r3, [pc, #204]	@ (800102c <main+0x134>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000f64:	482f      	ldr	r0, [pc, #188]	@ (8001024 <main+0x12c>)
 8000f66:	f001 fd33 	bl	80029d0 <HAL_TIM_Base_Start_IT>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <main+0x7c>
  {
	  /* Starting Error */
	  Error_Handler();
 8000f70:	f000 f946 	bl	8001200 <Error_Handler>
			  sample_count = 0;
		  }
#endif

#ifndef FUNCTIONAL_TEST
	if (new_sample_flag == 1) {
 8000f74:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <main+0x138>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d140      	bne.n	8000ffe <main+0x106>
#endif

		filteredSampleL = ProcessSample(newSampleL,history_l); // "L"
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <main+0x13c>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	492d      	ldr	r1, [pc, #180]	@ (8001038 <main+0x140>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f971 	bl	800126c <ProcessSample>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <main+0x144>)
 8000f90:	801a      	strh	r2, [r3, #0]
		new_sample_flag = 0;
 8000f92:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <main+0x138>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
		if (i < NUMBER_OF_TAPS-1) {
 8000f98:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <main+0x148>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2bda      	cmp	r3, #218	@ 0xda
 8000f9e:	dc08      	bgt.n	8000fb2 <main+0xba>
			filteredSampleL = 0;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	@ (800103c <main+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
			i++;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <main+0x148>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <main+0x148>)
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e025      	b.n	8000ffe <main+0x106>
		} else {
			if (bufchoice == 0) {
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <main+0x14c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10e      	bne.n	8000fd8 <main+0xe0>
				filteredOutBufferA[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL; // copy the filtered output to both channels
 8000fba:	4b20      	ldr	r3, [pc, #128]	@ (800103c <main+0x144>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <main+0x144>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <main+0x150>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	440a      	add	r2, r1
 8000fd0:	491e      	ldr	r1, [pc, #120]	@ (800104c <main+0x154>)
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fd6:	e00d      	b.n	8000ff4 <main+0xfc>
			} else {
				filteredOutBufferB[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <main+0x144>)
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	4b16      	ldr	r3, [pc, #88]	@ (800103c <main+0x144>)
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <main+0x150>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	440a      	add	r2, r1
 8000fee:	4918      	ldr	r1, [pc, #96]	@ (8001050 <main+0x158>)
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			k++;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <main+0x150>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <main+0x150>)
 8000ffc:	6013      	str	r3, [r2, #0]
	}
#endif

	// once a buffer is full, we can swap to fill up the other buffer
	// this is probably not going to be used in Lab2
	if (k == BUFFER_SIZE) {
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <main+0x150>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b20      	cmp	r3, #32
 8001004:	d1b6      	bne.n	8000f74 <main+0x7c>
		k = 0;
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <main+0x150>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		bufchoice = bufchoice == 0 ? 1 : 0;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <main+0x14c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <main+0x14c>)
 800101e:	601a      	str	r2, [r3, #0]
	if (new_sample_flag == 1) {
 8001020:	e7a8      	b.n	8000f74 <main+0x7c>
 8001022:	bf00      	nop
 8001024:	200003c4 	.word	0x200003c4
 8001028:	40000400 	.word	0x40000400
 800102c:	e0000078 	.word	0xe0000078
 8001030:	200005cc 	.word	0x200005cc
 8001034:	200005d4 	.word	0x200005d4
 8001038:	2000040c 	.word	0x2000040c
 800103c:	200005d8 	.word	0x200005d8
 8001040:	200006e0 	.word	0x200006e0
 8001044:	200006dc 	.word	0x200006dc
 8001048:	200006e4 	.word	0x200006e4
 800104c:	200005dc 	.word	0x200005dc
 8001050:	2000065c 	.word	0x2000065c

08001054 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	@ 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <SystemClock_Config+0xac>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <SystemClock_Config+0xac>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	@ 0x40
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <SystemClock_Config+0xac>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <SystemClock_Config+0xb0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <SystemClock_Config+0xb0>)
 8001080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <SystemClock_Config+0xb0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001092:	2302      	movs	r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800109a:	2310      	movs	r3, #16
 800109c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a6:	2310      	movs	r3, #16
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80010aa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b4:	2307      	movs	r3, #7
 80010b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 ffd3 	bl	8002068 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010c8:	f000 f89a 	bl	8001200 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010cc:	230f      	movs	r3, #15
 80010ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010e6:	2103      	movs	r1, #3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fa35 	bl	8002558 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010f4:	f000 f884 	bl	8001200 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d109      	bne.n	800112c <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8001118:	bf00      	nop
 800111a:	2000      	movs	r0, #0
 800111c:	f001 ff66 	bl	8002fec <BSP_PB_GetState>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8001126:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
  }
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200003c0 	.word	0x200003c0

08001138 <HAL_TIM_PeriodElapsedCallback>:
}

// This timer callback should trigger every 1/8000 Hz, and it emulates
// the idea of receiving a new sample peridiocally
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
//  BSP_LED_Toggle(LED4);
//  HAL_GPIO_TogglePin(SCOPE_CHECK_GPIO_Port, SCOPE_CHECK_Pin);

	// If we "miss" processing a sample, the new_sample_flag will still be
	// high on the trigger of the interrupt
	if (new_sample_flag == 1) {
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x16>
		ITM_Port32(30) = 10;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800114a:	220a      	movs	r2, #10
 800114c:	601a      	str	r2, [r3, #0]
	}

	// Otherwise, go to the raw audio in memory and "retrieve" a new sample every timer period
	// set the new_sample_flag high
#ifndef FUNCTIONAL_TEST
	if (sample_count < 64000) {
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 8001156:	da24      	bge.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		newSampleL = (int16_t)raw_audio[sample_count];
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800116a:	801a      	strh	r2, [r3, #0]
		newSampleR = (int16_t)(raw_audio[sample_count] >> 16);
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	141b      	asrs	r3, r3, #16
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001180:	801a      	strh	r2, [r3, #0]
		sample_count++;
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800118a:	6013      	str	r3, [r2, #0]

		if (sample_count >= 64000) sample_count = 0;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 8001194:	db02      	blt.n	800119c <HAL_TIM_PeriodElapsedCallback+0x64>
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		new_sample_flag = 1;
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
  }
#endif
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200005cc 	.word	0x200005cc
 80011b4:	e0000078 	.word	0xe0000078
 80011b8:	200005d0 	.word	0x200005d0
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200005d4 	.word	0x200005d4
 80011c4:	200005d6 	.word	0x200005d6

080011c8 <_write>:

int _write(int file, char* ptr, int len) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e009      	b.n	80011ee <_write+0x26>
		ITM_SendChar(*ptr++);
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	60ba      	str	r2, [r7, #8]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe60 	bl	8000ea8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbf1      	blt.n	80011da <_write+0x12>
	}
	return len;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8001204:	2002      	movs	r0, #2
 8001206:	f001 fe81 	bl	8002f0c <BSP_LED_On>
  while(1)
 800120a:	bf00      	nop
 800120c:	e7fd      	b.n	800120a <Error_Handler+0xa>
	...

08001210 <GPIOA_Init>:
  {
  }
}

static void GPIOA_Init(void){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <GPIOA_Init+0x54>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <GPIOA_Init+0x54>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	6313      	str	r3, [r2, #48]	@ 0x30
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <GPIOA_Init+0x54>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : SCOPE_CHECK_Pin */
	  GPIO_InitStruct.Pin = SCOPE_CHECK_Pin;
 8001240:	2302      	movs	r3, #2
 8001242:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(SCOPE_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <GPIOA_Init+0x58>)
 8001256:	f000 fd39 	bl	8001ccc <HAL_GPIO_Init>

}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <ProcessSample>:

static int16_t ProcessSample(int16_t newsample, int16_t* history) {
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
	ITM_Port32(31) = 1;
 8001278:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <ProcessSample+0xcc>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
	// set the new sample as the head
	history[0] = newsample;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	801a      	strh	r2, [r3, #0]

	// set up and do our convolution
	int tap = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
	int32_t accumulator = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
	for (tap = 0; tap < NUMBER_OF_TAPS; tap++) {
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e012      	b.n	80012b8 <ProcessSample+0x4c>
		accumulator += (int32_t)filter_coeffs[tap] * (int32_t)history[tap];
 8001292:	4a2a      	ldr	r2, [pc, #168]	@ (800133c <ProcessSample+0xd0>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800129a:	4619      	mov	r1, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4413      	add	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
	for (tap = 0; tap < NUMBER_OF_TAPS; tap++) {
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2bdb      	cmp	r3, #219	@ 0xdb
 80012bc:	dde9      	ble.n	8001292 <ProcessSample+0x26>
	}

	// shuffle things along for the next one?
	for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80012be:	23da      	movs	r3, #218	@ 0xda
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e00e      	b.n	80012e2 <ProcessSample+0x76>
		history[tap+1] = history[tap];
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	440b      	add	r3, r1
 80012d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012da:	801a      	strh	r2, [r3, #0]
	for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3b01      	subs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	daed      	bge.n	80012c4 <ProcessSample+0x58>
	}

	if (accumulator > 0x3FFFFFFF) {
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ee:	db08      	blt.n	8001302 <ProcessSample+0x96>
		accumulator = 0x3FFFFFFF;
 80012f0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80012f4:	613b      	str	r3, [r7, #16]
		overflow_count++;
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <ProcessSample+0xd4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <ProcessSample+0xd4>)
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e00b      	b.n	800131a <ProcessSample+0xae>
	} else if (accumulator < -0x40000000) {
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001308:	da07      	bge.n	800131a <ProcessSample+0xae>
		accumulator = -0x40000000;
 800130a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800130e:	613b      	str	r3, [r7, #16]
		underflow_count++;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <ProcessSample+0xd8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <ProcessSample+0xd8>)
 8001318:	6013      	str	r3, [r2, #0]
	}

	int16_t temp = (int16_t)(accumulator >> 15);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	13db      	asrs	r3, r3, #15
 800131e:	81fb      	strh	r3, [r7, #14]

	ITM_Port32(31) = 2;
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <ProcessSample+0xcc>)
 8001322:	2202      	movs	r2, #2
 8001324:	601a      	str	r2, [r3, #0]
	__NOP();
 8001326:	bf00      	nop
	return temp;
 8001328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800132c:	4618      	mov	r0, r3
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000007c 	.word	0xe000007c
 800133c:	20000004 	.word	0x20000004
 8001340:	200005c4 	.word	0x200005c4
 8001344:	200005c8 	.word	0x200005c8

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f000 fad4 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2104      	movs	r1, #4
 80013c0:	201d      	movs	r0, #29
 80013c2:	f000 fac2 	bl	800194a <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80013c6:	201d      	movs	r0, #29
 80013c8:	f000 fadb 	bl	8001982 <HAL_NVIC_EnableIRQ>
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013ea:	bf00      	nop
 80013ec:	e7fd      	b.n	80013ea <HardFault_Handler+0x4>

080013ee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013fa:	bf00      	nop
 80013fc:	e7fd      	b.n	80013fa <BusFault_Handler+0x4>

080013fe <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001402:	bf00      	nop
 8001404:	e7fd      	b.n	8001402 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001434:	f000 f98e 	bl	8001754 <HAL_IncTick>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 fdf9 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 800144e:	2010      	movs	r0, #16
 8001450:	f000 fdf2 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <DMA1_Stream7_IRQHandler+0x14>)
 800145e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001460:	4618      	mov	r0, r3
 8001462:	f000 faa9 	bl	80019b8 <HAL_DMA_IRQHandler>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200006f0 	.word	0x200006f0

08001470 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2S IT Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <DMA1_Stream3_IRQHandler+0x14>)
 8001476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fa9d 	bl	80019b8 <HAL_DMA_IRQHandler>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000738 	.word	0x20000738

08001488 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <TIM3_IRQHandler+0x10>)
 800148e:	f001 fb01 	bl	8002a94 <HAL_TIM_IRQHandler>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200003c4 	.word	0x200003c4

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014b6:	f002 fb5f 	bl	8003b78 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
	return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80014de:	bf00      	nop
 80014e0:	e7fd      	b.n	80014de <_exit+0x12>

080014e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e00a      	b.n	800150a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f4:	f3af 8000 	nop.w
 80014f8:	4601      	mov	r1, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	60ba      	str	r2, [r7, #8]
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	dbf0      	blt.n	80014f4 <_read+0x12>
	}

return len;
 8001512:	687b      	ldr	r3, [r7, #4]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_close>:
	}
	return len;
}

int _close(int file)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	return -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001544:	605a      	str	r2, [r3, #4]
	return 0;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_isatty>:

int _isatty(int file)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
	return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f002 fae0 	bl	8003b78 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200006e8 	.word	0x200006e8
 80015ec:	200008d0 	.word	0x200008d0

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <SystemInit+0x60>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <SystemInit+0x60>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <SystemInit+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <SystemInit+0x64>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <SystemInit+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <SystemInit+0x64>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <SystemInit+0x64>)
 800161c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <SystemInit+0x64>)
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <SystemInit+0x68>)
 800162a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <SystemInit+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <SystemInit+0x64>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <SystemInit+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <SystemInit+0x60>)
 8001640:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001644:	609a      	str	r2, [r3, #8]
#endif
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	40023800 	.word	0x40023800
 8001658:	24003010 	.word	0x24003010

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	@ (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	@ (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	@ (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffb3 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f002 fa7b 	bl	8003b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fc33 	bl	8000ef8 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 80016a0:	08005cc8 	.word	0x08005cc8
  ldr r2, =_sbss
 80016a4:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 80016a8:	200008cc 	.word	0x200008cc

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f92b 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fe30 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f943 	bl	800199e <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f90b 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	@ (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200001bc 	.word	0x200001bc
 800174c:	200001c4 	.word	0x200001c4
 8001750:	200001c0 	.word	0x200001c0

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200001c4 	.word	0x200001c4
 8001778:	200006ec 	.word	0x200006ec

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200006ec 	.word	0x200006ec

08001794 <__NVIC_SetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001c00 <HAL_DMA_IRQHandler+0x248>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001c04 <HAL_DMA_IRQHandler+0x24c>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0a9b      	lsrs	r3, r3, #10
 80019d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	2208      	movs	r2, #8
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01a      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	2208      	movs	r2, #8
 8001a12:	409a      	lsls	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	2204      	movs	r2, #4
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d012      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f043 0204 	orr.w	r2, r3, #4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a94:	2210      	movs	r2, #16
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d043      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03c      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d018      	beq.n	8001afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d108      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
 8001ae6:	e01f      	b.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
 8001af8:	e016      	b.n	8001b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0208 	bic.w	r2, r2, #8
 8001b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 808f 	beq.w	8001c58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8087 	beq.w	8001c58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	2220      	movs	r2, #32
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d136      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0216 	bic.w	r2, r2, #22
 8001b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x1da>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	223f      	movs	r2, #63	@ 0x3f
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d07e      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
        }
        return;
 8001bce:	e079      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01d      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10d      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d031      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e02c      	b.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
 8001bfe:	bf00      	nop
 8001c00:	200001bc 	.word	0x200001bc
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
 8001c18:	e01e      	b.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10f      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0210 	bic.w	r2, r2, #16
 8001c36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d032      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d022      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2205      	movs	r2, #5
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d307      	bcc.n	8001ca0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f2      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x2cc>
 8001c9e:	e000      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ca0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
 8001cc2:	e000      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cc4:	bf00      	nop
    }
  }
}
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e159      	b.n	8001f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8148 	bne.w	8001f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a2 	beq.w	8001f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b57      	ldr	r3, [pc, #348]	@ (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	4a56      	ldr	r2, [pc, #344]	@ (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e62:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a49      	ldr	r2, [pc, #292]	@ (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x202>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a48      	ldr	r2, [pc, #288]	@ (8001fc0 <HAL_GPIO_Init+0x2f4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x1fe>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a47      	ldr	r2, [pc, #284]	@ (8001fc4 <HAL_GPIO_Init+0x2f8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a46      	ldr	r2, [pc, #280]	@ (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x1f6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a45      	ldr	r2, [pc, #276]	@ (8001fcc <HAL_GPIO_Init+0x300>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x1f2>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4935      	ldr	r1, [pc, #212]	@ (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eee:	4b38      	ldr	r3, [pc, #224]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f12:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3c:	4a24      	ldr	r2, [pc, #144]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f aea2 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e001      	b.n	8001ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f856 	bl	8001108 <HAL_GPIO_EXTI_Callback>
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e267      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d075      	beq.n	8002172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002086:	4b88      	ldr	r3, [pc, #544]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d00c      	beq.n	80020ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002092:	4b85      	ldr	r3, [pc, #532]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d112      	bne.n	80020c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209e:	4b82      	ldr	r3, [pc, #520]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	4b7e      	ldr	r3, [pc, #504]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05b      	beq.n	8002170 <HAL_RCC_OscConfig+0x108>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d157      	bne.n	8002170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e242      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020cc:	d106      	bne.n	80020dc <HAL_RCC_OscConfig+0x74>
 80020ce:	4b76      	ldr	r3, [pc, #472]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a75      	ldr	r2, [pc, #468]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xb0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b70      	ldr	r3, [pc, #448]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6f      	ldr	r2, [pc, #444]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6d      	ldr	r3, [pc, #436]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6c      	ldr	r2, [pc, #432]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xb0>
 8002100:	4b69      	ldr	r3, [pc, #420]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a68      	ldr	r2, [pc, #416]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a65      	ldr	r2, [pc, #404]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fb2c 	bl	800177c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fb28 	bl	800177c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e207      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b5b      	ldr	r3, [pc, #364]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xc0>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fb18 	bl	800177c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fb14 	bl	800177c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	@ 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1f3      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b51      	ldr	r3, [pc, #324]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0xe8>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217e:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218a:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002196:	4b44      	ldr	r3, [pc, #272]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x152>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1c7      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4937      	ldr	r1, [pc, #220]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	e03a      	b.n	8002246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <HAL_RCC_OscConfig+0x244>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff facd 	bl	800177c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff fac9 	bl	800177c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1a8      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b28      	ldr	r3, [pc, #160]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4925      	ldr	r1, [pc, #148]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_OscConfig+0x244>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff faac 	bl	800177c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002228:	f7ff faa8 	bl	800177c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e187      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d036      	beq.n	80022c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_RCC_OscConfig+0x248>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7ff fa8c 	bl	800177c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff fa88 	bl	800177c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e167      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_OscConfig+0x240>)
 800227c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x200>
 8002286:	e01b      	b.n	80022c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <HAL_RCC_OscConfig+0x248>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff fa75 	bl	800177c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	e00e      	b.n	80022b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7ff fa71 	bl	800177c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d907      	bls.n	80022b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e150      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	42470000 	.word	0x42470000
 80022b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ea      	bne.n	8002296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8097 	beq.w	80023fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b81      	ldr	r3, [pc, #516]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b7d      	ldr	r3, [pc, #500]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	4a7c      	ldr	r2, [pc, #496]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ee:	4b7a      	ldr	r3, [pc, #488]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b77      	ldr	r3, [pc, #476]	@ (80024dc <HAL_RCC_OscConfig+0x474>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b74      	ldr	r3, [pc, #464]	@ (80024dc <HAL_RCC_OscConfig+0x474>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a73      	ldr	r2, [pc, #460]	@ (80024dc <HAL_RCC_OscConfig+0x474>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7ff fa31 	bl	800177c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7ff fa2d 	bl	800177c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e10c      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b6a      	ldr	r3, [pc, #424]	@ (80024dc <HAL_RCC_OscConfig+0x474>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x2ea>
 8002344:	4b64      	ldr	r3, [pc, #400]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	4a63      	ldr	r2, [pc, #396]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x324>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x30c>
 800235a:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	4a5e      	ldr	r2, [pc, #376]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	@ 0x70
 8002366:	4b5c      	ldr	r3, [pc, #368]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236a:	4a5b      	ldr	r2, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6713      	str	r3, [r2, #112]	@ 0x70
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0x324>
 8002374:	4b58      	ldr	r3, [pc, #352]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002378:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002380:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002384:	4a54      	ldr	r2, [pc, #336]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7ff f9f2 	bl	800177c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7ff f9ee 	bl	800177c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0cb      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ee      	beq.n	800239c <HAL_RCC_OscConfig+0x334>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff f9dc 	bl	800177c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff f9d8 	bl	800177c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0b5      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ee      	bne.n	80023c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b39      	ldr	r3, [pc, #228]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	4a38      	ldr	r2, [pc, #224]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a1 	beq.w	8002548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b08      	cmp	r3, #8
 8002410:	d05c      	beq.n	80024cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d141      	bne.n	800249e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b31      	ldr	r3, [pc, #196]	@ (80024e0 <HAL_RCC_OscConfig+0x478>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f9ac 	bl	800177c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f9a8 	bl	800177c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e087      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	491b      	ldr	r1, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x478>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7ff f981 	bl	800177c <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff f97d 	bl	800177c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e05c      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x416>
 800249c:	e054      	b.n	8002548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_RCC_OscConfig+0x478>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff f96a 	bl	800177c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff f966 	bl	800177c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e045      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_OscConfig+0x470>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
 80024ca:	e03d      	b.n	8002548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e038      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_RCC_OscConfig+0x4ec>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d028      	beq.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d121      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800251a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cc      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b68      	ldr	r3, [pc, #416]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90c      	bls.n	8002594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a52      	ldr	r2, [pc, #328]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d044      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d119      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	2b03      	cmp	r3, #3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e067      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4934      	ldr	r1, [pc, #208]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7ff f898 	bl	800177c <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7ff f894 	bl	800177c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d20c      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	@ (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fff8 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00
 8002714:	40023800 	.word	0x40023800
 8002718:	08005930 	.word	0x08005930
 800271c:	200001bc 	.word	0x200001bc
 8002720:	200001c0 	.word	0x200001c0

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b094      	sub	sp, #80	@ 0x50
 800272a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002730:	2300      	movs	r3, #0
 8002732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002734:	2300      	movs	r3, #0
 8002736:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273c:	4b79      	ldr	r3, [pc, #484]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x200>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d00d      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 8002748:	2b08      	cmp	r3, #8
 800274a:	f200 80e1 	bhi.w	8002910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x34>
 8002752:	2b04      	cmp	r3, #4
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x3a>
 8002756:	e0db      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b73      	ldr	r3, [pc, #460]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x204>)
 800275a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800275c:	e0db      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275e:	4b73      	ldr	r3, [pc, #460]	@ (800292c <HAL_RCC_GetSysClockFreq+0x208>)
 8002760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002762:	e0d8      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b6f      	ldr	r3, [pc, #444]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x200>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800276c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276e:	4b6d      	ldr	r3, [pc, #436]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x200>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d063      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b6a      	ldr	r3, [pc, #424]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x200>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	2200      	movs	r2, #0
 8002782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278c:	633b      	str	r3, [r7, #48]	@ 0x30
 800278e:	2300      	movs	r3, #0
 8002790:	637b      	str	r3, [r7, #52]	@ 0x34
 8002792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	f04f 0000 	mov.w	r0, #0
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	0159      	lsls	r1, r3, #5
 80027a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a8:	0150      	lsls	r0, r2, #5
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4621      	mov	r1, r4
 80027b0:	1a51      	subs	r1, r2, r1
 80027b2:	6139      	str	r1, [r7, #16]
 80027b4:	4629      	mov	r1, r5
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027c8:	4659      	mov	r1, fp
 80027ca:	018b      	lsls	r3, r1, #6
 80027cc:	4651      	mov	r1, sl
 80027ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d2:	4651      	mov	r1, sl
 80027d4:	018a      	lsls	r2, r1, #6
 80027d6:	4651      	mov	r1, sl
 80027d8:	ebb2 0801 	subs.w	r8, r2, r1
 80027dc:	4659      	mov	r1, fp
 80027de:	eb63 0901 	sbc.w	r9, r3, r1
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f6:	4690      	mov	r8, r2
 80027f8:	4699      	mov	r9, r3
 80027fa:	4623      	mov	r3, r4
 80027fc:	eb18 0303 	adds.w	r3, r8, r3
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	462b      	mov	r3, r5
 8002804:	eb49 0303 	adc.w	r3, r9, r3
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002816:	4629      	mov	r1, r5
 8002818:	024b      	lsls	r3, r1, #9
 800281a:	4621      	mov	r1, r4
 800281c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002820:	4621      	mov	r1, r4
 8002822:	024a      	lsls	r2, r1, #9
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282a:	2200      	movs	r2, #0
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002834:	f7fe f9c0 	bl	8000bb8 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4613      	mov	r3, r2
 800283e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002840:	e058      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b38      	ldr	r3, [pc, #224]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x200>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	2200      	movs	r2, #0
 800284a:	4618      	mov	r0, r3
 800284c:	4611      	mov	r1, r2
 800284e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002852:	623b      	str	r3, [r7, #32]
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
 8002858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800285c:	4642      	mov	r2, r8
 800285e:	464b      	mov	r3, r9
 8002860:	f04f 0000 	mov.w	r0, #0
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	0159      	lsls	r1, r3, #5
 800286a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286e:	0150      	lsls	r0, r2, #5
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4641      	mov	r1, r8
 8002876:	ebb2 0a01 	subs.w	sl, r2, r1
 800287a:	4649      	mov	r1, r9
 800287c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800288c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002894:	ebb2 040a 	subs.w	r4, r2, sl
 8002898:	eb63 050b 	sbc.w	r5, r3, fp
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	00eb      	lsls	r3, r5, #3
 80028a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028aa:	00e2      	lsls	r2, r4, #3
 80028ac:	4614      	mov	r4, r2
 80028ae:	461d      	mov	r5, r3
 80028b0:	4643      	mov	r3, r8
 80028b2:	18e3      	adds	r3, r4, r3
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	464b      	mov	r3, r9
 80028b8:	eb45 0303 	adc.w	r3, r5, r3
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ca:	4629      	mov	r1, r5
 80028cc:	028b      	lsls	r3, r1, #10
 80028ce:	4621      	mov	r1, r4
 80028d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d4:	4621      	mov	r1, r4
 80028d6:	028a      	lsls	r2, r1, #10
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028de:	2200      	movs	r2, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	61fa      	str	r2, [r7, #28]
 80028e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e8:	f7fe f966 	bl	8000bb8 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4613      	mov	r3, r2
 80028f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	3301      	adds	r3, #1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x204>)
 8002912:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002918:	4618      	mov	r0, r3
 800291a:	3750      	adds	r7, #80	@ 0x50
 800291c:	46bd      	mov	sp, r7
 800291e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	00f42400 	.word	0x00f42400
 800292c:	007a1200 	.word	0x007a1200

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fd1e 	bl	8001398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 f9c0 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d001      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e044      	b.n	8002a72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1e      	ldr	r2, [pc, #120]	@ (8002a80 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x6c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a12:	d013      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x6c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x6c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x6c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	@ (8002a8c <HAL_TIM_Base_Start_IT+0xbc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x6c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d010      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	e007      	b.n	8002a70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40014000 	.word	0x40014000

08002a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8ee 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8e0 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8f1 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0204 	mvn.w	r2, #4
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8c4 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8b6 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8c7 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0208 	mvn.w	r2, #8
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f89a 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f88c 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f89d 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0210 	mvn.w	r2, #16
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f870 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f862 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f873 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0201 	mvn.w	r2, #1
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe fa90 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c30:	2b80      	cmp	r3, #128	@ 0x80
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8e2 	bl	8002e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4e:	2b40      	cmp	r3, #64	@ 0x40
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5c:	2b40      	cmp	r3, #64	@ 0x40
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f838 	bl	8002ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0220 	mvn.w	r2, #32
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8ac 	bl	8002df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a34      	ldr	r2, [pc, #208]	@ (8002dd8 <TIM_Base_SetConfig+0xe4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_Base_SetConfig+0x38>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d12:	d00b      	beq.n	8002d2c <TIM_Base_SetConfig+0x38>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <TIM_Base_SetConfig+0xe8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_Base_SetConfig+0x38>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a30      	ldr	r2, [pc, #192]	@ (8002de0 <TIM_Base_SetConfig+0xec>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0x38>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a2f      	ldr	r2, [pc, #188]	@ (8002de4 <TIM_Base_SetConfig+0xf0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d108      	bne.n	8002d3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a25      	ldr	r2, [pc, #148]	@ (8002dd8 <TIM_Base_SetConfig+0xe4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <TIM_Base_SetConfig+0xe8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <TIM_Base_SetConfig+0xec>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <TIM_Base_SetConfig+0xf0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <TIM_Base_SetConfig+0xf4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1e      	ldr	r2, [pc, #120]	@ (8002dec <TIM_Base_SetConfig+0xf8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <TIM_Base_SetConfig+0xfc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <TIM_Base_SetConfig+0xe4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400
 8002df0:	40014800 	.word	0x40014800

08002df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	@ 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10e      	bne.n	8002e4a <BSP_LED_Init+0x2e>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	4a32      	ldr	r2, [pc, #200]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3c:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	e034      	b.n	8002eb4 <BSP_LED_Init+0x98>
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10e      	bne.n	8002e6e <BSP_LED_Init+0x52>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4a29      	ldr	r2, [pc, #164]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e60:	4b27      	ldr	r3, [pc, #156]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	e022      	b.n	8002eb4 <BSP_LED_Init+0x98>
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d10e      	bne.n	8002e92 <BSP_LED_Init+0x76>
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	4a20      	ldr	r2, [pc, #128]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e84:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	e010      	b.n	8002eb4 <BSP_LED_Init+0x98>
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d10d      	bne.n	8002eb4 <BSP_LED_Init+0x98>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002ea2:	f043 0308 	orr.w	r3, r3, #8
 8002ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea8:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <BSP_LED_Init+0xe4>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <BSP_LED_Init+0xe8>)
 8002eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f08 <BSP_LED_Init+0xec>)
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	f107 021c 	add.w	r2, r7, #28
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fef7 	bl	8001ccc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <BSP_LED_Init+0xec>)
 8002ee2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <BSP_LED_Init+0xe8>)
 8002eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f7ff f887 	bl	8002004 <HAL_GPIO_WritePin>
}
 8002ef6:	bf00      	nop
 8002ef8:	3730      	adds	r7, #48	@ 0x30
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005940 	.word	0x08005940
 8002f08:	200001c8 	.word	0x200001c8

08002f0c <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <BSP_LED_On+0x2c>)
 8002f1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4a06      	ldr	r2, [pc, #24]	@ (8002f3c <BSP_LED_On+0x30>)
 8002f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f26:	2201      	movs	r2, #1
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7ff f86b 	bl	8002004 <HAL_GPIO_WritePin>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200001c8 	.word	0x200001c8
 8002f3c:	08005940 	.word	0x08005940

08002f40 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <BSP_PB_Init+0x32>
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b22      	ldr	r3, [pc, #136]	@ (8002fe4 <BSP_PB_Init+0xa4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <BSP_PB_Init+0xa4>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe4 <BSP_PB_Init+0xa4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002f78:	2301      	movs	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f80:	2302      	movs	r3, #2
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	@ (8002fe8 <BSP_PB_Init+0xa8>)
 8002f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f90:	f107 020c 	add.w	r2, r7, #12
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fe98 	bl	8001ccc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002f9c:	79bb      	ldrb	r3, [r7, #6]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d11c      	bne.n	8002fdc <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8002faa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe8 <BSP_PB_Init+0xa8>)
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	f107 020c 	add.w	r2, r7, #12
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fe84 	bl	8001ccc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002fc4:	2306      	movs	r3, #6
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	210f      	movs	r1, #15
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fcbc 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fcd3 	bl	8001982 <HAL_NVIC_EnableIRQ>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	200001d8 	.word	0x200001d8

08002fec <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <BSP_PB_GetState+0x28>)
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe ffe6 	bl	8001fd4 <HAL_GPIO_ReadPin>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200001d8 	.word	0x200001d8

08003018 <__cvt>:
 8003018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800301c:	ec57 6b10 	vmov	r6, r7, d0
 8003020:	2f00      	cmp	r7, #0
 8003022:	460c      	mov	r4, r1
 8003024:	4619      	mov	r1, r3
 8003026:	463b      	mov	r3, r7
 8003028:	bfbb      	ittet	lt
 800302a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800302e:	461f      	movlt	r7, r3
 8003030:	2300      	movge	r3, #0
 8003032:	232d      	movlt	r3, #45	@ 0x2d
 8003034:	700b      	strb	r3, [r1, #0]
 8003036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003038:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800303c:	4691      	mov	r9, r2
 800303e:	f023 0820 	bic.w	r8, r3, #32
 8003042:	bfbc      	itt	lt
 8003044:	4632      	movlt	r2, r6
 8003046:	4616      	movlt	r6, r2
 8003048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800304c:	d005      	beq.n	800305a <__cvt+0x42>
 800304e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003052:	d100      	bne.n	8003056 <__cvt+0x3e>
 8003054:	3401      	adds	r4, #1
 8003056:	2102      	movs	r1, #2
 8003058:	e000      	b.n	800305c <__cvt+0x44>
 800305a:	2103      	movs	r1, #3
 800305c:	ab03      	add	r3, sp, #12
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	ab02      	add	r3, sp, #8
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	ec47 6b10 	vmov	d0, r6, r7
 8003068:	4653      	mov	r3, sl
 800306a:	4622      	mov	r2, r4
 800306c:	f000 fe48 	bl	8003d00 <_dtoa_r>
 8003070:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003074:	4605      	mov	r5, r0
 8003076:	d119      	bne.n	80030ac <__cvt+0x94>
 8003078:	f019 0f01 	tst.w	r9, #1
 800307c:	d00e      	beq.n	800309c <__cvt+0x84>
 800307e:	eb00 0904 	add.w	r9, r0, r4
 8003082:	2200      	movs	r2, #0
 8003084:	2300      	movs	r3, #0
 8003086:	4630      	mov	r0, r6
 8003088:	4639      	mov	r1, r7
 800308a:	f7fd fd25 	bl	8000ad8 <__aeabi_dcmpeq>
 800308e:	b108      	cbz	r0, 8003094 <__cvt+0x7c>
 8003090:	f8cd 900c 	str.w	r9, [sp, #12]
 8003094:	2230      	movs	r2, #48	@ 0x30
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	454b      	cmp	r3, r9
 800309a:	d31e      	bcc.n	80030da <__cvt+0xc2>
 800309c:	9b03      	ldr	r3, [sp, #12]
 800309e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80030a0:	1b5b      	subs	r3, r3, r5
 80030a2:	4628      	mov	r0, r5
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	b004      	add	sp, #16
 80030a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80030b0:	eb00 0904 	add.w	r9, r0, r4
 80030b4:	d1e5      	bne.n	8003082 <__cvt+0x6a>
 80030b6:	7803      	ldrb	r3, [r0, #0]
 80030b8:	2b30      	cmp	r3, #48	@ 0x30
 80030ba:	d10a      	bne.n	80030d2 <__cvt+0xba>
 80030bc:	2200      	movs	r2, #0
 80030be:	2300      	movs	r3, #0
 80030c0:	4630      	mov	r0, r6
 80030c2:	4639      	mov	r1, r7
 80030c4:	f7fd fd08 	bl	8000ad8 <__aeabi_dcmpeq>
 80030c8:	b918      	cbnz	r0, 80030d2 <__cvt+0xba>
 80030ca:	f1c4 0401 	rsb	r4, r4, #1
 80030ce:	f8ca 4000 	str.w	r4, [sl]
 80030d2:	f8da 3000 	ldr.w	r3, [sl]
 80030d6:	4499      	add	r9, r3
 80030d8:	e7d3      	b.n	8003082 <__cvt+0x6a>
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	9103      	str	r1, [sp, #12]
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e7d9      	b.n	8003096 <__cvt+0x7e>

080030e2 <__exponent>:
 80030e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e4:	2900      	cmp	r1, #0
 80030e6:	bfba      	itte	lt
 80030e8:	4249      	neglt	r1, r1
 80030ea:	232d      	movlt	r3, #45	@ 0x2d
 80030ec:	232b      	movge	r3, #43	@ 0x2b
 80030ee:	2909      	cmp	r1, #9
 80030f0:	7002      	strb	r2, [r0, #0]
 80030f2:	7043      	strb	r3, [r0, #1]
 80030f4:	dd29      	ble.n	800314a <__exponent+0x68>
 80030f6:	f10d 0307 	add.w	r3, sp, #7
 80030fa:	461d      	mov	r5, r3
 80030fc:	270a      	movs	r7, #10
 80030fe:	461a      	mov	r2, r3
 8003100:	fbb1 f6f7 	udiv	r6, r1, r7
 8003104:	fb07 1416 	mls	r4, r7, r6, r1
 8003108:	3430      	adds	r4, #48	@ 0x30
 800310a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800310e:	460c      	mov	r4, r1
 8003110:	2c63      	cmp	r4, #99	@ 0x63
 8003112:	f103 33ff 	add.w	r3, r3, #4294967295
 8003116:	4631      	mov	r1, r6
 8003118:	dcf1      	bgt.n	80030fe <__exponent+0x1c>
 800311a:	3130      	adds	r1, #48	@ 0x30
 800311c:	1e94      	subs	r4, r2, #2
 800311e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003122:	1c41      	adds	r1, r0, #1
 8003124:	4623      	mov	r3, r4
 8003126:	42ab      	cmp	r3, r5
 8003128:	d30a      	bcc.n	8003140 <__exponent+0x5e>
 800312a:	f10d 0309 	add.w	r3, sp, #9
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	42ac      	cmp	r4, r5
 8003132:	bf88      	it	hi
 8003134:	2300      	movhi	r3, #0
 8003136:	3302      	adds	r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	1a18      	subs	r0, r3, r0
 800313c:	b003      	add	sp, #12
 800313e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003140:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003144:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003148:	e7ed      	b.n	8003126 <__exponent+0x44>
 800314a:	2330      	movs	r3, #48	@ 0x30
 800314c:	3130      	adds	r1, #48	@ 0x30
 800314e:	7083      	strb	r3, [r0, #2]
 8003150:	70c1      	strb	r1, [r0, #3]
 8003152:	1d03      	adds	r3, r0, #4
 8003154:	e7f1      	b.n	800313a <__exponent+0x58>
	...

08003158 <_printf_float>:
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	b08d      	sub	sp, #52	@ 0x34
 800315e:	460c      	mov	r4, r1
 8003160:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003164:	4616      	mov	r6, r2
 8003166:	461f      	mov	r7, r3
 8003168:	4605      	mov	r5, r0
 800316a:	f000 fcbb 	bl	8003ae4 <_localeconv_r>
 800316e:	6803      	ldr	r3, [r0, #0]
 8003170:	9304      	str	r3, [sp, #16]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f884 	bl	8000280 <strlen>
 8003178:	2300      	movs	r3, #0
 800317a:	930a      	str	r3, [sp, #40]	@ 0x28
 800317c:	f8d8 3000 	ldr.w	r3, [r8]
 8003180:	9005      	str	r0, [sp, #20]
 8003182:	3307      	adds	r3, #7
 8003184:	f023 0307 	bic.w	r3, r3, #7
 8003188:	f103 0208 	add.w	r2, r3, #8
 800318c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003190:	f8d4 b000 	ldr.w	fp, [r4]
 8003194:	f8c8 2000 	str.w	r2, [r8]
 8003198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800319c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80031a0:	9307      	str	r3, [sp, #28]
 80031a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80031a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80031aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003420 <_printf_float+0x2c8>)
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	f7fd fcc2 	bl	8000b3c <__aeabi_dcmpun>
 80031b8:	bb70      	cbnz	r0, 8003218 <_printf_float+0xc0>
 80031ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031be:	4b98      	ldr	r3, [pc, #608]	@ (8003420 <_printf_float+0x2c8>)
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	f7fd fc9c 	bl	8000b00 <__aeabi_dcmple>
 80031c8:	bb30      	cbnz	r0, 8003218 <_printf_float+0xc0>
 80031ca:	2200      	movs	r2, #0
 80031cc:	2300      	movs	r3, #0
 80031ce:	4640      	mov	r0, r8
 80031d0:	4649      	mov	r1, r9
 80031d2:	f7fd fc8b 	bl	8000aec <__aeabi_dcmplt>
 80031d6:	b110      	cbz	r0, 80031de <_printf_float+0x86>
 80031d8:	232d      	movs	r3, #45	@ 0x2d
 80031da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031de:	4a91      	ldr	r2, [pc, #580]	@ (8003424 <_printf_float+0x2cc>)
 80031e0:	4b91      	ldr	r3, [pc, #580]	@ (8003428 <_printf_float+0x2d0>)
 80031e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80031e6:	bf94      	ite	ls
 80031e8:	4690      	movls	r8, r2
 80031ea:	4698      	movhi	r8, r3
 80031ec:	2303      	movs	r3, #3
 80031ee:	6123      	str	r3, [r4, #16]
 80031f0:	f02b 0304 	bic.w	r3, fp, #4
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	f04f 0900 	mov.w	r9, #0
 80031fa:	9700      	str	r7, [sp, #0]
 80031fc:	4633      	mov	r3, r6
 80031fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f000 f9d2 	bl	80035ac <_printf_common>
 8003208:	3001      	adds	r0, #1
 800320a:	f040 808d 	bne.w	8003328 <_printf_float+0x1d0>
 800320e:	f04f 30ff 	mov.w	r0, #4294967295
 8003212:	b00d      	add	sp, #52	@ 0x34
 8003214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	4640      	mov	r0, r8
 800321e:	4649      	mov	r1, r9
 8003220:	f7fd fc8c 	bl	8000b3c <__aeabi_dcmpun>
 8003224:	b140      	cbz	r0, 8003238 <_printf_float+0xe0>
 8003226:	464b      	mov	r3, r9
 8003228:	2b00      	cmp	r3, #0
 800322a:	bfbc      	itt	lt
 800322c:	232d      	movlt	r3, #45	@ 0x2d
 800322e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003232:	4a7e      	ldr	r2, [pc, #504]	@ (800342c <_printf_float+0x2d4>)
 8003234:	4b7e      	ldr	r3, [pc, #504]	@ (8003430 <_printf_float+0x2d8>)
 8003236:	e7d4      	b.n	80031e2 <_printf_float+0x8a>
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800323e:	9206      	str	r2, [sp, #24]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	d13b      	bne.n	80032bc <_printf_float+0x164>
 8003244:	2306      	movs	r3, #6
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800324c:	2300      	movs	r3, #0
 800324e:	6022      	str	r2, [r4, #0]
 8003250:	9303      	str	r3, [sp, #12]
 8003252:	ab0a      	add	r3, sp, #40	@ 0x28
 8003254:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003258:	ab09      	add	r3, sp, #36	@ 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6861      	ldr	r1, [r4, #4]
 800325e:	ec49 8b10 	vmov	d0, r8, r9
 8003262:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003266:	4628      	mov	r0, r5
 8003268:	f7ff fed6 	bl	8003018 <__cvt>
 800326c:	9b06      	ldr	r3, [sp, #24]
 800326e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003270:	2b47      	cmp	r3, #71	@ 0x47
 8003272:	4680      	mov	r8, r0
 8003274:	d129      	bne.n	80032ca <_printf_float+0x172>
 8003276:	1cc8      	adds	r0, r1, #3
 8003278:	db02      	blt.n	8003280 <_printf_float+0x128>
 800327a:	6863      	ldr	r3, [r4, #4]
 800327c:	4299      	cmp	r1, r3
 800327e:	dd41      	ble.n	8003304 <_printf_float+0x1ac>
 8003280:	f1aa 0a02 	sub.w	sl, sl, #2
 8003284:	fa5f fa8a 	uxtb.w	sl, sl
 8003288:	3901      	subs	r1, #1
 800328a:	4652      	mov	r2, sl
 800328c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003290:	9109      	str	r1, [sp, #36]	@ 0x24
 8003292:	f7ff ff26 	bl	80030e2 <__exponent>
 8003296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003298:	1813      	adds	r3, r2, r0
 800329a:	2a01      	cmp	r2, #1
 800329c:	4681      	mov	r9, r0
 800329e:	6123      	str	r3, [r4, #16]
 80032a0:	dc02      	bgt.n	80032a8 <_printf_float+0x150>
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	07d2      	lsls	r2, r2, #31
 80032a6:	d501      	bpl.n	80032ac <_printf_float+0x154>
 80032a8:	3301      	adds	r3, #1
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0a2      	beq.n	80031fa <_printf_float+0xa2>
 80032b4:	232d      	movs	r3, #45	@ 0x2d
 80032b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032ba:	e79e      	b.n	80031fa <_printf_float+0xa2>
 80032bc:	9a06      	ldr	r2, [sp, #24]
 80032be:	2a47      	cmp	r2, #71	@ 0x47
 80032c0:	d1c2      	bne.n	8003248 <_printf_float+0xf0>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1c0      	bne.n	8003248 <_printf_float+0xf0>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7bd      	b.n	8003246 <_printf_float+0xee>
 80032ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032ce:	d9db      	bls.n	8003288 <_printf_float+0x130>
 80032d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80032d4:	d118      	bne.n	8003308 <_printf_float+0x1b0>
 80032d6:	2900      	cmp	r1, #0
 80032d8:	6863      	ldr	r3, [r4, #4]
 80032da:	dd0b      	ble.n	80032f4 <_printf_float+0x19c>
 80032dc:	6121      	str	r1, [r4, #16]
 80032de:	b913      	cbnz	r3, 80032e6 <_printf_float+0x18e>
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	07d0      	lsls	r0, r2, #31
 80032e4:	d502      	bpl.n	80032ec <_printf_float+0x194>
 80032e6:	3301      	adds	r3, #1
 80032e8:	440b      	add	r3, r1
 80032ea:	6123      	str	r3, [r4, #16]
 80032ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80032ee:	f04f 0900 	mov.w	r9, #0
 80032f2:	e7db      	b.n	80032ac <_printf_float+0x154>
 80032f4:	b913      	cbnz	r3, 80032fc <_printf_float+0x1a4>
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	07d2      	lsls	r2, r2, #31
 80032fa:	d501      	bpl.n	8003300 <_printf_float+0x1a8>
 80032fc:	3302      	adds	r3, #2
 80032fe:	e7f4      	b.n	80032ea <_printf_float+0x192>
 8003300:	2301      	movs	r3, #1
 8003302:	e7f2      	b.n	80032ea <_printf_float+0x192>
 8003304:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800330a:	4299      	cmp	r1, r3
 800330c:	db05      	blt.n	800331a <_printf_float+0x1c2>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	6121      	str	r1, [r4, #16]
 8003312:	07d8      	lsls	r0, r3, #31
 8003314:	d5ea      	bpl.n	80032ec <_printf_float+0x194>
 8003316:	1c4b      	adds	r3, r1, #1
 8003318:	e7e7      	b.n	80032ea <_printf_float+0x192>
 800331a:	2900      	cmp	r1, #0
 800331c:	bfd4      	ite	le
 800331e:	f1c1 0202 	rsble	r2, r1, #2
 8003322:	2201      	movgt	r2, #1
 8003324:	4413      	add	r3, r2
 8003326:	e7e0      	b.n	80032ea <_printf_float+0x192>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	055a      	lsls	r2, r3, #21
 800332c:	d407      	bmi.n	800333e <_printf_float+0x1e6>
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	4642      	mov	r2, r8
 8003332:	4631      	mov	r1, r6
 8003334:	4628      	mov	r0, r5
 8003336:	47b8      	blx	r7
 8003338:	3001      	adds	r0, #1
 800333a:	d12b      	bne.n	8003394 <_printf_float+0x23c>
 800333c:	e767      	b.n	800320e <_printf_float+0xb6>
 800333e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003342:	f240 80dd 	bls.w	8003500 <_printf_float+0x3a8>
 8003346:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800334a:	2200      	movs	r2, #0
 800334c:	2300      	movs	r3, #0
 800334e:	f7fd fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003352:	2800      	cmp	r0, #0
 8003354:	d033      	beq.n	80033be <_printf_float+0x266>
 8003356:	4a37      	ldr	r2, [pc, #220]	@ (8003434 <_printf_float+0x2dc>)
 8003358:	2301      	movs	r3, #1
 800335a:	4631      	mov	r1, r6
 800335c:	4628      	mov	r0, r5
 800335e:	47b8      	blx	r7
 8003360:	3001      	adds	r0, #1
 8003362:	f43f af54 	beq.w	800320e <_printf_float+0xb6>
 8003366:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800336a:	4543      	cmp	r3, r8
 800336c:	db02      	blt.n	8003374 <_printf_float+0x21c>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	07d8      	lsls	r0, r3, #31
 8003372:	d50f      	bpl.n	8003394 <_printf_float+0x23c>
 8003374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003378:	4631      	mov	r1, r6
 800337a:	4628      	mov	r0, r5
 800337c:	47b8      	blx	r7
 800337e:	3001      	adds	r0, #1
 8003380:	f43f af45 	beq.w	800320e <_printf_float+0xb6>
 8003384:	f04f 0900 	mov.w	r9, #0
 8003388:	f108 38ff 	add.w	r8, r8, #4294967295
 800338c:	f104 0a1a 	add.w	sl, r4, #26
 8003390:	45c8      	cmp	r8, r9
 8003392:	dc09      	bgt.n	80033a8 <_printf_float+0x250>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	079b      	lsls	r3, r3, #30
 8003398:	f100 8103 	bmi.w	80035a2 <_printf_float+0x44a>
 800339c:	68e0      	ldr	r0, [r4, #12]
 800339e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80033a0:	4298      	cmp	r0, r3
 80033a2:	bfb8      	it	lt
 80033a4:	4618      	movlt	r0, r3
 80033a6:	e734      	b.n	8003212 <_printf_float+0xba>
 80033a8:	2301      	movs	r3, #1
 80033aa:	4652      	mov	r2, sl
 80033ac:	4631      	mov	r1, r6
 80033ae:	4628      	mov	r0, r5
 80033b0:	47b8      	blx	r7
 80033b2:	3001      	adds	r0, #1
 80033b4:	f43f af2b 	beq.w	800320e <_printf_float+0xb6>
 80033b8:	f109 0901 	add.w	r9, r9, #1
 80033bc:	e7e8      	b.n	8003390 <_printf_float+0x238>
 80033be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dc39      	bgt.n	8003438 <_printf_float+0x2e0>
 80033c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <_printf_float+0x2dc>)
 80033c6:	2301      	movs	r3, #1
 80033c8:	4631      	mov	r1, r6
 80033ca:	4628      	mov	r0, r5
 80033cc:	47b8      	blx	r7
 80033ce:	3001      	adds	r0, #1
 80033d0:	f43f af1d 	beq.w	800320e <_printf_float+0xb6>
 80033d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80033d8:	ea59 0303 	orrs.w	r3, r9, r3
 80033dc:	d102      	bne.n	80033e4 <_printf_float+0x28c>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	07d9      	lsls	r1, r3, #31
 80033e2:	d5d7      	bpl.n	8003394 <_printf_float+0x23c>
 80033e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033e8:	4631      	mov	r1, r6
 80033ea:	4628      	mov	r0, r5
 80033ec:	47b8      	blx	r7
 80033ee:	3001      	adds	r0, #1
 80033f0:	f43f af0d 	beq.w	800320e <_printf_float+0xb6>
 80033f4:	f04f 0a00 	mov.w	sl, #0
 80033f8:	f104 0b1a 	add.w	fp, r4, #26
 80033fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033fe:	425b      	negs	r3, r3
 8003400:	4553      	cmp	r3, sl
 8003402:	dc01      	bgt.n	8003408 <_printf_float+0x2b0>
 8003404:	464b      	mov	r3, r9
 8003406:	e793      	b.n	8003330 <_printf_float+0x1d8>
 8003408:	2301      	movs	r3, #1
 800340a:	465a      	mov	r2, fp
 800340c:	4631      	mov	r1, r6
 800340e:	4628      	mov	r0, r5
 8003410:	47b8      	blx	r7
 8003412:	3001      	adds	r0, #1
 8003414:	f43f aefb 	beq.w	800320e <_printf_float+0xb6>
 8003418:	f10a 0a01 	add.w	sl, sl, #1
 800341c:	e7ee      	b.n	80033fc <_printf_float+0x2a4>
 800341e:	bf00      	nop
 8003420:	7fefffff 	.word	0x7fefffff
 8003424:	08005948 	.word	0x08005948
 8003428:	0800594c 	.word	0x0800594c
 800342c:	08005950 	.word	0x08005950
 8003430:	08005954 	.word	0x08005954
 8003434:	08005958 	.word	0x08005958
 8003438:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800343a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800343e:	4553      	cmp	r3, sl
 8003440:	bfa8      	it	ge
 8003442:	4653      	movge	r3, sl
 8003444:	2b00      	cmp	r3, #0
 8003446:	4699      	mov	r9, r3
 8003448:	dc36      	bgt.n	80034b8 <_printf_float+0x360>
 800344a:	f04f 0b00 	mov.w	fp, #0
 800344e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003452:	f104 021a 	add.w	r2, r4, #26
 8003456:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003458:	9306      	str	r3, [sp, #24]
 800345a:	eba3 0309 	sub.w	r3, r3, r9
 800345e:	455b      	cmp	r3, fp
 8003460:	dc31      	bgt.n	80034c6 <_printf_float+0x36e>
 8003462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003464:	459a      	cmp	sl, r3
 8003466:	dc3a      	bgt.n	80034de <_printf_float+0x386>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	07da      	lsls	r2, r3, #31
 800346c:	d437      	bmi.n	80034de <_printf_float+0x386>
 800346e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003470:	ebaa 0903 	sub.w	r9, sl, r3
 8003474:	9b06      	ldr	r3, [sp, #24]
 8003476:	ebaa 0303 	sub.w	r3, sl, r3
 800347a:	4599      	cmp	r9, r3
 800347c:	bfa8      	it	ge
 800347e:	4699      	movge	r9, r3
 8003480:	f1b9 0f00 	cmp.w	r9, #0
 8003484:	dc33      	bgt.n	80034ee <_printf_float+0x396>
 8003486:	f04f 0800 	mov.w	r8, #0
 800348a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800348e:	f104 0b1a 	add.w	fp, r4, #26
 8003492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003494:	ebaa 0303 	sub.w	r3, sl, r3
 8003498:	eba3 0309 	sub.w	r3, r3, r9
 800349c:	4543      	cmp	r3, r8
 800349e:	f77f af79 	ble.w	8003394 <_printf_float+0x23c>
 80034a2:	2301      	movs	r3, #1
 80034a4:	465a      	mov	r2, fp
 80034a6:	4631      	mov	r1, r6
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b8      	blx	r7
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f aeae 	beq.w	800320e <_printf_float+0xb6>
 80034b2:	f108 0801 	add.w	r8, r8, #1
 80034b6:	e7ec      	b.n	8003492 <_printf_float+0x33a>
 80034b8:	4642      	mov	r2, r8
 80034ba:	4631      	mov	r1, r6
 80034bc:	4628      	mov	r0, r5
 80034be:	47b8      	blx	r7
 80034c0:	3001      	adds	r0, #1
 80034c2:	d1c2      	bne.n	800344a <_printf_float+0x2f2>
 80034c4:	e6a3      	b.n	800320e <_printf_float+0xb6>
 80034c6:	2301      	movs	r3, #1
 80034c8:	4631      	mov	r1, r6
 80034ca:	4628      	mov	r0, r5
 80034cc:	9206      	str	r2, [sp, #24]
 80034ce:	47b8      	blx	r7
 80034d0:	3001      	adds	r0, #1
 80034d2:	f43f ae9c 	beq.w	800320e <_printf_float+0xb6>
 80034d6:	9a06      	ldr	r2, [sp, #24]
 80034d8:	f10b 0b01 	add.w	fp, fp, #1
 80034dc:	e7bb      	b.n	8003456 <_printf_float+0x2fe>
 80034de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034e2:	4631      	mov	r1, r6
 80034e4:	4628      	mov	r0, r5
 80034e6:	47b8      	blx	r7
 80034e8:	3001      	adds	r0, #1
 80034ea:	d1c0      	bne.n	800346e <_printf_float+0x316>
 80034ec:	e68f      	b.n	800320e <_printf_float+0xb6>
 80034ee:	9a06      	ldr	r2, [sp, #24]
 80034f0:	464b      	mov	r3, r9
 80034f2:	4442      	add	r2, r8
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	47b8      	blx	r7
 80034fa:	3001      	adds	r0, #1
 80034fc:	d1c3      	bne.n	8003486 <_printf_float+0x32e>
 80034fe:	e686      	b.n	800320e <_printf_float+0xb6>
 8003500:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003504:	f1ba 0f01 	cmp.w	sl, #1
 8003508:	dc01      	bgt.n	800350e <_printf_float+0x3b6>
 800350a:	07db      	lsls	r3, r3, #31
 800350c:	d536      	bpl.n	800357c <_printf_float+0x424>
 800350e:	2301      	movs	r3, #1
 8003510:	4642      	mov	r2, r8
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	f43f ae78 	beq.w	800320e <_printf_float+0xb6>
 800351e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003522:	4631      	mov	r1, r6
 8003524:	4628      	mov	r0, r5
 8003526:	47b8      	blx	r7
 8003528:	3001      	adds	r0, #1
 800352a:	f43f ae70 	beq.w	800320e <_printf_float+0xb6>
 800352e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003532:	2200      	movs	r2, #0
 8003534:	2300      	movs	r3, #0
 8003536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800353a:	f7fd facd 	bl	8000ad8 <__aeabi_dcmpeq>
 800353e:	b9c0      	cbnz	r0, 8003572 <_printf_float+0x41a>
 8003540:	4653      	mov	r3, sl
 8003542:	f108 0201 	add.w	r2, r8, #1
 8003546:	4631      	mov	r1, r6
 8003548:	4628      	mov	r0, r5
 800354a:	47b8      	blx	r7
 800354c:	3001      	adds	r0, #1
 800354e:	d10c      	bne.n	800356a <_printf_float+0x412>
 8003550:	e65d      	b.n	800320e <_printf_float+0xb6>
 8003552:	2301      	movs	r3, #1
 8003554:	465a      	mov	r2, fp
 8003556:	4631      	mov	r1, r6
 8003558:	4628      	mov	r0, r5
 800355a:	47b8      	blx	r7
 800355c:	3001      	adds	r0, #1
 800355e:	f43f ae56 	beq.w	800320e <_printf_float+0xb6>
 8003562:	f108 0801 	add.w	r8, r8, #1
 8003566:	45d0      	cmp	r8, sl
 8003568:	dbf3      	blt.n	8003552 <_printf_float+0x3fa>
 800356a:	464b      	mov	r3, r9
 800356c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003570:	e6df      	b.n	8003332 <_printf_float+0x1da>
 8003572:	f04f 0800 	mov.w	r8, #0
 8003576:	f104 0b1a 	add.w	fp, r4, #26
 800357a:	e7f4      	b.n	8003566 <_printf_float+0x40e>
 800357c:	2301      	movs	r3, #1
 800357e:	4642      	mov	r2, r8
 8003580:	e7e1      	b.n	8003546 <_printf_float+0x3ee>
 8003582:	2301      	movs	r3, #1
 8003584:	464a      	mov	r2, r9
 8003586:	4631      	mov	r1, r6
 8003588:	4628      	mov	r0, r5
 800358a:	47b8      	blx	r7
 800358c:	3001      	adds	r0, #1
 800358e:	f43f ae3e 	beq.w	800320e <_printf_float+0xb6>
 8003592:	f108 0801 	add.w	r8, r8, #1
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800359a:	1a5b      	subs	r3, r3, r1
 800359c:	4543      	cmp	r3, r8
 800359e:	dcf0      	bgt.n	8003582 <_printf_float+0x42a>
 80035a0:	e6fc      	b.n	800339c <_printf_float+0x244>
 80035a2:	f04f 0800 	mov.w	r8, #0
 80035a6:	f104 0919 	add.w	r9, r4, #25
 80035aa:	e7f4      	b.n	8003596 <_printf_float+0x43e>

080035ac <_printf_common>:
 80035ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	4616      	mov	r6, r2
 80035b2:	4698      	mov	r8, r3
 80035b4:	688a      	ldr	r2, [r1, #8]
 80035b6:	690b      	ldr	r3, [r1, #16]
 80035b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035bc:	4293      	cmp	r3, r2
 80035be:	bfb8      	it	lt
 80035c0:	4613      	movlt	r3, r2
 80035c2:	6033      	str	r3, [r6, #0]
 80035c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035c8:	4607      	mov	r7, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	b10a      	cbz	r2, 80035d2 <_printf_common+0x26>
 80035ce:	3301      	adds	r3, #1
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	0699      	lsls	r1, r3, #26
 80035d6:	bf42      	ittt	mi
 80035d8:	6833      	ldrmi	r3, [r6, #0]
 80035da:	3302      	addmi	r3, #2
 80035dc:	6033      	strmi	r3, [r6, #0]
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	f015 0506 	ands.w	r5, r5, #6
 80035e4:	d106      	bne.n	80035f4 <_printf_common+0x48>
 80035e6:	f104 0a19 	add.w	sl, r4, #25
 80035ea:	68e3      	ldr	r3, [r4, #12]
 80035ec:	6832      	ldr	r2, [r6, #0]
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	42ab      	cmp	r3, r5
 80035f2:	dc26      	bgt.n	8003642 <_printf_common+0x96>
 80035f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	3b00      	subs	r3, #0
 80035fc:	bf18      	it	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	0692      	lsls	r2, r2, #26
 8003602:	d42b      	bmi.n	800365c <_printf_common+0xb0>
 8003604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003608:	4641      	mov	r1, r8
 800360a:	4638      	mov	r0, r7
 800360c:	47c8      	blx	r9
 800360e:	3001      	adds	r0, #1
 8003610:	d01e      	beq.n	8003650 <_printf_common+0xa4>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	6922      	ldr	r2, [r4, #16]
 8003616:	f003 0306 	and.w	r3, r3, #6
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf02      	ittt	eq
 800361e:	68e5      	ldreq	r5, [r4, #12]
 8003620:	6833      	ldreq	r3, [r6, #0]
 8003622:	1aed      	subeq	r5, r5, r3
 8003624:	68a3      	ldr	r3, [r4, #8]
 8003626:	bf0c      	ite	eq
 8003628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800362c:	2500      	movne	r5, #0
 800362e:	4293      	cmp	r3, r2
 8003630:	bfc4      	itt	gt
 8003632:	1a9b      	subgt	r3, r3, r2
 8003634:	18ed      	addgt	r5, r5, r3
 8003636:	2600      	movs	r6, #0
 8003638:	341a      	adds	r4, #26
 800363a:	42b5      	cmp	r5, r6
 800363c:	d11a      	bne.n	8003674 <_printf_common+0xc8>
 800363e:	2000      	movs	r0, #0
 8003640:	e008      	b.n	8003654 <_printf_common+0xa8>
 8003642:	2301      	movs	r3, #1
 8003644:	4652      	mov	r2, sl
 8003646:	4641      	mov	r1, r8
 8003648:	4638      	mov	r0, r7
 800364a:	47c8      	blx	r9
 800364c:	3001      	adds	r0, #1
 800364e:	d103      	bne.n	8003658 <_printf_common+0xac>
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003658:	3501      	adds	r5, #1
 800365a:	e7c6      	b.n	80035ea <_printf_common+0x3e>
 800365c:	18e1      	adds	r1, r4, r3
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	2030      	movs	r0, #48	@ 0x30
 8003662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003666:	4422      	add	r2, r4
 8003668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800366c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003670:	3302      	adds	r3, #2
 8003672:	e7c7      	b.n	8003604 <_printf_common+0x58>
 8003674:	2301      	movs	r3, #1
 8003676:	4622      	mov	r2, r4
 8003678:	4641      	mov	r1, r8
 800367a:	4638      	mov	r0, r7
 800367c:	47c8      	blx	r9
 800367e:	3001      	adds	r0, #1
 8003680:	d0e6      	beq.n	8003650 <_printf_common+0xa4>
 8003682:	3601      	adds	r6, #1
 8003684:	e7d9      	b.n	800363a <_printf_common+0x8e>
	...

08003688 <_printf_i>:
 8003688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	7e0f      	ldrb	r7, [r1, #24]
 800368e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003690:	2f78      	cmp	r7, #120	@ 0x78
 8003692:	4691      	mov	r9, r2
 8003694:	4680      	mov	r8, r0
 8003696:	460c      	mov	r4, r1
 8003698:	469a      	mov	sl, r3
 800369a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800369e:	d807      	bhi.n	80036b0 <_printf_i+0x28>
 80036a0:	2f62      	cmp	r7, #98	@ 0x62
 80036a2:	d80a      	bhi.n	80036ba <_printf_i+0x32>
 80036a4:	2f00      	cmp	r7, #0
 80036a6:	f000 80d2 	beq.w	800384e <_printf_i+0x1c6>
 80036aa:	2f58      	cmp	r7, #88	@ 0x58
 80036ac:	f000 80b9 	beq.w	8003822 <_printf_i+0x19a>
 80036b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036b8:	e03a      	b.n	8003730 <_printf_i+0xa8>
 80036ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036be:	2b15      	cmp	r3, #21
 80036c0:	d8f6      	bhi.n	80036b0 <_printf_i+0x28>
 80036c2:	a101      	add	r1, pc, #4	@ (adr r1, 80036c8 <_printf_i+0x40>)
 80036c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c8:	08003721 	.word	0x08003721
 80036cc:	08003735 	.word	0x08003735
 80036d0:	080036b1 	.word	0x080036b1
 80036d4:	080036b1 	.word	0x080036b1
 80036d8:	080036b1 	.word	0x080036b1
 80036dc:	080036b1 	.word	0x080036b1
 80036e0:	08003735 	.word	0x08003735
 80036e4:	080036b1 	.word	0x080036b1
 80036e8:	080036b1 	.word	0x080036b1
 80036ec:	080036b1 	.word	0x080036b1
 80036f0:	080036b1 	.word	0x080036b1
 80036f4:	08003835 	.word	0x08003835
 80036f8:	0800375f 	.word	0x0800375f
 80036fc:	080037ef 	.word	0x080037ef
 8003700:	080036b1 	.word	0x080036b1
 8003704:	080036b1 	.word	0x080036b1
 8003708:	08003857 	.word	0x08003857
 800370c:	080036b1 	.word	0x080036b1
 8003710:	0800375f 	.word	0x0800375f
 8003714:	080036b1 	.word	0x080036b1
 8003718:	080036b1 	.word	0x080036b1
 800371c:	080037f7 	.word	0x080037f7
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6032      	str	r2, [r6, #0]
 8003728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800372c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003730:	2301      	movs	r3, #1
 8003732:	e09d      	b.n	8003870 <_printf_i+0x1e8>
 8003734:	6833      	ldr	r3, [r6, #0]
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	1d19      	adds	r1, r3, #4
 800373a:	6031      	str	r1, [r6, #0]
 800373c:	0606      	lsls	r6, r0, #24
 800373e:	d501      	bpl.n	8003744 <_printf_i+0xbc>
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	e003      	b.n	800374c <_printf_i+0xc4>
 8003744:	0645      	lsls	r5, r0, #25
 8003746:	d5fb      	bpl.n	8003740 <_printf_i+0xb8>
 8003748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800374c:	2d00      	cmp	r5, #0
 800374e:	da03      	bge.n	8003758 <_printf_i+0xd0>
 8003750:	232d      	movs	r3, #45	@ 0x2d
 8003752:	426d      	negs	r5, r5
 8003754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003758:	4859      	ldr	r0, [pc, #356]	@ (80038c0 <_printf_i+0x238>)
 800375a:	230a      	movs	r3, #10
 800375c:	e011      	b.n	8003782 <_printf_i+0xfa>
 800375e:	6821      	ldr	r1, [r4, #0]
 8003760:	6833      	ldr	r3, [r6, #0]
 8003762:	0608      	lsls	r0, r1, #24
 8003764:	f853 5b04 	ldr.w	r5, [r3], #4
 8003768:	d402      	bmi.n	8003770 <_printf_i+0xe8>
 800376a:	0649      	lsls	r1, r1, #25
 800376c:	bf48      	it	mi
 800376e:	b2ad      	uxthmi	r5, r5
 8003770:	2f6f      	cmp	r7, #111	@ 0x6f
 8003772:	4853      	ldr	r0, [pc, #332]	@ (80038c0 <_printf_i+0x238>)
 8003774:	6033      	str	r3, [r6, #0]
 8003776:	bf14      	ite	ne
 8003778:	230a      	movne	r3, #10
 800377a:	2308      	moveq	r3, #8
 800377c:	2100      	movs	r1, #0
 800377e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003782:	6866      	ldr	r6, [r4, #4]
 8003784:	60a6      	str	r6, [r4, #8]
 8003786:	2e00      	cmp	r6, #0
 8003788:	bfa2      	ittt	ge
 800378a:	6821      	ldrge	r1, [r4, #0]
 800378c:	f021 0104 	bicge.w	r1, r1, #4
 8003790:	6021      	strge	r1, [r4, #0]
 8003792:	b90d      	cbnz	r5, 8003798 <_printf_i+0x110>
 8003794:	2e00      	cmp	r6, #0
 8003796:	d04b      	beq.n	8003830 <_printf_i+0x1a8>
 8003798:	4616      	mov	r6, r2
 800379a:	fbb5 f1f3 	udiv	r1, r5, r3
 800379e:	fb03 5711 	mls	r7, r3, r1, r5
 80037a2:	5dc7      	ldrb	r7, [r0, r7]
 80037a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037a8:	462f      	mov	r7, r5
 80037aa:	42bb      	cmp	r3, r7
 80037ac:	460d      	mov	r5, r1
 80037ae:	d9f4      	bls.n	800379a <_printf_i+0x112>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d10b      	bne.n	80037cc <_printf_i+0x144>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	07df      	lsls	r7, r3, #31
 80037b8:	d508      	bpl.n	80037cc <_printf_i+0x144>
 80037ba:	6923      	ldr	r3, [r4, #16]
 80037bc:	6861      	ldr	r1, [r4, #4]
 80037be:	4299      	cmp	r1, r3
 80037c0:	bfde      	ittt	le
 80037c2:	2330      	movle	r3, #48	@ 0x30
 80037c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037cc:	1b92      	subs	r2, r2, r6
 80037ce:	6122      	str	r2, [r4, #16]
 80037d0:	f8cd a000 	str.w	sl, [sp]
 80037d4:	464b      	mov	r3, r9
 80037d6:	aa03      	add	r2, sp, #12
 80037d8:	4621      	mov	r1, r4
 80037da:	4640      	mov	r0, r8
 80037dc:	f7ff fee6 	bl	80035ac <_printf_common>
 80037e0:	3001      	adds	r0, #1
 80037e2:	d14a      	bne.n	800387a <_printf_i+0x1f2>
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	b004      	add	sp, #16
 80037ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	f043 0320 	orr.w	r3, r3, #32
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	4833      	ldr	r0, [pc, #204]	@ (80038c4 <_printf_i+0x23c>)
 80037f8:	2778      	movs	r7, #120	@ 0x78
 80037fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	6831      	ldr	r1, [r6, #0]
 8003802:	061f      	lsls	r7, r3, #24
 8003804:	f851 5b04 	ldr.w	r5, [r1], #4
 8003808:	d402      	bmi.n	8003810 <_printf_i+0x188>
 800380a:	065f      	lsls	r7, r3, #25
 800380c:	bf48      	it	mi
 800380e:	b2ad      	uxthmi	r5, r5
 8003810:	6031      	str	r1, [r6, #0]
 8003812:	07d9      	lsls	r1, r3, #31
 8003814:	bf44      	itt	mi
 8003816:	f043 0320 	orrmi.w	r3, r3, #32
 800381a:	6023      	strmi	r3, [r4, #0]
 800381c:	b11d      	cbz	r5, 8003826 <_printf_i+0x19e>
 800381e:	2310      	movs	r3, #16
 8003820:	e7ac      	b.n	800377c <_printf_i+0xf4>
 8003822:	4827      	ldr	r0, [pc, #156]	@ (80038c0 <_printf_i+0x238>)
 8003824:	e7e9      	b.n	80037fa <_printf_i+0x172>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	f023 0320 	bic.w	r3, r3, #32
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	e7f6      	b.n	800381e <_printf_i+0x196>
 8003830:	4616      	mov	r6, r2
 8003832:	e7bd      	b.n	80037b0 <_printf_i+0x128>
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	6825      	ldr	r5, [r4, #0]
 8003838:	6961      	ldr	r1, [r4, #20]
 800383a:	1d18      	adds	r0, r3, #4
 800383c:	6030      	str	r0, [r6, #0]
 800383e:	062e      	lsls	r6, r5, #24
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	d501      	bpl.n	8003848 <_printf_i+0x1c0>
 8003844:	6019      	str	r1, [r3, #0]
 8003846:	e002      	b.n	800384e <_printf_i+0x1c6>
 8003848:	0668      	lsls	r0, r5, #25
 800384a:	d5fb      	bpl.n	8003844 <_printf_i+0x1bc>
 800384c:	8019      	strh	r1, [r3, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	6123      	str	r3, [r4, #16]
 8003852:	4616      	mov	r6, r2
 8003854:	e7bc      	b.n	80037d0 <_printf_i+0x148>
 8003856:	6833      	ldr	r3, [r6, #0]
 8003858:	1d1a      	adds	r2, r3, #4
 800385a:	6032      	str	r2, [r6, #0]
 800385c:	681e      	ldr	r6, [r3, #0]
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	2100      	movs	r1, #0
 8003862:	4630      	mov	r0, r6
 8003864:	f7fc fcbc 	bl	80001e0 <memchr>
 8003868:	b108      	cbz	r0, 800386e <_printf_i+0x1e6>
 800386a:	1b80      	subs	r0, r0, r6
 800386c:	6060      	str	r0, [r4, #4]
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	6123      	str	r3, [r4, #16]
 8003872:	2300      	movs	r3, #0
 8003874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003878:	e7aa      	b.n	80037d0 <_printf_i+0x148>
 800387a:	6923      	ldr	r3, [r4, #16]
 800387c:	4632      	mov	r2, r6
 800387e:	4649      	mov	r1, r9
 8003880:	4640      	mov	r0, r8
 8003882:	47d0      	blx	sl
 8003884:	3001      	adds	r0, #1
 8003886:	d0ad      	beq.n	80037e4 <_printf_i+0x15c>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	079b      	lsls	r3, r3, #30
 800388c:	d413      	bmi.n	80038b6 <_printf_i+0x22e>
 800388e:	68e0      	ldr	r0, [r4, #12]
 8003890:	9b03      	ldr	r3, [sp, #12]
 8003892:	4298      	cmp	r0, r3
 8003894:	bfb8      	it	lt
 8003896:	4618      	movlt	r0, r3
 8003898:	e7a6      	b.n	80037e8 <_printf_i+0x160>
 800389a:	2301      	movs	r3, #1
 800389c:	4632      	mov	r2, r6
 800389e:	4649      	mov	r1, r9
 80038a0:	4640      	mov	r0, r8
 80038a2:	47d0      	blx	sl
 80038a4:	3001      	adds	r0, #1
 80038a6:	d09d      	beq.n	80037e4 <_printf_i+0x15c>
 80038a8:	3501      	adds	r5, #1
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	9903      	ldr	r1, [sp, #12]
 80038ae:	1a5b      	subs	r3, r3, r1
 80038b0:	42ab      	cmp	r3, r5
 80038b2:	dcf2      	bgt.n	800389a <_printf_i+0x212>
 80038b4:	e7eb      	b.n	800388e <_printf_i+0x206>
 80038b6:	2500      	movs	r5, #0
 80038b8:	f104 0619 	add.w	r6, r4, #25
 80038bc:	e7f5      	b.n	80038aa <_printf_i+0x222>
 80038be:	bf00      	nop
 80038c0:	0800595a 	.word	0x0800595a
 80038c4:	0800596b 	.word	0x0800596b

080038c8 <std>:
 80038c8:	2300      	movs	r3, #0
 80038ca:	b510      	push	{r4, lr}
 80038cc:	4604      	mov	r4, r0
 80038ce:	e9c0 3300 	strd	r3, r3, [r0]
 80038d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038d6:	6083      	str	r3, [r0, #8]
 80038d8:	8181      	strh	r1, [r0, #12]
 80038da:	6643      	str	r3, [r0, #100]	@ 0x64
 80038dc:	81c2      	strh	r2, [r0, #14]
 80038de:	6183      	str	r3, [r0, #24]
 80038e0:	4619      	mov	r1, r3
 80038e2:	2208      	movs	r2, #8
 80038e4:	305c      	adds	r0, #92	@ 0x5c
 80038e6:	f000 f8f4 	bl	8003ad2 <memset>
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <std+0x58>)
 80038ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <std+0x5c>)
 80038f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <std+0x60>)
 80038f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <std+0x64>)
 80038f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80038fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <std+0x68>)
 80038fc:	6224      	str	r4, [r4, #32]
 80038fe:	429c      	cmp	r4, r3
 8003900:	d006      	beq.n	8003910 <std+0x48>
 8003902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003906:	4294      	cmp	r4, r2
 8003908:	d002      	beq.n	8003910 <std+0x48>
 800390a:	33d0      	adds	r3, #208	@ 0xd0
 800390c:	429c      	cmp	r4, r3
 800390e:	d105      	bne.n	800391c <std+0x54>
 8003910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003918:	f000 b958 	b.w	8003bcc <__retarget_lock_init_recursive>
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	08003a4d 	.word	0x08003a4d
 8003924:	08003a6f 	.word	0x08003a6f
 8003928:	08003aa7 	.word	0x08003aa7
 800392c:	08003acb 	.word	0x08003acb
 8003930:	20000780 	.word	0x20000780

08003934 <stdio_exit_handler>:
 8003934:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <stdio_exit_handler+0xc>)
 8003936:	4903      	ldr	r1, [pc, #12]	@ (8003944 <stdio_exit_handler+0x10>)
 8003938:	4803      	ldr	r0, [pc, #12]	@ (8003948 <stdio_exit_handler+0x14>)
 800393a:	f000 b869 	b.w	8003a10 <_fwalk_sglue>
 800393e:	bf00      	nop
 8003940:	200001dc 	.word	0x200001dc
 8003944:	08005295 	.word	0x08005295
 8003948:	200001ec 	.word	0x200001ec

0800394c <cleanup_stdio>:
 800394c:	6841      	ldr	r1, [r0, #4]
 800394e:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <cleanup_stdio+0x34>)
 8003950:	4299      	cmp	r1, r3
 8003952:	b510      	push	{r4, lr}
 8003954:	4604      	mov	r4, r0
 8003956:	d001      	beq.n	800395c <cleanup_stdio+0x10>
 8003958:	f001 fc9c 	bl	8005294 <_fflush_r>
 800395c:	68a1      	ldr	r1, [r4, #8]
 800395e:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <cleanup_stdio+0x38>)
 8003960:	4299      	cmp	r1, r3
 8003962:	d002      	beq.n	800396a <cleanup_stdio+0x1e>
 8003964:	4620      	mov	r0, r4
 8003966:	f001 fc95 	bl	8005294 <_fflush_r>
 800396a:	68e1      	ldr	r1, [r4, #12]
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <cleanup_stdio+0x3c>)
 800396e:	4299      	cmp	r1, r3
 8003970:	d004      	beq.n	800397c <cleanup_stdio+0x30>
 8003972:	4620      	mov	r0, r4
 8003974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003978:	f001 bc8c 	b.w	8005294 <_fflush_r>
 800397c:	bd10      	pop	{r4, pc}
 800397e:	bf00      	nop
 8003980:	20000780 	.word	0x20000780
 8003984:	200007e8 	.word	0x200007e8
 8003988:	20000850 	.word	0x20000850

0800398c <global_stdio_init.part.0>:
 800398c:	b510      	push	{r4, lr}
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <global_stdio_init.part.0+0x30>)
 8003990:	4c0b      	ldr	r4, [pc, #44]	@ (80039c0 <global_stdio_init.part.0+0x34>)
 8003992:	4a0c      	ldr	r2, [pc, #48]	@ (80039c4 <global_stdio_init.part.0+0x38>)
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4620      	mov	r0, r4
 8003998:	2200      	movs	r2, #0
 800399a:	2104      	movs	r1, #4
 800399c:	f7ff ff94 	bl	80038c8 <std>
 80039a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039a4:	2201      	movs	r2, #1
 80039a6:	2109      	movs	r1, #9
 80039a8:	f7ff ff8e 	bl	80038c8 <std>
 80039ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039b0:	2202      	movs	r2, #2
 80039b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b6:	2112      	movs	r1, #18
 80039b8:	f7ff bf86 	b.w	80038c8 <std>
 80039bc:	200008b8 	.word	0x200008b8
 80039c0:	20000780 	.word	0x20000780
 80039c4:	08003935 	.word	0x08003935

080039c8 <__sfp_lock_acquire>:
 80039c8:	4801      	ldr	r0, [pc, #4]	@ (80039d0 <__sfp_lock_acquire+0x8>)
 80039ca:	f000 b900 	b.w	8003bce <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	200008c1 	.word	0x200008c1

080039d4 <__sfp_lock_release>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__sfp_lock_release+0x8>)
 80039d6:	f000 b8fb 	b.w	8003bd0 <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	200008c1 	.word	0x200008c1

080039e0 <__sinit>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	f7ff fff0 	bl	80039c8 <__sfp_lock_acquire>
 80039e8:	6a23      	ldr	r3, [r4, #32]
 80039ea:	b11b      	cbz	r3, 80039f4 <__sinit+0x14>
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f7ff bff0 	b.w	80039d4 <__sfp_lock_release>
 80039f4:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <__sinit+0x28>)
 80039f6:	6223      	str	r3, [r4, #32]
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__sinit+0x2c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f5      	bne.n	80039ec <__sinit+0xc>
 8003a00:	f7ff ffc4 	bl	800398c <global_stdio_init.part.0>
 8003a04:	e7f2      	b.n	80039ec <__sinit+0xc>
 8003a06:	bf00      	nop
 8003a08:	0800394d 	.word	0x0800394d
 8003a0c:	200008b8 	.word	0x200008b8

08003a10 <_fwalk_sglue>:
 8003a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a14:	4607      	mov	r7, r0
 8003a16:	4688      	mov	r8, r1
 8003a18:	4614      	mov	r4, r2
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a20:	f1b9 0901 	subs.w	r9, r9, #1
 8003a24:	d505      	bpl.n	8003a32 <_fwalk_sglue+0x22>
 8003a26:	6824      	ldr	r4, [r4, #0]
 8003a28:	2c00      	cmp	r4, #0
 8003a2a:	d1f7      	bne.n	8003a1c <_fwalk_sglue+0xc>
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a32:	89ab      	ldrh	r3, [r5, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d907      	bls.n	8003a48 <_fwalk_sglue+0x38>
 8003a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	d003      	beq.n	8003a48 <_fwalk_sglue+0x38>
 8003a40:	4629      	mov	r1, r5
 8003a42:	4638      	mov	r0, r7
 8003a44:	47c0      	blx	r8
 8003a46:	4306      	orrs	r6, r0
 8003a48:	3568      	adds	r5, #104	@ 0x68
 8003a4a:	e7e9      	b.n	8003a20 <_fwalk_sglue+0x10>

08003a4c <__sread>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	460c      	mov	r4, r1
 8003a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a54:	f000 f86c 	bl	8003b30 <_read_r>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	bfab      	itete	ge
 8003a5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a60:	181b      	addge	r3, r3, r0
 8003a62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a66:	bfac      	ite	ge
 8003a68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a6a:	81a3      	strhlt	r3, [r4, #12]
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <__swrite>:
 8003a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a72:	461f      	mov	r7, r3
 8003a74:	898b      	ldrh	r3, [r1, #12]
 8003a76:	05db      	lsls	r3, r3, #23
 8003a78:	4605      	mov	r5, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	d505      	bpl.n	8003a8c <__swrite+0x1e>
 8003a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a84:	2302      	movs	r3, #2
 8003a86:	2200      	movs	r2, #0
 8003a88:	f000 f840 	bl	8003b0c <_lseek_r>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	4632      	mov	r2, r6
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa2:	f000 b857 	b.w	8003b54 <_write_r>

08003aa6 <__sseek>:
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aae:	f000 f82d 	bl	8003b0c <_lseek_r>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	bf15      	itete	ne
 8003ab8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003aba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003abe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ac2:	81a3      	strheq	r3, [r4, #12]
 8003ac4:	bf18      	it	ne
 8003ac6:	81a3      	strhne	r3, [r4, #12]
 8003ac8:	bd10      	pop	{r4, pc}

08003aca <__sclose>:
 8003aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ace:	f000 b80d 	b.w	8003aec <_close_r>

08003ad2 <memset>:
 8003ad2:	4402      	add	r2, r0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d100      	bne.n	8003adc <memset+0xa>
 8003ada:	4770      	bx	lr
 8003adc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae0:	e7f9      	b.n	8003ad6 <memset+0x4>
	...

08003ae4 <_localeconv_r>:
 8003ae4:	4800      	ldr	r0, [pc, #0]	@ (8003ae8 <_localeconv_r+0x4>)
 8003ae6:	4770      	bx	lr
 8003ae8:	20000328 	.word	0x20000328

08003aec <_close_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d06      	ldr	r5, [pc, #24]	@ (8003b08 <_close_r+0x1c>)
 8003af0:	2300      	movs	r3, #0
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	f7fd fd10 	bl	800151c <_close>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_close_r+0x1a>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_close_r+0x1a>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	200008bc 	.word	0x200008bc

08003b0c <_lseek_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d07      	ldr	r5, [pc, #28]	@ (8003b2c <_lseek_r+0x20>)
 8003b10:	4604      	mov	r4, r0
 8003b12:	4608      	mov	r0, r1
 8003b14:	4611      	mov	r1, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	602a      	str	r2, [r5, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fd fd25 	bl	800156a <_lseek>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_lseek_r+0x1e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_lseek_r+0x1e>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	200008bc 	.word	0x200008bc

08003b30 <_read_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4d07      	ldr	r5, [pc, #28]	@ (8003b50 <_read_r+0x20>)
 8003b34:	4604      	mov	r4, r0
 8003b36:	4608      	mov	r0, r1
 8003b38:	4611      	mov	r1, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	602a      	str	r2, [r5, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f7fd fccf 	bl	80014e2 <_read>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_read_r+0x1e>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_read_r+0x1e>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	200008bc 	.word	0x200008bc

08003b54 <_write_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d07      	ldr	r5, [pc, #28]	@ (8003b74 <_write_r+0x20>)
 8003b58:	4604      	mov	r4, r0
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fd fb30 	bl	80011c8 <_write>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_write_r+0x1e>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_write_r+0x1e>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	200008bc 	.word	0x200008bc

08003b78 <__errno>:
 8003b78:	4b01      	ldr	r3, [pc, #4]	@ (8003b80 <__errno+0x8>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	200001e8 	.word	0x200001e8

08003b84 <__libc_init_array>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	4d0d      	ldr	r5, [pc, #52]	@ (8003bbc <__libc_init_array+0x38>)
 8003b88:	4c0d      	ldr	r4, [pc, #52]	@ (8003bc0 <__libc_init_array+0x3c>)
 8003b8a:	1b64      	subs	r4, r4, r5
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	2600      	movs	r6, #0
 8003b90:	42a6      	cmp	r6, r4
 8003b92:	d109      	bne.n	8003ba8 <__libc_init_array+0x24>
 8003b94:	4d0b      	ldr	r5, [pc, #44]	@ (8003bc4 <__libc_init_array+0x40>)
 8003b96:	4c0c      	ldr	r4, [pc, #48]	@ (8003bc8 <__libc_init_array+0x44>)
 8003b98:	f001 febc 	bl	8005914 <_init>
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	42a6      	cmp	r6, r4
 8003ba4:	d105      	bne.n	8003bb2 <__libc_init_array+0x2e>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bac:	4798      	blx	r3
 8003bae:	3601      	adds	r6, #1
 8003bb0:	e7ee      	b.n	8003b90 <__libc_init_array+0xc>
 8003bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb6:	4798      	blx	r3
 8003bb8:	3601      	adds	r6, #1
 8003bba:	e7f2      	b.n	8003ba2 <__libc_init_array+0x1e>
 8003bbc:	08005cc0 	.word	0x08005cc0
 8003bc0:	08005cc0 	.word	0x08005cc0
 8003bc4:	08005cc0 	.word	0x08005cc0
 8003bc8:	08005cc4 	.word	0x08005cc4

08003bcc <__retarget_lock_init_recursive>:
 8003bcc:	4770      	bx	lr

08003bce <__retarget_lock_acquire_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <__retarget_lock_release_recursive>:
 8003bd0:	4770      	bx	lr

08003bd2 <memcpy>:
 8003bd2:	440a      	add	r2, r1
 8003bd4:	4291      	cmp	r1, r2
 8003bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bda:	d100      	bne.n	8003bde <memcpy+0xc>
 8003bdc:	4770      	bx	lr
 8003bde:	b510      	push	{r4, lr}
 8003be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003be8:	4291      	cmp	r1, r2
 8003bea:	d1f9      	bne.n	8003be0 <memcpy+0xe>
 8003bec:	bd10      	pop	{r4, pc}

08003bee <quorem>:
 8003bee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf2:	6903      	ldr	r3, [r0, #16]
 8003bf4:	690c      	ldr	r4, [r1, #16]
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	db7e      	blt.n	8003cfa <quorem+0x10c>
 8003bfc:	3c01      	subs	r4, #1
 8003bfe:	f101 0814 	add.w	r8, r1, #20
 8003c02:	00a3      	lsls	r3, r4, #2
 8003c04:	f100 0514 	add.w	r5, r0, #20
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c20:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c24:	d32e      	bcc.n	8003c84 <quorem+0x96>
 8003c26:	f04f 0a00 	mov.w	sl, #0
 8003c2a:	46c4      	mov	ip, r8
 8003c2c:	46ae      	mov	lr, r5
 8003c2e:	46d3      	mov	fp, sl
 8003c30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c34:	b298      	uxth	r0, r3
 8003c36:	fb06 a000 	mla	r0, r6, r0, sl
 8003c3a:	0c02      	lsrs	r2, r0, #16
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	fb06 2303 	mla	r3, r6, r3, r2
 8003c42:	f8de 2000 	ldr.w	r2, [lr]
 8003c46:	b280      	uxth	r0, r0
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	1a12      	subs	r2, r2, r0
 8003c4c:	445a      	add	r2, fp
 8003c4e:	f8de 0000 	ldr.w	r0, [lr]
 8003c52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c60:	b292      	uxth	r2, r2
 8003c62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c66:	45e1      	cmp	r9, ip
 8003c68:	f84e 2b04 	str.w	r2, [lr], #4
 8003c6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c70:	d2de      	bcs.n	8003c30 <quorem+0x42>
 8003c72:	9b00      	ldr	r3, [sp, #0]
 8003c74:	58eb      	ldr	r3, [r5, r3]
 8003c76:	b92b      	cbnz	r3, 8003c84 <quorem+0x96>
 8003c78:	9b01      	ldr	r3, [sp, #4]
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	429d      	cmp	r5, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	d32f      	bcc.n	8003ce2 <quorem+0xf4>
 8003c82:	613c      	str	r4, [r7, #16]
 8003c84:	4638      	mov	r0, r7
 8003c86:	f001 f979 	bl	8004f7c <__mcmp>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	db25      	blt.n	8003cda <quorem+0xec>
 8003c8e:	4629      	mov	r1, r5
 8003c90:	2000      	movs	r0, #0
 8003c92:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c96:	f8d1 c000 	ldr.w	ip, [r1]
 8003c9a:	fa1f fe82 	uxth.w	lr, r2
 8003c9e:	fa1f f38c 	uxth.w	r3, ip
 8003ca2:	eba3 030e 	sub.w	r3, r3, lr
 8003ca6:	4403      	add	r3, r0
 8003ca8:	0c12      	lsrs	r2, r2, #16
 8003caa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003cae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cb8:	45c1      	cmp	r9, r8
 8003cba:	f841 3b04 	str.w	r3, [r1], #4
 8003cbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003cc2:	d2e6      	bcs.n	8003c92 <quorem+0xa4>
 8003cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ccc:	b922      	cbnz	r2, 8003cd8 <quorem+0xea>
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	429d      	cmp	r5, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	d30b      	bcc.n	8003cee <quorem+0x100>
 8003cd6:	613c      	str	r4, [r7, #16]
 8003cd8:	3601      	adds	r6, #1
 8003cda:	4630      	mov	r0, r6
 8003cdc:	b003      	add	sp, #12
 8003cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	3b04      	subs	r3, #4
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d1cb      	bne.n	8003c82 <quorem+0x94>
 8003cea:	3c01      	subs	r4, #1
 8003cec:	e7c6      	b.n	8003c7c <quorem+0x8e>
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	3b04      	subs	r3, #4
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <quorem+0xe8>
 8003cf6:	3c01      	subs	r4, #1
 8003cf8:	e7ea      	b.n	8003cd0 <quorem+0xe2>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e7ee      	b.n	8003cdc <quorem+0xee>
	...

08003d00 <_dtoa_r>:
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	69c7      	ldr	r7, [r0, #28]
 8003d06:	b099      	sub	sp, #100	@ 0x64
 8003d08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003d0c:	ec55 4b10 	vmov	r4, r5, d0
 8003d10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003d12:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d14:	4683      	mov	fp, r0
 8003d16:	920e      	str	r2, [sp, #56]	@ 0x38
 8003d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d1a:	b97f      	cbnz	r7, 8003d3c <_dtoa_r+0x3c>
 8003d1c:	2010      	movs	r0, #16
 8003d1e:	f000 fdfd 	bl	800491c <malloc>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8cb 001c 	str.w	r0, [fp, #28]
 8003d28:	b920      	cbnz	r0, 8003d34 <_dtoa_r+0x34>
 8003d2a:	4ba7      	ldr	r3, [pc, #668]	@ (8003fc8 <_dtoa_r+0x2c8>)
 8003d2c:	21ef      	movs	r1, #239	@ 0xef
 8003d2e:	48a7      	ldr	r0, [pc, #668]	@ (8003fcc <_dtoa_r+0x2cc>)
 8003d30:	f001 fae8 	bl	8005304 <__assert_func>
 8003d34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d38:	6007      	str	r7, [r0, #0]
 8003d3a:	60c7      	str	r7, [r0, #12]
 8003d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	b159      	cbz	r1, 8003d5c <_dtoa_r+0x5c>
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	604a      	str	r2, [r1, #4]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
 8003d4e:	4658      	mov	r0, fp
 8003d50:	f000 feda 	bl	8004b08 <_Bfree>
 8003d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	1e2b      	subs	r3, r5, #0
 8003d5e:	bfb9      	ittee	lt
 8003d60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d64:	9303      	strlt	r3, [sp, #12]
 8003d66:	2300      	movge	r3, #0
 8003d68:	6033      	strge	r3, [r6, #0]
 8003d6a:	9f03      	ldr	r7, [sp, #12]
 8003d6c:	4b98      	ldr	r3, [pc, #608]	@ (8003fd0 <_dtoa_r+0x2d0>)
 8003d6e:	bfbc      	itt	lt
 8003d70:	2201      	movlt	r2, #1
 8003d72:	6032      	strlt	r2, [r6, #0]
 8003d74:	43bb      	bics	r3, r7
 8003d76:	d112      	bne.n	8003d9e <_dtoa_r+0x9e>
 8003d78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d84:	4323      	orrs	r3, r4
 8003d86:	f000 854d 	beq.w	8004824 <_dtoa_r+0xb24>
 8003d8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003fe4 <_dtoa_r+0x2e4>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 854f 	beq.w	8004834 <_dtoa_r+0xb34>
 8003d96:	f10a 0303 	add.w	r3, sl, #3
 8003d9a:	f000 bd49 	b.w	8004830 <_dtoa_r+0xb30>
 8003d9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	ec51 0b17 	vmov	r0, r1, d7
 8003da8:	2300      	movs	r3, #0
 8003daa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003dae:	f7fc fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8003db2:	4680      	mov	r8, r0
 8003db4:	b158      	cbz	r0, 8003dce <_dtoa_r+0xce>
 8003db6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003db8:	2301      	movs	r3, #1
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003dbe:	b113      	cbz	r3, 8003dc6 <_dtoa_r+0xc6>
 8003dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003dc2:	4b84      	ldr	r3, [pc, #528]	@ (8003fd4 <_dtoa_r+0x2d4>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003fe8 <_dtoa_r+0x2e8>
 8003dca:	f000 bd33 	b.w	8004834 <_dtoa_r+0xb34>
 8003dce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003dd2:	aa16      	add	r2, sp, #88	@ 0x58
 8003dd4:	a917      	add	r1, sp, #92	@ 0x5c
 8003dd6:	4658      	mov	r0, fp
 8003dd8:	f001 f980 	bl	80050dc <__d2b>
 8003ddc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003de0:	4681      	mov	r9, r0
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	d077      	beq.n	8003ed6 <_dtoa_r+0x1d6>
 8003de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003de8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003df4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003df8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003dfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e00:	4619      	mov	r1, r3
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b74      	ldr	r3, [pc, #464]	@ (8003fd8 <_dtoa_r+0x2d8>)
 8003e06:	f7fc fa47 	bl	8000298 <__aeabi_dsub>
 8003e0a:	a369      	add	r3, pc, #420	@ (adr r3, 8003fb0 <_dtoa_r+0x2b0>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc fbfa 	bl	8000608 <__aeabi_dmul>
 8003e14:	a368      	add	r3, pc, #416	@ (adr r3, 8003fb8 <_dtoa_r+0x2b8>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f7fc fa3f 	bl	800029c <__adddf3>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4630      	mov	r0, r6
 8003e22:	460d      	mov	r5, r1
 8003e24:	f7fc fb86 	bl	8000534 <__aeabi_i2d>
 8003e28:	a365      	add	r3, pc, #404	@ (adr r3, 8003fc0 <_dtoa_r+0x2c0>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fbeb 	bl	8000608 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fa2f 	bl	800029c <__adddf3>
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460d      	mov	r5, r1
 8003e42:	f7fc fe91 	bl	8000b68 <__aeabi_d2iz>
 8003e46:	2200      	movs	r2, #0
 8003e48:	4607      	mov	r7, r0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	4629      	mov	r1, r5
 8003e50:	f7fc fe4c 	bl	8000aec <__aeabi_dcmplt>
 8003e54:	b140      	cbz	r0, 8003e68 <_dtoa_r+0x168>
 8003e56:	4638      	mov	r0, r7
 8003e58:	f7fc fb6c 	bl	8000534 <__aeabi_i2d>
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	f7fc fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e64:	b900      	cbnz	r0, 8003e68 <_dtoa_r+0x168>
 8003e66:	3f01      	subs	r7, #1
 8003e68:	2f16      	cmp	r7, #22
 8003e6a:	d851      	bhi.n	8003f10 <_dtoa_r+0x210>
 8003e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8003fdc <_dtoa_r+0x2dc>)
 8003e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e7a:	f7fc fe37 	bl	8000aec <__aeabi_dcmplt>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d048      	beq.n	8003f14 <_dtoa_r+0x214>
 8003e82:	3f01      	subs	r7, #1
 8003e84:	2300      	movs	r3, #0
 8003e86:	9312      	str	r3, [sp, #72]	@ 0x48
 8003e88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003e8a:	1b9b      	subs	r3, r3, r6
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	bf44      	itt	mi
 8003e90:	f1c3 0801 	rsbmi	r8, r3, #1
 8003e94:	2300      	movmi	r3, #0
 8003e96:	9208      	str	r2, [sp, #32]
 8003e98:	bf54      	ite	pl
 8003e9a:	f04f 0800 	movpl.w	r8, #0
 8003e9e:	9308      	strmi	r3, [sp, #32]
 8003ea0:	2f00      	cmp	r7, #0
 8003ea2:	db39      	blt.n	8003f18 <_dtoa_r+0x218>
 8003ea4:	9b08      	ldr	r3, [sp, #32]
 8003ea6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003ea8:	443b      	add	r3, r7
 8003eaa:	9308      	str	r3, [sp, #32]
 8003eac:	2300      	movs	r3, #0
 8003eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d864      	bhi.n	8003f80 <_dtoa_r+0x280>
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	bfc4      	itt	gt
 8003eba:	3b04      	subgt	r3, #4
 8003ebc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ec0:	f1a3 0302 	sub.w	r3, r3, #2
 8003ec4:	bfcc      	ite	gt
 8003ec6:	2400      	movgt	r4, #0
 8003ec8:	2401      	movle	r4, #1
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d863      	bhi.n	8003f96 <_dtoa_r+0x296>
 8003ece:	e8df f003 	tbb	[pc, r3]
 8003ed2:	372a      	.short	0x372a
 8003ed4:	5535      	.short	0x5535
 8003ed6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003eda:	441e      	add	r6, r3
 8003edc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	bfc1      	itttt	gt
 8003ee4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003ee8:	409f      	lslgt	r7, r3
 8003eea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003eee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003ef2:	bfd6      	itet	le
 8003ef4:	f1c3 0320 	rsble	r3, r3, #32
 8003ef8:	ea47 0003 	orrgt.w	r0, r7, r3
 8003efc:	fa04 f003 	lslle.w	r0, r4, r3
 8003f00:	f7fc fb08 	bl	8000514 <__aeabi_ui2d>
 8003f04:	2201      	movs	r2, #1
 8003f06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f0a:	3e01      	subs	r6, #1
 8003f0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8003f0e:	e777      	b.n	8003e00 <_dtoa_r+0x100>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e7b8      	b.n	8003e86 <_dtoa_r+0x186>
 8003f14:	9012      	str	r0, [sp, #72]	@ 0x48
 8003f16:	e7b7      	b.n	8003e88 <_dtoa_r+0x188>
 8003f18:	427b      	negs	r3, r7
 8003f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	eba8 0807 	sub.w	r8, r8, r7
 8003f22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f24:	e7c4      	b.n	8003eb0 <_dtoa_r+0x1b0>
 8003f26:	2300      	movs	r3, #0
 8003f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dc35      	bgt.n	8003f9c <_dtoa_r+0x29c>
 8003f30:	2301      	movs	r3, #1
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	9307      	str	r3, [sp, #28]
 8003f36:	461a      	mov	r2, r3
 8003f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f3a:	e00b      	b.n	8003f54 <_dtoa_r+0x254>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e7f3      	b.n	8003f28 <_dtoa_r+0x228>
 8003f40:	2300      	movs	r3, #0
 8003f42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	9307      	str	r3, [sp, #28]
 8003f50:	bfb8      	it	lt
 8003f52:	2301      	movlt	r3, #1
 8003f54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	f102 0514 	add.w	r5, r2, #20
 8003f60:	429d      	cmp	r5, r3
 8003f62:	d91f      	bls.n	8003fa4 <_dtoa_r+0x2a4>
 8003f64:	6041      	str	r1, [r0, #4]
 8003f66:	4658      	mov	r0, fp
 8003f68:	f000 fd8e 	bl	8004a88 <_Balloc>
 8003f6c:	4682      	mov	sl, r0
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d13c      	bne.n	8003fec <_dtoa_r+0x2ec>
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <_dtoa_r+0x2e0>)
 8003f74:	4602      	mov	r2, r0
 8003f76:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f7a:	e6d8      	b.n	8003d2e <_dtoa_r+0x2e>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e7e0      	b.n	8003f42 <_dtoa_r+0x242>
 8003f80:	2401      	movs	r4, #1
 8003f82:	2300      	movs	r3, #0
 8003f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	9307      	str	r3, [sp, #28]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2312      	movs	r3, #18
 8003f94:	e7d0      	b.n	8003f38 <_dtoa_r+0x238>
 8003f96:	2301      	movs	r3, #1
 8003f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f9a:	e7f5      	b.n	8003f88 <_dtoa_r+0x288>
 8003f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	9307      	str	r3, [sp, #28]
 8003fa2:	e7d7      	b.n	8003f54 <_dtoa_r+0x254>
 8003fa4:	3101      	adds	r1, #1
 8003fa6:	0052      	lsls	r2, r2, #1
 8003fa8:	e7d8      	b.n	8003f5c <_dtoa_r+0x25c>
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w
 8003fb0:	636f4361 	.word	0x636f4361
 8003fb4:	3fd287a7 	.word	0x3fd287a7
 8003fb8:	8b60c8b3 	.word	0x8b60c8b3
 8003fbc:	3fc68a28 	.word	0x3fc68a28
 8003fc0:	509f79fb 	.word	0x509f79fb
 8003fc4:	3fd34413 	.word	0x3fd34413
 8003fc8:	08005989 	.word	0x08005989
 8003fcc:	080059a0 	.word	0x080059a0
 8003fd0:	7ff00000 	.word	0x7ff00000
 8003fd4:	08005959 	.word	0x08005959
 8003fd8:	3ff80000 	.word	0x3ff80000
 8003fdc:	08005a98 	.word	0x08005a98
 8003fe0:	080059f8 	.word	0x080059f8
 8003fe4:	08005985 	.word	0x08005985
 8003fe8:	08005958 	.word	0x08005958
 8003fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ff0:	6018      	str	r0, [r3, #0]
 8003ff2:	9b07      	ldr	r3, [sp, #28]
 8003ff4:	2b0e      	cmp	r3, #14
 8003ff6:	f200 80a4 	bhi.w	8004142 <_dtoa_r+0x442>
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	f000 80a1 	beq.w	8004142 <_dtoa_r+0x442>
 8004000:	2f00      	cmp	r7, #0
 8004002:	dd33      	ble.n	800406c <_dtoa_r+0x36c>
 8004004:	4bad      	ldr	r3, [pc, #692]	@ (80042bc <_dtoa_r+0x5bc>)
 8004006:	f007 020f 	and.w	r2, r7, #15
 800400a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800400e:	ed93 7b00 	vldr	d7, [r3]
 8004012:	05f8      	lsls	r0, r7, #23
 8004014:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800401c:	d516      	bpl.n	800404c <_dtoa_r+0x34c>
 800401e:	4ba8      	ldr	r3, [pc, #672]	@ (80042c0 <_dtoa_r+0x5c0>)
 8004020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004028:	f7fc fc18 	bl	800085c <__aeabi_ddiv>
 800402c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004030:	f004 040f 	and.w	r4, r4, #15
 8004034:	2603      	movs	r6, #3
 8004036:	4da2      	ldr	r5, [pc, #648]	@ (80042c0 <_dtoa_r+0x5c0>)
 8004038:	b954      	cbnz	r4, 8004050 <_dtoa_r+0x350>
 800403a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800403e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004042:	f7fc fc0b 	bl	800085c <__aeabi_ddiv>
 8004046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800404a:	e028      	b.n	800409e <_dtoa_r+0x39e>
 800404c:	2602      	movs	r6, #2
 800404e:	e7f2      	b.n	8004036 <_dtoa_r+0x336>
 8004050:	07e1      	lsls	r1, r4, #31
 8004052:	d508      	bpl.n	8004066 <_dtoa_r+0x366>
 8004054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800405c:	f7fc fad4 	bl	8000608 <__aeabi_dmul>
 8004060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004064:	3601      	adds	r6, #1
 8004066:	1064      	asrs	r4, r4, #1
 8004068:	3508      	adds	r5, #8
 800406a:	e7e5      	b.n	8004038 <_dtoa_r+0x338>
 800406c:	f000 80d2 	beq.w	8004214 <_dtoa_r+0x514>
 8004070:	427c      	negs	r4, r7
 8004072:	4b92      	ldr	r3, [pc, #584]	@ (80042bc <_dtoa_r+0x5bc>)
 8004074:	4d92      	ldr	r5, [pc, #584]	@ (80042c0 <_dtoa_r+0x5c0>)
 8004076:	f004 020f 	and.w	r2, r4, #15
 800407a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004086:	f7fc fabf 	bl	8000608 <__aeabi_dmul>
 800408a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800408e:	1124      	asrs	r4, r4, #4
 8004090:	2300      	movs	r3, #0
 8004092:	2602      	movs	r6, #2
 8004094:	2c00      	cmp	r4, #0
 8004096:	f040 80b2 	bne.w	80041fe <_dtoa_r+0x4fe>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1d3      	bne.n	8004046 <_dtoa_r+0x346>
 800409e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80040a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80b7 	beq.w	8004218 <_dtoa_r+0x518>
 80040aa:	4b86      	ldr	r3, [pc, #536]	@ (80042c4 <_dtoa_r+0x5c4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	f7fc fd1b 	bl	8000aec <__aeabi_dcmplt>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f000 80ae 	beq.w	8004218 <_dtoa_r+0x518>
 80040bc:	9b07      	ldr	r3, [sp, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80aa 	beq.w	8004218 <_dtoa_r+0x518>
 80040c4:	9b00      	ldr	r3, [sp, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dd37      	ble.n	800413a <_dtoa_r+0x43a>
 80040ca:	1e7b      	subs	r3, r7, #1
 80040cc:	9304      	str	r3, [sp, #16]
 80040ce:	4620      	mov	r0, r4
 80040d0:	4b7d      	ldr	r3, [pc, #500]	@ (80042c8 <_dtoa_r+0x5c8>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc fa97 	bl	8000608 <__aeabi_dmul>
 80040da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040de:	9c00      	ldr	r4, [sp, #0]
 80040e0:	3601      	adds	r6, #1
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7fc fa26 	bl	8000534 <__aeabi_i2d>
 80040e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040ec:	f7fc fa8c 	bl	8000608 <__aeabi_dmul>
 80040f0:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <_dtoa_r+0x5cc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	f7fc f8d2 	bl	800029c <__adddf3>
 80040f8:	4605      	mov	r5, r0
 80040fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80040fe:	2c00      	cmp	r4, #0
 8004100:	f040 808d 	bne.w	800421e <_dtoa_r+0x51e>
 8004104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004108:	4b71      	ldr	r3, [pc, #452]	@ (80042d0 <_dtoa_r+0x5d0>)
 800410a:	2200      	movs	r2, #0
 800410c:	f7fc f8c4 	bl	8000298 <__aeabi_dsub>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004118:	462a      	mov	r2, r5
 800411a:	4633      	mov	r3, r6
 800411c:	f7fc fd04 	bl	8000b28 <__aeabi_dcmpgt>
 8004120:	2800      	cmp	r0, #0
 8004122:	f040 828b 	bne.w	800463c <_dtoa_r+0x93c>
 8004126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800412a:	462a      	mov	r2, r5
 800412c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004130:	f7fc fcdc 	bl	8000aec <__aeabi_dcmplt>
 8004134:	2800      	cmp	r0, #0
 8004136:	f040 8128 	bne.w	800438a <_dtoa_r+0x68a>
 800413a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800413e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004144:	2b00      	cmp	r3, #0
 8004146:	f2c0 815a 	blt.w	80043fe <_dtoa_r+0x6fe>
 800414a:	2f0e      	cmp	r7, #14
 800414c:	f300 8157 	bgt.w	80043fe <_dtoa_r+0x6fe>
 8004150:	4b5a      	ldr	r3, [pc, #360]	@ (80042bc <_dtoa_r+0x5bc>)
 8004152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004156:	ed93 7b00 	vldr	d7, [r3]
 800415a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	ed8d 7b00 	vstr	d7, [sp]
 8004162:	da03      	bge.n	800416c <_dtoa_r+0x46c>
 8004164:	9b07      	ldr	r3, [sp, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f340 8101 	ble.w	800436e <_dtoa_r+0x66e>
 800416c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004170:	4656      	mov	r6, sl
 8004172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc fb6f 	bl	800085c <__aeabi_ddiv>
 800417e:	f7fc fcf3 	bl	8000b68 <__aeabi_d2iz>
 8004182:	4680      	mov	r8, r0
 8004184:	f7fc f9d6 	bl	8000534 <__aeabi_i2d>
 8004188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800418c:	f7fc fa3c 	bl	8000608 <__aeabi_dmul>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4620      	mov	r0, r4
 8004196:	4629      	mov	r1, r5
 8004198:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800419c:	f7fc f87c 	bl	8000298 <__aeabi_dsub>
 80041a0:	f806 4b01 	strb.w	r4, [r6], #1
 80041a4:	9d07      	ldr	r5, [sp, #28]
 80041a6:	eba6 040a 	sub.w	r4, r6, sl
 80041aa:	42a5      	cmp	r5, r4
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	f040 8117 	bne.w	80043e2 <_dtoa_r+0x6e2>
 80041b4:	f7fc f872 	bl	800029c <__adddf3>
 80041b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041bc:	4604      	mov	r4, r0
 80041be:	460d      	mov	r5, r1
 80041c0:	f7fc fcb2 	bl	8000b28 <__aeabi_dcmpgt>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f040 80f9 	bne.w	80043bc <_dtoa_r+0x6bc>
 80041ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041ce:	4620      	mov	r0, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	f7fc fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 80041d6:	b118      	cbz	r0, 80041e0 <_dtoa_r+0x4e0>
 80041d8:	f018 0f01 	tst.w	r8, #1
 80041dc:	f040 80ee 	bne.w	80043bc <_dtoa_r+0x6bc>
 80041e0:	4649      	mov	r1, r9
 80041e2:	4658      	mov	r0, fp
 80041e4:	f000 fc90 	bl	8004b08 <_Bfree>
 80041e8:	2300      	movs	r3, #0
 80041ea:	7033      	strb	r3, [r6, #0]
 80041ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80041ee:	3701      	adds	r7, #1
 80041f0:	601f      	str	r7, [r3, #0]
 80041f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 831d 	beq.w	8004834 <_dtoa_r+0xb34>
 80041fa:	601e      	str	r6, [r3, #0]
 80041fc:	e31a      	b.n	8004834 <_dtoa_r+0xb34>
 80041fe:	07e2      	lsls	r2, r4, #31
 8004200:	d505      	bpl.n	800420e <_dtoa_r+0x50e>
 8004202:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004206:	f7fc f9ff 	bl	8000608 <__aeabi_dmul>
 800420a:	3601      	adds	r6, #1
 800420c:	2301      	movs	r3, #1
 800420e:	1064      	asrs	r4, r4, #1
 8004210:	3508      	adds	r5, #8
 8004212:	e73f      	b.n	8004094 <_dtoa_r+0x394>
 8004214:	2602      	movs	r6, #2
 8004216:	e742      	b.n	800409e <_dtoa_r+0x39e>
 8004218:	9c07      	ldr	r4, [sp, #28]
 800421a:	9704      	str	r7, [sp, #16]
 800421c:	e761      	b.n	80040e2 <_dtoa_r+0x3e2>
 800421e:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <_dtoa_r+0x5bc>)
 8004220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004226:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800422a:	4454      	add	r4, sl
 800422c:	2900      	cmp	r1, #0
 800422e:	d053      	beq.n	80042d8 <_dtoa_r+0x5d8>
 8004230:	4928      	ldr	r1, [pc, #160]	@ (80042d4 <_dtoa_r+0x5d4>)
 8004232:	2000      	movs	r0, #0
 8004234:	f7fc fb12 	bl	800085c <__aeabi_ddiv>
 8004238:	4633      	mov	r3, r6
 800423a:	462a      	mov	r2, r5
 800423c:	f7fc f82c 	bl	8000298 <__aeabi_dsub>
 8004240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004244:	4656      	mov	r6, sl
 8004246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800424a:	f7fc fc8d 	bl	8000b68 <__aeabi_d2iz>
 800424e:	4605      	mov	r5, r0
 8004250:	f7fc f970 	bl	8000534 <__aeabi_i2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800425c:	f7fc f81c 	bl	8000298 <__aeabi_dsub>
 8004260:	3530      	adds	r5, #48	@ 0x30
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800426a:	f806 5b01 	strb.w	r5, [r6], #1
 800426e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004272:	f7fc fc3b 	bl	8000aec <__aeabi_dcmplt>
 8004276:	2800      	cmp	r0, #0
 8004278:	d171      	bne.n	800435e <_dtoa_r+0x65e>
 800427a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800427e:	4911      	ldr	r1, [pc, #68]	@ (80042c4 <_dtoa_r+0x5c4>)
 8004280:	2000      	movs	r0, #0
 8004282:	f7fc f809 	bl	8000298 <__aeabi_dsub>
 8004286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800428a:	f7fc fc2f 	bl	8000aec <__aeabi_dcmplt>
 800428e:	2800      	cmp	r0, #0
 8004290:	f040 8095 	bne.w	80043be <_dtoa_r+0x6be>
 8004294:	42a6      	cmp	r6, r4
 8004296:	f43f af50 	beq.w	800413a <_dtoa_r+0x43a>
 800429a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <_dtoa_r+0x5c8>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	f7fc f9b1 	bl	8000608 <__aeabi_dmul>
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <_dtoa_r+0x5c8>)
 80042a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042ac:	2200      	movs	r2, #0
 80042ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b2:	f7fc f9a9 	bl	8000608 <__aeabi_dmul>
 80042b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ba:	e7c4      	b.n	8004246 <_dtoa_r+0x546>
 80042bc:	08005a98 	.word	0x08005a98
 80042c0:	08005a70 	.word	0x08005a70
 80042c4:	3ff00000 	.word	0x3ff00000
 80042c8:	40240000 	.word	0x40240000
 80042cc:	401c0000 	.word	0x401c0000
 80042d0:	40140000 	.word	0x40140000
 80042d4:	3fe00000 	.word	0x3fe00000
 80042d8:	4631      	mov	r1, r6
 80042da:	4628      	mov	r0, r5
 80042dc:	f7fc f994 	bl	8000608 <__aeabi_dmul>
 80042e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80042e6:	4656      	mov	r6, sl
 80042e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ec:	f7fc fc3c 	bl	8000b68 <__aeabi_d2iz>
 80042f0:	4605      	mov	r5, r0
 80042f2:	f7fc f91f 	bl	8000534 <__aeabi_i2d>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042fe:	f7fb ffcb 	bl	8000298 <__aeabi_dsub>
 8004302:	3530      	adds	r5, #48	@ 0x30
 8004304:	f806 5b01 	strb.w	r5, [r6], #1
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	42a6      	cmp	r6, r4
 800430e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	d124      	bne.n	8004362 <_dtoa_r+0x662>
 8004318:	4bac      	ldr	r3, [pc, #688]	@ (80045cc <_dtoa_r+0x8cc>)
 800431a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800431e:	f7fb ffbd 	bl	800029c <__adddf3>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800432a:	f7fc fbfd 	bl	8000b28 <__aeabi_dcmpgt>
 800432e:	2800      	cmp	r0, #0
 8004330:	d145      	bne.n	80043be <_dtoa_r+0x6be>
 8004332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004336:	49a5      	ldr	r1, [pc, #660]	@ (80045cc <_dtoa_r+0x8cc>)
 8004338:	2000      	movs	r0, #0
 800433a:	f7fb ffad 	bl	8000298 <__aeabi_dsub>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004346:	f7fc fbd1 	bl	8000aec <__aeabi_dcmplt>
 800434a:	2800      	cmp	r0, #0
 800434c:	f43f aef5 	beq.w	800413a <_dtoa_r+0x43a>
 8004350:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004352:	1e73      	subs	r3, r6, #1
 8004354:	9315      	str	r3, [sp, #84]	@ 0x54
 8004356:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800435a:	2b30      	cmp	r3, #48	@ 0x30
 800435c:	d0f8      	beq.n	8004350 <_dtoa_r+0x650>
 800435e:	9f04      	ldr	r7, [sp, #16]
 8004360:	e73e      	b.n	80041e0 <_dtoa_r+0x4e0>
 8004362:	4b9b      	ldr	r3, [pc, #620]	@ (80045d0 <_dtoa_r+0x8d0>)
 8004364:	f7fc f950 	bl	8000608 <__aeabi_dmul>
 8004368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800436c:	e7bc      	b.n	80042e8 <_dtoa_r+0x5e8>
 800436e:	d10c      	bne.n	800438a <_dtoa_r+0x68a>
 8004370:	4b98      	ldr	r3, [pc, #608]	@ (80045d4 <_dtoa_r+0x8d4>)
 8004372:	2200      	movs	r2, #0
 8004374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004378:	f7fc f946 	bl	8000608 <__aeabi_dmul>
 800437c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004380:	f7fc fbc8 	bl	8000b14 <__aeabi_dcmpge>
 8004384:	2800      	cmp	r0, #0
 8004386:	f000 8157 	beq.w	8004638 <_dtoa_r+0x938>
 800438a:	2400      	movs	r4, #0
 800438c:	4625      	mov	r5, r4
 800438e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004390:	43db      	mvns	r3, r3
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	4656      	mov	r6, sl
 8004396:	2700      	movs	r7, #0
 8004398:	4621      	mov	r1, r4
 800439a:	4658      	mov	r0, fp
 800439c:	f000 fbb4 	bl	8004b08 <_Bfree>
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	d0dc      	beq.n	800435e <_dtoa_r+0x65e>
 80043a4:	b12f      	cbz	r7, 80043b2 <_dtoa_r+0x6b2>
 80043a6:	42af      	cmp	r7, r5
 80043a8:	d003      	beq.n	80043b2 <_dtoa_r+0x6b2>
 80043aa:	4639      	mov	r1, r7
 80043ac:	4658      	mov	r0, fp
 80043ae:	f000 fbab 	bl	8004b08 <_Bfree>
 80043b2:	4629      	mov	r1, r5
 80043b4:	4658      	mov	r0, fp
 80043b6:	f000 fba7 	bl	8004b08 <_Bfree>
 80043ba:	e7d0      	b.n	800435e <_dtoa_r+0x65e>
 80043bc:	9704      	str	r7, [sp, #16]
 80043be:	4633      	mov	r3, r6
 80043c0:	461e      	mov	r6, r3
 80043c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043c6:	2a39      	cmp	r2, #57	@ 0x39
 80043c8:	d107      	bne.n	80043da <_dtoa_r+0x6da>
 80043ca:	459a      	cmp	sl, r3
 80043cc:	d1f8      	bne.n	80043c0 <_dtoa_r+0x6c0>
 80043ce:	9a04      	ldr	r2, [sp, #16]
 80043d0:	3201      	adds	r2, #1
 80043d2:	9204      	str	r2, [sp, #16]
 80043d4:	2230      	movs	r2, #48	@ 0x30
 80043d6:	f88a 2000 	strb.w	r2, [sl]
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	3201      	adds	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e7bd      	b.n	800435e <_dtoa_r+0x65e>
 80043e2:	4b7b      	ldr	r3, [pc, #492]	@ (80045d0 <_dtoa_r+0x8d0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	f7fc f90f 	bl	8000608 <__aeabi_dmul>
 80043ea:	2200      	movs	r2, #0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	460d      	mov	r5, r1
 80043f2:	f7fc fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	f43f aebb 	beq.w	8004172 <_dtoa_r+0x472>
 80043fc:	e6f0      	b.n	80041e0 <_dtoa_r+0x4e0>
 80043fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004400:	2a00      	cmp	r2, #0
 8004402:	f000 80db 	beq.w	80045bc <_dtoa_r+0x8bc>
 8004406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004408:	2a01      	cmp	r2, #1
 800440a:	f300 80bf 	bgt.w	800458c <_dtoa_r+0x88c>
 800440e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004410:	2a00      	cmp	r2, #0
 8004412:	f000 80b7 	beq.w	8004584 <_dtoa_r+0x884>
 8004416:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800441a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800441c:	4646      	mov	r6, r8
 800441e:	9a08      	ldr	r2, [sp, #32]
 8004420:	2101      	movs	r1, #1
 8004422:	441a      	add	r2, r3
 8004424:	4658      	mov	r0, fp
 8004426:	4498      	add	r8, r3
 8004428:	9208      	str	r2, [sp, #32]
 800442a:	f000 fc21 	bl	8004c70 <__i2b>
 800442e:	4605      	mov	r5, r0
 8004430:	b15e      	cbz	r6, 800444a <_dtoa_r+0x74a>
 8004432:	9b08      	ldr	r3, [sp, #32]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dd08      	ble.n	800444a <_dtoa_r+0x74a>
 8004438:	42b3      	cmp	r3, r6
 800443a:	9a08      	ldr	r2, [sp, #32]
 800443c:	bfa8      	it	ge
 800443e:	4633      	movge	r3, r6
 8004440:	eba8 0803 	sub.w	r8, r8, r3
 8004444:	1af6      	subs	r6, r6, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	9308      	str	r3, [sp, #32]
 800444a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800444c:	b1f3      	cbz	r3, 800448c <_dtoa_r+0x78c>
 800444e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80b7 	beq.w	80045c4 <_dtoa_r+0x8c4>
 8004456:	b18c      	cbz	r4, 800447c <_dtoa_r+0x77c>
 8004458:	4629      	mov	r1, r5
 800445a:	4622      	mov	r2, r4
 800445c:	4658      	mov	r0, fp
 800445e:	f000 fcc7 	bl	8004df0 <__pow5mult>
 8004462:	464a      	mov	r2, r9
 8004464:	4601      	mov	r1, r0
 8004466:	4605      	mov	r5, r0
 8004468:	4658      	mov	r0, fp
 800446a:	f000 fc17 	bl	8004c9c <__multiply>
 800446e:	4649      	mov	r1, r9
 8004470:	9004      	str	r0, [sp, #16]
 8004472:	4658      	mov	r0, fp
 8004474:	f000 fb48 	bl	8004b08 <_Bfree>
 8004478:	9b04      	ldr	r3, [sp, #16]
 800447a:	4699      	mov	r9, r3
 800447c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800447e:	1b1a      	subs	r2, r3, r4
 8004480:	d004      	beq.n	800448c <_dtoa_r+0x78c>
 8004482:	4649      	mov	r1, r9
 8004484:	4658      	mov	r0, fp
 8004486:	f000 fcb3 	bl	8004df0 <__pow5mult>
 800448a:	4681      	mov	r9, r0
 800448c:	2101      	movs	r1, #1
 800448e:	4658      	mov	r0, fp
 8004490:	f000 fbee 	bl	8004c70 <__i2b>
 8004494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004496:	4604      	mov	r4, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 81cf 	beq.w	800483c <_dtoa_r+0xb3c>
 800449e:	461a      	mov	r2, r3
 80044a0:	4601      	mov	r1, r0
 80044a2:	4658      	mov	r0, fp
 80044a4:	f000 fca4 	bl	8004df0 <__pow5mult>
 80044a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	4604      	mov	r4, r0
 80044ae:	f300 8095 	bgt.w	80045dc <_dtoa_r+0x8dc>
 80044b2:	9b02      	ldr	r3, [sp, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 8087 	bne.w	80045c8 <_dtoa_r+0x8c8>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 8089 	bne.w	80045d8 <_dtoa_r+0x8d8>
 80044c6:	9b03      	ldr	r3, [sp, #12]
 80044c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044cc:	0d1b      	lsrs	r3, r3, #20
 80044ce:	051b      	lsls	r3, r3, #20
 80044d0:	b12b      	cbz	r3, 80044de <_dtoa_r+0x7de>
 80044d2:	9b08      	ldr	r3, [sp, #32]
 80044d4:	3301      	adds	r3, #1
 80044d6:	9308      	str	r3, [sp, #32]
 80044d8:	f108 0801 	add.w	r8, r8, #1
 80044dc:	2301      	movs	r3, #1
 80044de:	930a      	str	r3, [sp, #40]	@ 0x28
 80044e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81b0 	beq.w	8004848 <_dtoa_r+0xb48>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044ee:	6918      	ldr	r0, [r3, #16]
 80044f0:	f000 fb72 	bl	8004bd8 <__hi0bits>
 80044f4:	f1c0 0020 	rsb	r0, r0, #32
 80044f8:	9b08      	ldr	r3, [sp, #32]
 80044fa:	4418      	add	r0, r3
 80044fc:	f010 001f 	ands.w	r0, r0, #31
 8004500:	d077      	beq.n	80045f2 <_dtoa_r+0x8f2>
 8004502:	f1c0 0320 	rsb	r3, r0, #32
 8004506:	2b04      	cmp	r3, #4
 8004508:	dd6b      	ble.n	80045e2 <_dtoa_r+0x8e2>
 800450a:	9b08      	ldr	r3, [sp, #32]
 800450c:	f1c0 001c 	rsb	r0, r0, #28
 8004510:	4403      	add	r3, r0
 8004512:	4480      	add	r8, r0
 8004514:	4406      	add	r6, r0
 8004516:	9308      	str	r3, [sp, #32]
 8004518:	f1b8 0f00 	cmp.w	r8, #0
 800451c:	dd05      	ble.n	800452a <_dtoa_r+0x82a>
 800451e:	4649      	mov	r1, r9
 8004520:	4642      	mov	r2, r8
 8004522:	4658      	mov	r0, fp
 8004524:	f000 fcbe 	bl	8004ea4 <__lshift>
 8004528:	4681      	mov	r9, r0
 800452a:	9b08      	ldr	r3, [sp, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	dd05      	ble.n	800453c <_dtoa_r+0x83c>
 8004530:	4621      	mov	r1, r4
 8004532:	461a      	mov	r2, r3
 8004534:	4658      	mov	r0, fp
 8004536:	f000 fcb5 	bl	8004ea4 <__lshift>
 800453a:	4604      	mov	r4, r0
 800453c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800453e:	2b00      	cmp	r3, #0
 8004540:	d059      	beq.n	80045f6 <_dtoa_r+0x8f6>
 8004542:	4621      	mov	r1, r4
 8004544:	4648      	mov	r0, r9
 8004546:	f000 fd19 	bl	8004f7c <__mcmp>
 800454a:	2800      	cmp	r0, #0
 800454c:	da53      	bge.n	80045f6 <_dtoa_r+0x8f6>
 800454e:	1e7b      	subs	r3, r7, #1
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	4649      	mov	r1, r9
 8004554:	2300      	movs	r3, #0
 8004556:	220a      	movs	r2, #10
 8004558:	4658      	mov	r0, fp
 800455a:	f000 faf7 	bl	8004b4c <__multadd>
 800455e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004560:	4681      	mov	r9, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8172 	beq.w	800484c <_dtoa_r+0xb4c>
 8004568:	2300      	movs	r3, #0
 800456a:	4629      	mov	r1, r5
 800456c:	220a      	movs	r2, #10
 800456e:	4658      	mov	r0, fp
 8004570:	f000 faec 	bl	8004b4c <__multadd>
 8004574:	9b00      	ldr	r3, [sp, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	4605      	mov	r5, r0
 800457a:	dc67      	bgt.n	800464c <_dtoa_r+0x94c>
 800457c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800457e:	2b02      	cmp	r3, #2
 8004580:	dc41      	bgt.n	8004606 <_dtoa_r+0x906>
 8004582:	e063      	b.n	800464c <_dtoa_r+0x94c>
 8004584:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004586:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800458a:	e746      	b.n	800441a <_dtoa_r+0x71a>
 800458c:	9b07      	ldr	r3, [sp, #28]
 800458e:	1e5c      	subs	r4, r3, #1
 8004590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004592:	42a3      	cmp	r3, r4
 8004594:	bfbf      	itttt	lt
 8004596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004598:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800459a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800459c:	1ae3      	sublt	r3, r4, r3
 800459e:	bfb4      	ite	lt
 80045a0:	18d2      	addlt	r2, r2, r3
 80045a2:	1b1c      	subge	r4, r3, r4
 80045a4:	9b07      	ldr	r3, [sp, #28]
 80045a6:	bfbc      	itt	lt
 80045a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80045aa:	2400      	movlt	r4, #0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bfb5      	itete	lt
 80045b0:	eba8 0603 	sublt.w	r6, r8, r3
 80045b4:	9b07      	ldrge	r3, [sp, #28]
 80045b6:	2300      	movlt	r3, #0
 80045b8:	4646      	movge	r6, r8
 80045ba:	e730      	b.n	800441e <_dtoa_r+0x71e>
 80045bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80045c0:	4646      	mov	r6, r8
 80045c2:	e735      	b.n	8004430 <_dtoa_r+0x730>
 80045c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045c6:	e75c      	b.n	8004482 <_dtoa_r+0x782>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e788      	b.n	80044de <_dtoa_r+0x7de>
 80045cc:	3fe00000 	.word	0x3fe00000
 80045d0:	40240000 	.word	0x40240000
 80045d4:	40140000 	.word	0x40140000
 80045d8:	9b02      	ldr	r3, [sp, #8]
 80045da:	e780      	b.n	80044de <_dtoa_r+0x7de>
 80045dc:	2300      	movs	r3, #0
 80045de:	930a      	str	r3, [sp, #40]	@ 0x28
 80045e0:	e782      	b.n	80044e8 <_dtoa_r+0x7e8>
 80045e2:	d099      	beq.n	8004518 <_dtoa_r+0x818>
 80045e4:	9a08      	ldr	r2, [sp, #32]
 80045e6:	331c      	adds	r3, #28
 80045e8:	441a      	add	r2, r3
 80045ea:	4498      	add	r8, r3
 80045ec:	441e      	add	r6, r3
 80045ee:	9208      	str	r2, [sp, #32]
 80045f0:	e792      	b.n	8004518 <_dtoa_r+0x818>
 80045f2:	4603      	mov	r3, r0
 80045f4:	e7f6      	b.n	80045e4 <_dtoa_r+0x8e4>
 80045f6:	9b07      	ldr	r3, [sp, #28]
 80045f8:	9704      	str	r7, [sp, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	dc20      	bgt.n	8004640 <_dtoa_r+0x940>
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004602:	2b02      	cmp	r3, #2
 8004604:	dd1e      	ble.n	8004644 <_dtoa_r+0x944>
 8004606:	9b00      	ldr	r3, [sp, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f aec0 	bne.w	800438e <_dtoa_r+0x68e>
 800460e:	4621      	mov	r1, r4
 8004610:	2205      	movs	r2, #5
 8004612:	4658      	mov	r0, fp
 8004614:	f000 fa9a 	bl	8004b4c <__multadd>
 8004618:	4601      	mov	r1, r0
 800461a:	4604      	mov	r4, r0
 800461c:	4648      	mov	r0, r9
 800461e:	f000 fcad 	bl	8004f7c <__mcmp>
 8004622:	2800      	cmp	r0, #0
 8004624:	f77f aeb3 	ble.w	800438e <_dtoa_r+0x68e>
 8004628:	4656      	mov	r6, sl
 800462a:	2331      	movs	r3, #49	@ 0x31
 800462c:	f806 3b01 	strb.w	r3, [r6], #1
 8004630:	9b04      	ldr	r3, [sp, #16]
 8004632:	3301      	adds	r3, #1
 8004634:	9304      	str	r3, [sp, #16]
 8004636:	e6ae      	b.n	8004396 <_dtoa_r+0x696>
 8004638:	9c07      	ldr	r4, [sp, #28]
 800463a:	9704      	str	r7, [sp, #16]
 800463c:	4625      	mov	r5, r4
 800463e:	e7f3      	b.n	8004628 <_dtoa_r+0x928>
 8004640:	9b07      	ldr	r3, [sp, #28]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8104 	beq.w	8004854 <_dtoa_r+0xb54>
 800464c:	2e00      	cmp	r6, #0
 800464e:	dd05      	ble.n	800465c <_dtoa_r+0x95c>
 8004650:	4629      	mov	r1, r5
 8004652:	4632      	mov	r2, r6
 8004654:	4658      	mov	r0, fp
 8004656:	f000 fc25 	bl	8004ea4 <__lshift>
 800465a:	4605      	mov	r5, r0
 800465c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d05a      	beq.n	8004718 <_dtoa_r+0xa18>
 8004662:	6869      	ldr	r1, [r5, #4]
 8004664:	4658      	mov	r0, fp
 8004666:	f000 fa0f 	bl	8004a88 <_Balloc>
 800466a:	4606      	mov	r6, r0
 800466c:	b928      	cbnz	r0, 800467a <_dtoa_r+0x97a>
 800466e:	4b84      	ldr	r3, [pc, #528]	@ (8004880 <_dtoa_r+0xb80>)
 8004670:	4602      	mov	r2, r0
 8004672:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004676:	f7ff bb5a 	b.w	8003d2e <_dtoa_r+0x2e>
 800467a:	692a      	ldr	r2, [r5, #16]
 800467c:	3202      	adds	r2, #2
 800467e:	0092      	lsls	r2, r2, #2
 8004680:	f105 010c 	add.w	r1, r5, #12
 8004684:	300c      	adds	r0, #12
 8004686:	f7ff faa4 	bl	8003bd2 <memcpy>
 800468a:	2201      	movs	r2, #1
 800468c:	4631      	mov	r1, r6
 800468e:	4658      	mov	r0, fp
 8004690:	f000 fc08 	bl	8004ea4 <__lshift>
 8004694:	f10a 0301 	add.w	r3, sl, #1
 8004698:	9307      	str	r3, [sp, #28]
 800469a:	9b00      	ldr	r3, [sp, #0]
 800469c:	4453      	add	r3, sl
 800469e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046a0:	9b02      	ldr	r3, [sp, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	462f      	mov	r7, r5
 80046a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046aa:	4605      	mov	r5, r0
 80046ac:	9b07      	ldr	r3, [sp, #28]
 80046ae:	4621      	mov	r1, r4
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4648      	mov	r0, r9
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	f7ff fa9a 	bl	8003bee <quorem>
 80046ba:	4639      	mov	r1, r7
 80046bc:	9002      	str	r0, [sp, #8]
 80046be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80046c2:	4648      	mov	r0, r9
 80046c4:	f000 fc5a 	bl	8004f7c <__mcmp>
 80046c8:	462a      	mov	r2, r5
 80046ca:	9008      	str	r0, [sp, #32]
 80046cc:	4621      	mov	r1, r4
 80046ce:	4658      	mov	r0, fp
 80046d0:	f000 fc70 	bl	8004fb4 <__mdiff>
 80046d4:	68c2      	ldr	r2, [r0, #12]
 80046d6:	4606      	mov	r6, r0
 80046d8:	bb02      	cbnz	r2, 800471c <_dtoa_r+0xa1c>
 80046da:	4601      	mov	r1, r0
 80046dc:	4648      	mov	r0, r9
 80046de:	f000 fc4d 	bl	8004f7c <__mcmp>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4631      	mov	r1, r6
 80046e6:	4658      	mov	r0, fp
 80046e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80046ea:	f000 fa0d 	bl	8004b08 <_Bfree>
 80046ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046f2:	9e07      	ldr	r6, [sp, #28]
 80046f4:	ea43 0102 	orr.w	r1, r3, r2
 80046f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046fa:	4319      	orrs	r1, r3
 80046fc:	d110      	bne.n	8004720 <_dtoa_r+0xa20>
 80046fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004702:	d029      	beq.n	8004758 <_dtoa_r+0xa58>
 8004704:	9b08      	ldr	r3, [sp, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	dd02      	ble.n	8004710 <_dtoa_r+0xa10>
 800470a:	9b02      	ldr	r3, [sp, #8]
 800470c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004710:	9b00      	ldr	r3, [sp, #0]
 8004712:	f883 8000 	strb.w	r8, [r3]
 8004716:	e63f      	b.n	8004398 <_dtoa_r+0x698>
 8004718:	4628      	mov	r0, r5
 800471a:	e7bb      	b.n	8004694 <_dtoa_r+0x994>
 800471c:	2201      	movs	r2, #1
 800471e:	e7e1      	b.n	80046e4 <_dtoa_r+0x9e4>
 8004720:	9b08      	ldr	r3, [sp, #32]
 8004722:	2b00      	cmp	r3, #0
 8004724:	db04      	blt.n	8004730 <_dtoa_r+0xa30>
 8004726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004728:	430b      	orrs	r3, r1
 800472a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800472c:	430b      	orrs	r3, r1
 800472e:	d120      	bne.n	8004772 <_dtoa_r+0xa72>
 8004730:	2a00      	cmp	r2, #0
 8004732:	dded      	ble.n	8004710 <_dtoa_r+0xa10>
 8004734:	4649      	mov	r1, r9
 8004736:	2201      	movs	r2, #1
 8004738:	4658      	mov	r0, fp
 800473a:	f000 fbb3 	bl	8004ea4 <__lshift>
 800473e:	4621      	mov	r1, r4
 8004740:	4681      	mov	r9, r0
 8004742:	f000 fc1b 	bl	8004f7c <__mcmp>
 8004746:	2800      	cmp	r0, #0
 8004748:	dc03      	bgt.n	8004752 <_dtoa_r+0xa52>
 800474a:	d1e1      	bne.n	8004710 <_dtoa_r+0xa10>
 800474c:	f018 0f01 	tst.w	r8, #1
 8004750:	d0de      	beq.n	8004710 <_dtoa_r+0xa10>
 8004752:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004756:	d1d8      	bne.n	800470a <_dtoa_r+0xa0a>
 8004758:	9a00      	ldr	r2, [sp, #0]
 800475a:	2339      	movs	r3, #57	@ 0x39
 800475c:	7013      	strb	r3, [r2, #0]
 800475e:	4633      	mov	r3, r6
 8004760:	461e      	mov	r6, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004768:	2a39      	cmp	r2, #57	@ 0x39
 800476a:	d052      	beq.n	8004812 <_dtoa_r+0xb12>
 800476c:	3201      	adds	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e612      	b.n	8004398 <_dtoa_r+0x698>
 8004772:	2a00      	cmp	r2, #0
 8004774:	dd07      	ble.n	8004786 <_dtoa_r+0xa86>
 8004776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800477a:	d0ed      	beq.n	8004758 <_dtoa_r+0xa58>
 800477c:	9a00      	ldr	r2, [sp, #0]
 800477e:	f108 0301 	add.w	r3, r8, #1
 8004782:	7013      	strb	r3, [r2, #0]
 8004784:	e608      	b.n	8004398 <_dtoa_r+0x698>
 8004786:	9b07      	ldr	r3, [sp, #28]
 8004788:	9a07      	ldr	r2, [sp, #28]
 800478a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800478e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004790:	4293      	cmp	r3, r2
 8004792:	d028      	beq.n	80047e6 <_dtoa_r+0xae6>
 8004794:	4649      	mov	r1, r9
 8004796:	2300      	movs	r3, #0
 8004798:	220a      	movs	r2, #10
 800479a:	4658      	mov	r0, fp
 800479c:	f000 f9d6 	bl	8004b4c <__multadd>
 80047a0:	42af      	cmp	r7, r5
 80047a2:	4681      	mov	r9, r0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	f04f 020a 	mov.w	r2, #10
 80047ac:	4639      	mov	r1, r7
 80047ae:	4658      	mov	r0, fp
 80047b0:	d107      	bne.n	80047c2 <_dtoa_r+0xac2>
 80047b2:	f000 f9cb 	bl	8004b4c <__multadd>
 80047b6:	4607      	mov	r7, r0
 80047b8:	4605      	mov	r5, r0
 80047ba:	9b07      	ldr	r3, [sp, #28]
 80047bc:	3301      	adds	r3, #1
 80047be:	9307      	str	r3, [sp, #28]
 80047c0:	e774      	b.n	80046ac <_dtoa_r+0x9ac>
 80047c2:	f000 f9c3 	bl	8004b4c <__multadd>
 80047c6:	4629      	mov	r1, r5
 80047c8:	4607      	mov	r7, r0
 80047ca:	2300      	movs	r3, #0
 80047cc:	220a      	movs	r2, #10
 80047ce:	4658      	mov	r0, fp
 80047d0:	f000 f9bc 	bl	8004b4c <__multadd>
 80047d4:	4605      	mov	r5, r0
 80047d6:	e7f0      	b.n	80047ba <_dtoa_r+0xaba>
 80047d8:	9b00      	ldr	r3, [sp, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfcc      	ite	gt
 80047de:	461e      	movgt	r6, r3
 80047e0:	2601      	movle	r6, #1
 80047e2:	4456      	add	r6, sl
 80047e4:	2700      	movs	r7, #0
 80047e6:	4649      	mov	r1, r9
 80047e8:	2201      	movs	r2, #1
 80047ea:	4658      	mov	r0, fp
 80047ec:	f000 fb5a 	bl	8004ea4 <__lshift>
 80047f0:	4621      	mov	r1, r4
 80047f2:	4681      	mov	r9, r0
 80047f4:	f000 fbc2 	bl	8004f7c <__mcmp>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	dcb0      	bgt.n	800475e <_dtoa_r+0xa5e>
 80047fc:	d102      	bne.n	8004804 <_dtoa_r+0xb04>
 80047fe:	f018 0f01 	tst.w	r8, #1
 8004802:	d1ac      	bne.n	800475e <_dtoa_r+0xa5e>
 8004804:	4633      	mov	r3, r6
 8004806:	461e      	mov	r6, r3
 8004808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800480c:	2a30      	cmp	r2, #48	@ 0x30
 800480e:	d0fa      	beq.n	8004806 <_dtoa_r+0xb06>
 8004810:	e5c2      	b.n	8004398 <_dtoa_r+0x698>
 8004812:	459a      	cmp	sl, r3
 8004814:	d1a4      	bne.n	8004760 <_dtoa_r+0xa60>
 8004816:	9b04      	ldr	r3, [sp, #16]
 8004818:	3301      	adds	r3, #1
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	2331      	movs	r3, #49	@ 0x31
 800481e:	f88a 3000 	strb.w	r3, [sl]
 8004822:	e5b9      	b.n	8004398 <_dtoa_r+0x698>
 8004824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004826:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004884 <_dtoa_r+0xb84>
 800482a:	b11b      	cbz	r3, 8004834 <_dtoa_r+0xb34>
 800482c:	f10a 0308 	add.w	r3, sl, #8
 8004830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4650      	mov	r0, sl
 8004836:	b019      	add	sp, #100	@ 0x64
 8004838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800483e:	2b01      	cmp	r3, #1
 8004840:	f77f ae37 	ble.w	80044b2 <_dtoa_r+0x7b2>
 8004844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004846:	930a      	str	r3, [sp, #40]	@ 0x28
 8004848:	2001      	movs	r0, #1
 800484a:	e655      	b.n	80044f8 <_dtoa_r+0x7f8>
 800484c:	9b00      	ldr	r3, [sp, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f77f aed6 	ble.w	8004600 <_dtoa_r+0x900>
 8004854:	4656      	mov	r6, sl
 8004856:	4621      	mov	r1, r4
 8004858:	4648      	mov	r0, r9
 800485a:	f7ff f9c8 	bl	8003bee <quorem>
 800485e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004862:	f806 8b01 	strb.w	r8, [r6], #1
 8004866:	9b00      	ldr	r3, [sp, #0]
 8004868:	eba6 020a 	sub.w	r2, r6, sl
 800486c:	4293      	cmp	r3, r2
 800486e:	ddb3      	ble.n	80047d8 <_dtoa_r+0xad8>
 8004870:	4649      	mov	r1, r9
 8004872:	2300      	movs	r3, #0
 8004874:	220a      	movs	r2, #10
 8004876:	4658      	mov	r0, fp
 8004878:	f000 f968 	bl	8004b4c <__multadd>
 800487c:	4681      	mov	r9, r0
 800487e:	e7ea      	b.n	8004856 <_dtoa_r+0xb56>
 8004880:	080059f8 	.word	0x080059f8
 8004884:	0800597c 	.word	0x0800597c

08004888 <_free_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4605      	mov	r5, r0
 800488c:	2900      	cmp	r1, #0
 800488e:	d041      	beq.n	8004914 <_free_r+0x8c>
 8004890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004894:	1f0c      	subs	r4, r1, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfb8      	it	lt
 800489a:	18e4      	addlt	r4, r4, r3
 800489c:	f000 f8e8 	bl	8004a70 <__malloc_lock>
 80048a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <_free_r+0x90>)
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	b933      	cbnz	r3, 80048b4 <_free_r+0x2c>
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	6014      	str	r4, [r2, #0]
 80048aa:	4628      	mov	r0, r5
 80048ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048b0:	f000 b8e4 	b.w	8004a7c <__malloc_unlock>
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	d908      	bls.n	80048ca <_free_r+0x42>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	1821      	adds	r1, r4, r0
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf01      	itttt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	1809      	addeq	r1, r1, r0
 80048c6:	6021      	streq	r1, [r4, #0]
 80048c8:	e7ed      	b.n	80048a6 <_free_r+0x1e>
 80048ca:	461a      	mov	r2, r3
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b10b      	cbz	r3, 80048d4 <_free_r+0x4c>
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	d9fa      	bls.n	80048ca <_free_r+0x42>
 80048d4:	6811      	ldr	r1, [r2, #0]
 80048d6:	1850      	adds	r0, r2, r1
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d10b      	bne.n	80048f4 <_free_r+0x6c>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	4401      	add	r1, r0
 80048e0:	1850      	adds	r0, r2, r1
 80048e2:	4283      	cmp	r3, r0
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	d1e0      	bne.n	80048aa <_free_r+0x22>
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	6053      	str	r3, [r2, #4]
 80048ee:	4408      	add	r0, r1
 80048f0:	6010      	str	r0, [r2, #0]
 80048f2:	e7da      	b.n	80048aa <_free_r+0x22>
 80048f4:	d902      	bls.n	80048fc <_free_r+0x74>
 80048f6:	230c      	movs	r3, #12
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	e7d6      	b.n	80048aa <_free_r+0x22>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	1821      	adds	r1, r4, r0
 8004900:	428b      	cmp	r3, r1
 8004902:	bf04      	itt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	bf04      	itt	eq
 800490c:	1809      	addeq	r1, r1, r0
 800490e:	6021      	streq	r1, [r4, #0]
 8004910:	6054      	str	r4, [r2, #4]
 8004912:	e7ca      	b.n	80048aa <_free_r+0x22>
 8004914:	bd38      	pop	{r3, r4, r5, pc}
 8004916:	bf00      	nop
 8004918:	200008c8 	.word	0x200008c8

0800491c <malloc>:
 800491c:	4b02      	ldr	r3, [pc, #8]	@ (8004928 <malloc+0xc>)
 800491e:	4601      	mov	r1, r0
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	f000 b825 	b.w	8004970 <_malloc_r>
 8004926:	bf00      	nop
 8004928:	200001e8 	.word	0x200001e8

0800492c <sbrk_aligned>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4e0f      	ldr	r6, [pc, #60]	@ (800496c <sbrk_aligned+0x40>)
 8004930:	460c      	mov	r4, r1
 8004932:	6831      	ldr	r1, [r6, #0]
 8004934:	4605      	mov	r5, r0
 8004936:	b911      	cbnz	r1, 800493e <sbrk_aligned+0x12>
 8004938:	f000 fcd4 	bl	80052e4 <_sbrk_r>
 800493c:	6030      	str	r0, [r6, #0]
 800493e:	4621      	mov	r1, r4
 8004940:	4628      	mov	r0, r5
 8004942:	f000 fccf 	bl	80052e4 <_sbrk_r>
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	d103      	bne.n	8004952 <sbrk_aligned+0x26>
 800494a:	f04f 34ff 	mov.w	r4, #4294967295
 800494e:	4620      	mov	r0, r4
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	1cc4      	adds	r4, r0, #3
 8004954:	f024 0403 	bic.w	r4, r4, #3
 8004958:	42a0      	cmp	r0, r4
 800495a:	d0f8      	beq.n	800494e <sbrk_aligned+0x22>
 800495c:	1a21      	subs	r1, r4, r0
 800495e:	4628      	mov	r0, r5
 8004960:	f000 fcc0 	bl	80052e4 <_sbrk_r>
 8004964:	3001      	adds	r0, #1
 8004966:	d1f2      	bne.n	800494e <sbrk_aligned+0x22>
 8004968:	e7ef      	b.n	800494a <sbrk_aligned+0x1e>
 800496a:	bf00      	nop
 800496c:	200008c4 	.word	0x200008c4

08004970 <_malloc_r>:
 8004970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004974:	1ccd      	adds	r5, r1, #3
 8004976:	f025 0503 	bic.w	r5, r5, #3
 800497a:	3508      	adds	r5, #8
 800497c:	2d0c      	cmp	r5, #12
 800497e:	bf38      	it	cc
 8004980:	250c      	movcc	r5, #12
 8004982:	2d00      	cmp	r5, #0
 8004984:	4606      	mov	r6, r0
 8004986:	db01      	blt.n	800498c <_malloc_r+0x1c>
 8004988:	42a9      	cmp	r1, r5
 800498a:	d904      	bls.n	8004996 <_malloc_r+0x26>
 800498c:	230c      	movs	r3, #12
 800498e:	6033      	str	r3, [r6, #0]
 8004990:	2000      	movs	r0, #0
 8004992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a6c <_malloc_r+0xfc>
 800499a:	f000 f869 	bl	8004a70 <__malloc_lock>
 800499e:	f8d8 3000 	ldr.w	r3, [r8]
 80049a2:	461c      	mov	r4, r3
 80049a4:	bb44      	cbnz	r4, 80049f8 <_malloc_r+0x88>
 80049a6:	4629      	mov	r1, r5
 80049a8:	4630      	mov	r0, r6
 80049aa:	f7ff ffbf 	bl	800492c <sbrk_aligned>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	4604      	mov	r4, r0
 80049b2:	d158      	bne.n	8004a66 <_malloc_r+0xf6>
 80049b4:	f8d8 4000 	ldr.w	r4, [r8]
 80049b8:	4627      	mov	r7, r4
 80049ba:	2f00      	cmp	r7, #0
 80049bc:	d143      	bne.n	8004a46 <_malloc_r+0xd6>
 80049be:	2c00      	cmp	r4, #0
 80049c0:	d04b      	beq.n	8004a5a <_malloc_r+0xea>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	4639      	mov	r1, r7
 80049c6:	4630      	mov	r0, r6
 80049c8:	eb04 0903 	add.w	r9, r4, r3
 80049cc:	f000 fc8a 	bl	80052e4 <_sbrk_r>
 80049d0:	4581      	cmp	r9, r0
 80049d2:	d142      	bne.n	8004a5a <_malloc_r+0xea>
 80049d4:	6821      	ldr	r1, [r4, #0]
 80049d6:	1a6d      	subs	r5, r5, r1
 80049d8:	4629      	mov	r1, r5
 80049da:	4630      	mov	r0, r6
 80049dc:	f7ff ffa6 	bl	800492c <sbrk_aligned>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d03a      	beq.n	8004a5a <_malloc_r+0xea>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	442b      	add	r3, r5
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	f8d8 3000 	ldr.w	r3, [r8]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	bb62      	cbnz	r2, 8004a4c <_malloc_r+0xdc>
 80049f2:	f8c8 7000 	str.w	r7, [r8]
 80049f6:	e00f      	b.n	8004a18 <_malloc_r+0xa8>
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	1b52      	subs	r2, r2, r5
 80049fc:	d420      	bmi.n	8004a40 <_malloc_r+0xd0>
 80049fe:	2a0b      	cmp	r2, #11
 8004a00:	d917      	bls.n	8004a32 <_malloc_r+0xc2>
 8004a02:	1961      	adds	r1, r4, r5
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	6025      	str	r5, [r4, #0]
 8004a08:	bf18      	it	ne
 8004a0a:	6059      	strne	r1, [r3, #4]
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	bf08      	it	eq
 8004a10:	f8c8 1000 	streq.w	r1, [r8]
 8004a14:	5162      	str	r2, [r4, r5]
 8004a16:	604b      	str	r3, [r1, #4]
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f000 f82f 	bl	8004a7c <__malloc_unlock>
 8004a1e:	f104 000b 	add.w	r0, r4, #11
 8004a22:	1d23      	adds	r3, r4, #4
 8004a24:	f020 0007 	bic.w	r0, r0, #7
 8004a28:	1ac2      	subs	r2, r0, r3
 8004a2a:	bf1c      	itt	ne
 8004a2c:	1a1b      	subne	r3, r3, r0
 8004a2e:	50a3      	strne	r3, [r4, r2]
 8004a30:	e7af      	b.n	8004992 <_malloc_r+0x22>
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	bf0c      	ite	eq
 8004a38:	f8c8 2000 	streq.w	r2, [r8]
 8004a3c:	605a      	strne	r2, [r3, #4]
 8004a3e:	e7eb      	b.n	8004a18 <_malloc_r+0xa8>
 8004a40:	4623      	mov	r3, r4
 8004a42:	6864      	ldr	r4, [r4, #4]
 8004a44:	e7ae      	b.n	80049a4 <_malloc_r+0x34>
 8004a46:	463c      	mov	r4, r7
 8004a48:	687f      	ldr	r7, [r7, #4]
 8004a4a:	e7b6      	b.n	80049ba <_malloc_r+0x4a>
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d1fb      	bne.n	8004a4c <_malloc_r+0xdc>
 8004a54:	2300      	movs	r3, #0
 8004a56:	6053      	str	r3, [r2, #4]
 8004a58:	e7de      	b.n	8004a18 <_malloc_r+0xa8>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f000 f80c 	bl	8004a7c <__malloc_unlock>
 8004a64:	e794      	b.n	8004990 <_malloc_r+0x20>
 8004a66:	6005      	str	r5, [r0, #0]
 8004a68:	e7d6      	b.n	8004a18 <_malloc_r+0xa8>
 8004a6a:	bf00      	nop
 8004a6c:	200008c8 	.word	0x200008c8

08004a70 <__malloc_lock>:
 8004a70:	4801      	ldr	r0, [pc, #4]	@ (8004a78 <__malloc_lock+0x8>)
 8004a72:	f7ff b8ac 	b.w	8003bce <__retarget_lock_acquire_recursive>
 8004a76:	bf00      	nop
 8004a78:	200008c0 	.word	0x200008c0

08004a7c <__malloc_unlock>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	@ (8004a84 <__malloc_unlock+0x8>)
 8004a7e:	f7ff b8a7 	b.w	8003bd0 <__retarget_lock_release_recursive>
 8004a82:	bf00      	nop
 8004a84:	200008c0 	.word	0x200008c0

08004a88 <_Balloc>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	69c6      	ldr	r6, [r0, #28]
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	460d      	mov	r5, r1
 8004a90:	b976      	cbnz	r6, 8004ab0 <_Balloc+0x28>
 8004a92:	2010      	movs	r0, #16
 8004a94:	f7ff ff42 	bl	800491c <malloc>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	61e0      	str	r0, [r4, #28]
 8004a9c:	b920      	cbnz	r0, 8004aa8 <_Balloc+0x20>
 8004a9e:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <_Balloc+0x78>)
 8004aa0:	4818      	ldr	r0, [pc, #96]	@ (8004b04 <_Balloc+0x7c>)
 8004aa2:	216b      	movs	r1, #107	@ 0x6b
 8004aa4:	f000 fc2e 	bl	8005304 <__assert_func>
 8004aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004aac:	6006      	str	r6, [r0, #0]
 8004aae:	60c6      	str	r6, [r0, #12]
 8004ab0:	69e6      	ldr	r6, [r4, #28]
 8004ab2:	68f3      	ldr	r3, [r6, #12]
 8004ab4:	b183      	cbz	r3, 8004ad8 <_Balloc+0x50>
 8004ab6:	69e3      	ldr	r3, [r4, #28]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004abe:	b9b8      	cbnz	r0, 8004af0 <_Balloc+0x68>
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	fa01 f605 	lsl.w	r6, r1, r5
 8004ac6:	1d72      	adds	r2, r6, #5
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 fc38 	bl	8005340 <_calloc_r>
 8004ad0:	b160      	cbz	r0, 8004aec <_Balloc+0x64>
 8004ad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ad6:	e00e      	b.n	8004af6 <_Balloc+0x6e>
 8004ad8:	2221      	movs	r2, #33	@ 0x21
 8004ada:	2104      	movs	r1, #4
 8004adc:	4620      	mov	r0, r4
 8004ade:	f000 fc2f 	bl	8005340 <_calloc_r>
 8004ae2:	69e3      	ldr	r3, [r4, #28]
 8004ae4:	60f0      	str	r0, [r6, #12]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e4      	bne.n	8004ab6 <_Balloc+0x2e>
 8004aec:	2000      	movs	r0, #0
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	6802      	ldr	r2, [r0, #0]
 8004af2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004af6:	2300      	movs	r3, #0
 8004af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004afc:	e7f7      	b.n	8004aee <_Balloc+0x66>
 8004afe:	bf00      	nop
 8004b00:	08005989 	.word	0x08005989
 8004b04:	08005a09 	.word	0x08005a09

08004b08 <_Bfree>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	69c6      	ldr	r6, [r0, #28]
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	b976      	cbnz	r6, 8004b30 <_Bfree+0x28>
 8004b12:	2010      	movs	r0, #16
 8004b14:	f7ff ff02 	bl	800491c <malloc>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	61e8      	str	r0, [r5, #28]
 8004b1c:	b920      	cbnz	r0, 8004b28 <_Bfree+0x20>
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <_Bfree+0x3c>)
 8004b20:	4809      	ldr	r0, [pc, #36]	@ (8004b48 <_Bfree+0x40>)
 8004b22:	218f      	movs	r1, #143	@ 0x8f
 8004b24:	f000 fbee 	bl	8005304 <__assert_func>
 8004b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b2c:	6006      	str	r6, [r0, #0]
 8004b2e:	60c6      	str	r6, [r0, #12]
 8004b30:	b13c      	cbz	r4, 8004b42 <_Bfree+0x3a>
 8004b32:	69eb      	ldr	r3, [r5, #28]
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b3c:	6021      	str	r1, [r4, #0]
 8004b3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	08005989 	.word	0x08005989
 8004b48:	08005a09 	.word	0x08005a09

08004b4c <__multadd>:
 8004b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b50:	690d      	ldr	r5, [r1, #16]
 8004b52:	4607      	mov	r7, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	461e      	mov	r6, r3
 8004b58:	f101 0c14 	add.w	ip, r1, #20
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f8dc 3000 	ldr.w	r3, [ip]
 8004b62:	b299      	uxth	r1, r3
 8004b64:	fb02 6101 	mla	r1, r2, r1, r6
 8004b68:	0c1e      	lsrs	r6, r3, #16
 8004b6a:	0c0b      	lsrs	r3, r1, #16
 8004b6c:	fb02 3306 	mla	r3, r2, r6, r3
 8004b70:	b289      	uxth	r1, r1
 8004b72:	3001      	adds	r0, #1
 8004b74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b78:	4285      	cmp	r5, r0
 8004b7a:	f84c 1b04 	str.w	r1, [ip], #4
 8004b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b82:	dcec      	bgt.n	8004b5e <__multadd+0x12>
 8004b84:	b30e      	cbz	r6, 8004bca <__multadd+0x7e>
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	42ab      	cmp	r3, r5
 8004b8a:	dc19      	bgt.n	8004bc0 <__multadd+0x74>
 8004b8c:	6861      	ldr	r1, [r4, #4]
 8004b8e:	4638      	mov	r0, r7
 8004b90:	3101      	adds	r1, #1
 8004b92:	f7ff ff79 	bl	8004a88 <_Balloc>
 8004b96:	4680      	mov	r8, r0
 8004b98:	b928      	cbnz	r0, 8004ba6 <__multadd+0x5a>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <__multadd+0x84>)
 8004b9e:	480d      	ldr	r0, [pc, #52]	@ (8004bd4 <__multadd+0x88>)
 8004ba0:	21ba      	movs	r1, #186	@ 0xba
 8004ba2:	f000 fbaf 	bl	8005304 <__assert_func>
 8004ba6:	6922      	ldr	r2, [r4, #16]
 8004ba8:	3202      	adds	r2, #2
 8004baa:	f104 010c 	add.w	r1, r4, #12
 8004bae:	0092      	lsls	r2, r2, #2
 8004bb0:	300c      	adds	r0, #12
 8004bb2:	f7ff f80e 	bl	8003bd2 <memcpy>
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7ff ffa5 	bl	8004b08 <_Bfree>
 8004bbe:	4644      	mov	r4, r8
 8004bc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	615e      	str	r6, [r3, #20]
 8004bc8:	6125      	str	r5, [r4, #16]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd0:	080059f8 	.word	0x080059f8
 8004bd4:	08005a09 	.word	0x08005a09

08004bd8 <__hi0bits>:
 8004bd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004bdc:	4603      	mov	r3, r0
 8004bde:	bf36      	itet	cc
 8004be0:	0403      	lslcc	r3, r0, #16
 8004be2:	2000      	movcs	r0, #0
 8004be4:	2010      	movcc	r0, #16
 8004be6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bea:	bf3c      	itt	cc
 8004bec:	021b      	lslcc	r3, r3, #8
 8004bee:	3008      	addcc	r0, #8
 8004bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bf4:	bf3c      	itt	cc
 8004bf6:	011b      	lslcc	r3, r3, #4
 8004bf8:	3004      	addcc	r0, #4
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfe:	bf3c      	itt	cc
 8004c00:	009b      	lslcc	r3, r3, #2
 8004c02:	3002      	addcc	r0, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db05      	blt.n	8004c14 <__hi0bits+0x3c>
 8004c08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c0c:	f100 0001 	add.w	r0, r0, #1
 8004c10:	bf08      	it	eq
 8004c12:	2020      	moveq	r0, #32
 8004c14:	4770      	bx	lr

08004c16 <__lo0bits>:
 8004c16:	6803      	ldr	r3, [r0, #0]
 8004c18:	4602      	mov	r2, r0
 8004c1a:	f013 0007 	ands.w	r0, r3, #7
 8004c1e:	d00b      	beq.n	8004c38 <__lo0bits+0x22>
 8004c20:	07d9      	lsls	r1, r3, #31
 8004c22:	d421      	bmi.n	8004c68 <__lo0bits+0x52>
 8004c24:	0798      	lsls	r0, r3, #30
 8004c26:	bf49      	itett	mi
 8004c28:	085b      	lsrmi	r3, r3, #1
 8004c2a:	089b      	lsrpl	r3, r3, #2
 8004c2c:	2001      	movmi	r0, #1
 8004c2e:	6013      	strmi	r3, [r2, #0]
 8004c30:	bf5c      	itt	pl
 8004c32:	6013      	strpl	r3, [r2, #0]
 8004c34:	2002      	movpl	r0, #2
 8004c36:	4770      	bx	lr
 8004c38:	b299      	uxth	r1, r3
 8004c3a:	b909      	cbnz	r1, 8004c40 <__lo0bits+0x2a>
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	2010      	movs	r0, #16
 8004c40:	b2d9      	uxtb	r1, r3
 8004c42:	b909      	cbnz	r1, 8004c48 <__lo0bits+0x32>
 8004c44:	3008      	adds	r0, #8
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	0719      	lsls	r1, r3, #28
 8004c4a:	bf04      	itt	eq
 8004c4c:	091b      	lsreq	r3, r3, #4
 8004c4e:	3004      	addeq	r0, #4
 8004c50:	0799      	lsls	r1, r3, #30
 8004c52:	bf04      	itt	eq
 8004c54:	089b      	lsreq	r3, r3, #2
 8004c56:	3002      	addeq	r0, #2
 8004c58:	07d9      	lsls	r1, r3, #31
 8004c5a:	d403      	bmi.n	8004c64 <__lo0bits+0x4e>
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	f100 0001 	add.w	r0, r0, #1
 8004c62:	d003      	beq.n	8004c6c <__lo0bits+0x56>
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4770      	bx	lr
 8004c68:	2000      	movs	r0, #0
 8004c6a:	4770      	bx	lr
 8004c6c:	2020      	movs	r0, #32
 8004c6e:	4770      	bx	lr

08004c70 <__i2b>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	460c      	mov	r4, r1
 8004c74:	2101      	movs	r1, #1
 8004c76:	f7ff ff07 	bl	8004a88 <_Balloc>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	b928      	cbnz	r0, 8004c8a <__i2b+0x1a>
 8004c7e:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <__i2b+0x24>)
 8004c80:	4805      	ldr	r0, [pc, #20]	@ (8004c98 <__i2b+0x28>)
 8004c82:	f240 1145 	movw	r1, #325	@ 0x145
 8004c86:	f000 fb3d 	bl	8005304 <__assert_func>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	6144      	str	r4, [r0, #20]
 8004c8e:	6103      	str	r3, [r0, #16]
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	bf00      	nop
 8004c94:	080059f8 	.word	0x080059f8
 8004c98:	08005a09 	.word	0x08005a09

08004c9c <__multiply>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	690a      	ldr	r2, [r1, #16]
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bfa8      	it	ge
 8004caa:	4623      	movge	r3, r4
 8004cac:	460f      	mov	r7, r1
 8004cae:	bfa4      	itt	ge
 8004cb0:	460c      	movge	r4, r1
 8004cb2:	461f      	movge	r7, r3
 8004cb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004cb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004cbc:	68a3      	ldr	r3, [r4, #8]
 8004cbe:	6861      	ldr	r1, [r4, #4]
 8004cc0:	eb0a 0609 	add.w	r6, sl, r9
 8004cc4:	42b3      	cmp	r3, r6
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	bfb8      	it	lt
 8004cca:	3101      	addlt	r1, #1
 8004ccc:	f7ff fedc 	bl	8004a88 <_Balloc>
 8004cd0:	b930      	cbnz	r0, 8004ce0 <__multiply+0x44>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b44      	ldr	r3, [pc, #272]	@ (8004de8 <__multiply+0x14c>)
 8004cd6:	4845      	ldr	r0, [pc, #276]	@ (8004dec <__multiply+0x150>)
 8004cd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004cdc:	f000 fb12 	bl	8005304 <__assert_func>
 8004ce0:	f100 0514 	add.w	r5, r0, #20
 8004ce4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ce8:	462b      	mov	r3, r5
 8004cea:	2200      	movs	r2, #0
 8004cec:	4543      	cmp	r3, r8
 8004cee:	d321      	bcc.n	8004d34 <__multiply+0x98>
 8004cf0:	f107 0114 	add.w	r1, r7, #20
 8004cf4:	f104 0214 	add.w	r2, r4, #20
 8004cf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004cfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	1b13      	subs	r3, r2, r4
 8004d04:	3b15      	subs	r3, #21
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	f104 0715 	add.w	r7, r4, #21
 8004d10:	42ba      	cmp	r2, r7
 8004d12:	bf38      	it	cc
 8004d14:	2304      	movcc	r3, #4
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	9b02      	ldr	r3, [sp, #8]
 8004d1a:	9103      	str	r1, [sp, #12]
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	d80c      	bhi.n	8004d3a <__multiply+0x9e>
 8004d20:	2e00      	cmp	r6, #0
 8004d22:	dd03      	ble.n	8004d2c <__multiply+0x90>
 8004d24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d05b      	beq.n	8004de4 <__multiply+0x148>
 8004d2c:	6106      	str	r6, [r0, #16]
 8004d2e:	b005      	add	sp, #20
 8004d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d34:	f843 2b04 	str.w	r2, [r3], #4
 8004d38:	e7d8      	b.n	8004cec <__multiply+0x50>
 8004d3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d3e:	f1ba 0f00 	cmp.w	sl, #0
 8004d42:	d024      	beq.n	8004d8e <__multiply+0xf2>
 8004d44:	f104 0e14 	add.w	lr, r4, #20
 8004d48:	46a9      	mov	r9, r5
 8004d4a:	f04f 0c00 	mov.w	ip, #0
 8004d4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d52:	f8d9 3000 	ldr.w	r3, [r9]
 8004d56:	fa1f fb87 	uxth.w	fp, r7
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004d64:	f8d9 7000 	ldr.w	r7, [r9]
 8004d68:	4463      	add	r3, ip
 8004d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8004d72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d7c:	4572      	cmp	r2, lr
 8004d7e:	f849 3b04 	str.w	r3, [r9], #4
 8004d82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d86:	d8e2      	bhi.n	8004d4e <__multiply+0xb2>
 8004d88:	9b01      	ldr	r3, [sp, #4]
 8004d8a:	f845 c003 	str.w	ip, [r5, r3]
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d94:	3104      	adds	r1, #4
 8004d96:	f1b9 0f00 	cmp.w	r9, #0
 8004d9a:	d021      	beq.n	8004de0 <__multiply+0x144>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	f104 0c14 	add.w	ip, r4, #20
 8004da2:	46ae      	mov	lr, r5
 8004da4:	f04f 0a00 	mov.w	sl, #0
 8004da8:	f8bc b000 	ldrh.w	fp, [ip]
 8004dac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004db0:	fb09 770b 	mla	r7, r9, fp, r7
 8004db4:	4457      	add	r7, sl
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004dbc:	f84e 3b04 	str.w	r3, [lr], #4
 8004dc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004dc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dc8:	f8be 3000 	ldrh.w	r3, [lr]
 8004dcc:	fb09 330a 	mla	r3, r9, sl, r3
 8004dd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004dd4:	4562      	cmp	r2, ip
 8004dd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dda:	d8e5      	bhi.n	8004da8 <__multiply+0x10c>
 8004ddc:	9f01      	ldr	r7, [sp, #4]
 8004dde:	51eb      	str	r3, [r5, r7]
 8004de0:	3504      	adds	r5, #4
 8004de2:	e799      	b.n	8004d18 <__multiply+0x7c>
 8004de4:	3e01      	subs	r6, #1
 8004de6:	e79b      	b.n	8004d20 <__multiply+0x84>
 8004de8:	080059f8 	.word	0x080059f8
 8004dec:	08005a09 	.word	0x08005a09

08004df0 <__pow5mult>:
 8004df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df4:	4615      	mov	r5, r2
 8004df6:	f012 0203 	ands.w	r2, r2, #3
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	460e      	mov	r6, r1
 8004dfe:	d007      	beq.n	8004e10 <__pow5mult+0x20>
 8004e00:	4c25      	ldr	r4, [pc, #148]	@ (8004e98 <__pow5mult+0xa8>)
 8004e02:	3a01      	subs	r2, #1
 8004e04:	2300      	movs	r3, #0
 8004e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e0a:	f7ff fe9f 	bl	8004b4c <__multadd>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	10ad      	asrs	r5, r5, #2
 8004e12:	d03d      	beq.n	8004e90 <__pow5mult+0xa0>
 8004e14:	69fc      	ldr	r4, [r7, #28]
 8004e16:	b97c      	cbnz	r4, 8004e38 <__pow5mult+0x48>
 8004e18:	2010      	movs	r0, #16
 8004e1a:	f7ff fd7f 	bl	800491c <malloc>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	61f8      	str	r0, [r7, #28]
 8004e22:	b928      	cbnz	r0, 8004e30 <__pow5mult+0x40>
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <__pow5mult+0xac>)
 8004e26:	481e      	ldr	r0, [pc, #120]	@ (8004ea0 <__pow5mult+0xb0>)
 8004e28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e2c:	f000 fa6a 	bl	8005304 <__assert_func>
 8004e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e34:	6004      	str	r4, [r0, #0]
 8004e36:	60c4      	str	r4, [r0, #12]
 8004e38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e40:	b94c      	cbnz	r4, 8004e56 <__pow5mult+0x66>
 8004e42:	f240 2171 	movw	r1, #625	@ 0x271
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7ff ff12 	bl	8004c70 <__i2b>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e52:	4604      	mov	r4, r0
 8004e54:	6003      	str	r3, [r0, #0]
 8004e56:	f04f 0900 	mov.w	r9, #0
 8004e5a:	07eb      	lsls	r3, r5, #31
 8004e5c:	d50a      	bpl.n	8004e74 <__pow5mult+0x84>
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4622      	mov	r2, r4
 8004e62:	4638      	mov	r0, r7
 8004e64:	f7ff ff1a 	bl	8004c9c <__multiply>
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff fe4b 	bl	8004b08 <_Bfree>
 8004e72:	4646      	mov	r6, r8
 8004e74:	106d      	asrs	r5, r5, #1
 8004e76:	d00b      	beq.n	8004e90 <__pow5mult+0xa0>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	b938      	cbnz	r0, 8004e8c <__pow5mult+0x9c>
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff ff0b 	bl	8004c9c <__multiply>
 8004e86:	6020      	str	r0, [r4, #0]
 8004e88:	f8c0 9000 	str.w	r9, [r0]
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	e7e4      	b.n	8004e5a <__pow5mult+0x6a>
 8004e90:	4630      	mov	r0, r6
 8004e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e96:	bf00      	nop
 8004e98:	08005a64 	.word	0x08005a64
 8004e9c:	08005989 	.word	0x08005989
 8004ea0:	08005a09 	.word	0x08005a09

08004ea4 <__lshift>:
 8004ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	6849      	ldr	r1, [r1, #4]
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004eb2:	68a3      	ldr	r3, [r4, #8]
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ebc:	f108 0601 	add.w	r6, r8, #1
 8004ec0:	42b3      	cmp	r3, r6
 8004ec2:	db0b      	blt.n	8004edc <__lshift+0x38>
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff fddf 	bl	8004a88 <_Balloc>
 8004eca:	4605      	mov	r5, r0
 8004ecc:	b948      	cbnz	r0, 8004ee2 <__lshift+0x3e>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b28      	ldr	r3, [pc, #160]	@ (8004f74 <__lshift+0xd0>)
 8004ed2:	4829      	ldr	r0, [pc, #164]	@ (8004f78 <__lshift+0xd4>)
 8004ed4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004ed8:	f000 fa14 	bl	8005304 <__assert_func>
 8004edc:	3101      	adds	r1, #1
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	e7ee      	b.n	8004ec0 <__lshift+0x1c>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f100 0114 	add.w	r1, r0, #20
 8004ee8:	f100 0210 	add.w	r2, r0, #16
 8004eec:	4618      	mov	r0, r3
 8004eee:	4553      	cmp	r3, sl
 8004ef0:	db33      	blt.n	8004f5a <__lshift+0xb6>
 8004ef2:	6920      	ldr	r0, [r4, #16]
 8004ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ef8:	f104 0314 	add.w	r3, r4, #20
 8004efc:	f019 091f 	ands.w	r9, r9, #31
 8004f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f08:	d02b      	beq.n	8004f62 <__lshift+0xbe>
 8004f0a:	f1c9 0e20 	rsb	lr, r9, #32
 8004f0e:	468a      	mov	sl, r1
 8004f10:	2200      	movs	r2, #0
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	fa00 f009 	lsl.w	r0, r0, r9
 8004f18:	4310      	orrs	r0, r2
 8004f1a:	f84a 0b04 	str.w	r0, [sl], #4
 8004f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f22:	459c      	cmp	ip, r3
 8004f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f28:	d8f3      	bhi.n	8004f12 <__lshift+0x6e>
 8004f2a:	ebac 0304 	sub.w	r3, ip, r4
 8004f2e:	3b15      	subs	r3, #21
 8004f30:	f023 0303 	bic.w	r3, r3, #3
 8004f34:	3304      	adds	r3, #4
 8004f36:	f104 0015 	add.w	r0, r4, #21
 8004f3a:	4584      	cmp	ip, r0
 8004f3c:	bf38      	it	cc
 8004f3e:	2304      	movcc	r3, #4
 8004f40:	50ca      	str	r2, [r1, r3]
 8004f42:	b10a      	cbz	r2, 8004f48 <__lshift+0xa4>
 8004f44:	f108 0602 	add.w	r6, r8, #2
 8004f48:	3e01      	subs	r6, #1
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	612e      	str	r6, [r5, #16]
 8004f4e:	4621      	mov	r1, r4
 8004f50:	f7ff fdda 	bl	8004b08 <_Bfree>
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f5e:	3301      	adds	r3, #1
 8004f60:	e7c5      	b.n	8004eee <__lshift+0x4a>
 8004f62:	3904      	subs	r1, #4
 8004f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f68:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f6c:	459c      	cmp	ip, r3
 8004f6e:	d8f9      	bhi.n	8004f64 <__lshift+0xc0>
 8004f70:	e7ea      	b.n	8004f48 <__lshift+0xa4>
 8004f72:	bf00      	nop
 8004f74:	080059f8 	.word	0x080059f8
 8004f78:	08005a09 	.word	0x08005a09

08004f7c <__mcmp>:
 8004f7c:	690a      	ldr	r2, [r1, #16]
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6900      	ldr	r0, [r0, #16]
 8004f82:	1a80      	subs	r0, r0, r2
 8004f84:	b530      	push	{r4, r5, lr}
 8004f86:	d10e      	bne.n	8004fa6 <__mcmp+0x2a>
 8004f88:	3314      	adds	r3, #20
 8004f8a:	3114      	adds	r1, #20
 8004f8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f9c:	4295      	cmp	r5, r2
 8004f9e:	d003      	beq.n	8004fa8 <__mcmp+0x2c>
 8004fa0:	d205      	bcs.n	8004fae <__mcmp+0x32>
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	bd30      	pop	{r4, r5, pc}
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d3f3      	bcc.n	8004f94 <__mcmp+0x18>
 8004fac:	e7fb      	b.n	8004fa6 <__mcmp+0x2a>
 8004fae:	2001      	movs	r0, #1
 8004fb0:	e7f9      	b.n	8004fa6 <__mcmp+0x2a>
	...

08004fb4 <__mdiff>:
 8004fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	4689      	mov	r9, r1
 8004fba:	4606      	mov	r6, r0
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4648      	mov	r0, r9
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	f7ff ffdb 	bl	8004f7c <__mcmp>
 8004fc6:	1e05      	subs	r5, r0, #0
 8004fc8:	d112      	bne.n	8004ff0 <__mdiff+0x3c>
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff fd5b 	bl	8004a88 <_Balloc>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	b928      	cbnz	r0, 8004fe2 <__mdiff+0x2e>
 8004fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <__mdiff+0x120>)
 8004fd8:	f240 2137 	movw	r1, #567	@ 0x237
 8004fdc:	483e      	ldr	r0, [pc, #248]	@ (80050d8 <__mdiff+0x124>)
 8004fde:	f000 f991 	bl	8005304 <__assert_func>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fe8:	4610      	mov	r0, r2
 8004fea:	b003      	add	sp, #12
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	bfbc      	itt	lt
 8004ff2:	464b      	movlt	r3, r9
 8004ff4:	46a1      	movlt	r9, r4
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ffc:	bfba      	itte	lt
 8004ffe:	461c      	movlt	r4, r3
 8005000:	2501      	movlt	r5, #1
 8005002:	2500      	movge	r5, #0
 8005004:	f7ff fd40 	bl	8004a88 <_Balloc>
 8005008:	4602      	mov	r2, r0
 800500a:	b918      	cbnz	r0, 8005014 <__mdiff+0x60>
 800500c:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <__mdiff+0x120>)
 800500e:	f240 2145 	movw	r1, #581	@ 0x245
 8005012:	e7e3      	b.n	8004fdc <__mdiff+0x28>
 8005014:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005018:	6926      	ldr	r6, [r4, #16]
 800501a:	60c5      	str	r5, [r0, #12]
 800501c:	f109 0310 	add.w	r3, r9, #16
 8005020:	f109 0514 	add.w	r5, r9, #20
 8005024:	f104 0e14 	add.w	lr, r4, #20
 8005028:	f100 0b14 	add.w	fp, r0, #20
 800502c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005030:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	46d9      	mov	r9, fp
 8005038:	f04f 0c00 	mov.w	ip, #0
 800503c:	9b01      	ldr	r3, [sp, #4]
 800503e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005042:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	fa1f f38a 	uxth.w	r3, sl
 800504c:	4619      	mov	r1, r3
 800504e:	b283      	uxth	r3, r0
 8005050:	1acb      	subs	r3, r1, r3
 8005052:	0c00      	lsrs	r0, r0, #16
 8005054:	4463      	add	r3, ip
 8005056:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800505a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005064:	4576      	cmp	r6, lr
 8005066:	f849 3b04 	str.w	r3, [r9], #4
 800506a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800506e:	d8e5      	bhi.n	800503c <__mdiff+0x88>
 8005070:	1b33      	subs	r3, r6, r4
 8005072:	3b15      	subs	r3, #21
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	3415      	adds	r4, #21
 800507a:	3304      	adds	r3, #4
 800507c:	42a6      	cmp	r6, r4
 800507e:	bf38      	it	cc
 8005080:	2304      	movcc	r3, #4
 8005082:	441d      	add	r5, r3
 8005084:	445b      	add	r3, fp
 8005086:	461e      	mov	r6, r3
 8005088:	462c      	mov	r4, r5
 800508a:	4544      	cmp	r4, r8
 800508c:	d30e      	bcc.n	80050ac <__mdiff+0xf8>
 800508e:	f108 0103 	add.w	r1, r8, #3
 8005092:	1b49      	subs	r1, r1, r5
 8005094:	f021 0103 	bic.w	r1, r1, #3
 8005098:	3d03      	subs	r5, #3
 800509a:	45a8      	cmp	r8, r5
 800509c:	bf38      	it	cc
 800509e:	2100      	movcc	r1, #0
 80050a0:	440b      	add	r3, r1
 80050a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050a6:	b191      	cbz	r1, 80050ce <__mdiff+0x11a>
 80050a8:	6117      	str	r7, [r2, #16]
 80050aa:	e79d      	b.n	8004fe8 <__mdiff+0x34>
 80050ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80050b0:	46e6      	mov	lr, ip
 80050b2:	0c08      	lsrs	r0, r1, #16
 80050b4:	fa1c fc81 	uxtah	ip, ip, r1
 80050b8:	4471      	add	r1, lr
 80050ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80050be:	b289      	uxth	r1, r1
 80050c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80050c4:	f846 1b04 	str.w	r1, [r6], #4
 80050c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050cc:	e7dd      	b.n	800508a <__mdiff+0xd6>
 80050ce:	3f01      	subs	r7, #1
 80050d0:	e7e7      	b.n	80050a2 <__mdiff+0xee>
 80050d2:	bf00      	nop
 80050d4:	080059f8 	.word	0x080059f8
 80050d8:	08005a09 	.word	0x08005a09

080050dc <__d2b>:
 80050dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050e0:	460f      	mov	r7, r1
 80050e2:	2101      	movs	r1, #1
 80050e4:	ec59 8b10 	vmov	r8, r9, d0
 80050e8:	4616      	mov	r6, r2
 80050ea:	f7ff fccd 	bl	8004a88 <_Balloc>
 80050ee:	4604      	mov	r4, r0
 80050f0:	b930      	cbnz	r0, 8005100 <__d2b+0x24>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b23      	ldr	r3, [pc, #140]	@ (8005184 <__d2b+0xa8>)
 80050f6:	4824      	ldr	r0, [pc, #144]	@ (8005188 <__d2b+0xac>)
 80050f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80050fc:	f000 f902 	bl	8005304 <__assert_func>
 8005100:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005108:	b10d      	cbz	r5, 800510e <__d2b+0x32>
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f1b8 0300 	subs.w	r3, r8, #0
 8005114:	d023      	beq.n	800515e <__d2b+0x82>
 8005116:	4668      	mov	r0, sp
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f7ff fd7c 	bl	8004c16 <__lo0bits>
 800511e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005122:	b1d0      	cbz	r0, 800515a <__d2b+0x7e>
 8005124:	f1c0 0320 	rsb	r3, r0, #32
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	430b      	orrs	r3, r1
 800512e:	40c2      	lsrs	r2, r0
 8005130:	6163      	str	r3, [r4, #20]
 8005132:	9201      	str	r2, [sp, #4]
 8005134:	9b01      	ldr	r3, [sp, #4]
 8005136:	61a3      	str	r3, [r4, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2201      	moveq	r2, #1
 800513e:	2202      	movne	r2, #2
 8005140:	6122      	str	r2, [r4, #16]
 8005142:	b1a5      	cbz	r5, 800516e <__d2b+0x92>
 8005144:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005148:	4405      	add	r5, r0
 800514a:	603d      	str	r5, [r7, #0]
 800514c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005150:	6030      	str	r0, [r6, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	b003      	add	sp, #12
 8005156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800515a:	6161      	str	r1, [r4, #20]
 800515c:	e7ea      	b.n	8005134 <__d2b+0x58>
 800515e:	a801      	add	r0, sp, #4
 8005160:	f7ff fd59 	bl	8004c16 <__lo0bits>
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	6163      	str	r3, [r4, #20]
 8005168:	3020      	adds	r0, #32
 800516a:	2201      	movs	r2, #1
 800516c:	e7e8      	b.n	8005140 <__d2b+0x64>
 800516e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005172:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005176:	6038      	str	r0, [r7, #0]
 8005178:	6918      	ldr	r0, [r3, #16]
 800517a:	f7ff fd2d 	bl	8004bd8 <__hi0bits>
 800517e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005182:	e7e5      	b.n	8005150 <__d2b+0x74>
 8005184:	080059f8 	.word	0x080059f8
 8005188:	08005a09 	.word	0x08005a09

0800518c <__sflush_r>:
 800518c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005194:	0716      	lsls	r6, r2, #28
 8005196:	4605      	mov	r5, r0
 8005198:	460c      	mov	r4, r1
 800519a:	d454      	bmi.n	8005246 <__sflush_r+0xba>
 800519c:	684b      	ldr	r3, [r1, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dc02      	bgt.n	80051a8 <__sflush_r+0x1c>
 80051a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd48      	ble.n	800523a <__sflush_r+0xae>
 80051a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d045      	beq.n	800523a <__sflush_r+0xae>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051b4:	682f      	ldr	r7, [r5, #0]
 80051b6:	6a21      	ldr	r1, [r4, #32]
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	d030      	beq.n	800521e <__sflush_r+0x92>
 80051bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	0759      	lsls	r1, r3, #29
 80051c2:	d505      	bpl.n	80051d0 <__sflush_r+0x44>
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051ca:	b10b      	cbz	r3, 80051d0 <__sflush_r+0x44>
 80051cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b0      	blx	r6
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	d106      	bne.n	80051ee <__sflush_r+0x62>
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	291d      	cmp	r1, #29
 80051e4:	d82b      	bhi.n	800523e <__sflush_r+0xb2>
 80051e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005290 <__sflush_r+0x104>)
 80051e8:	410a      	asrs	r2, r1
 80051ea:	07d6      	lsls	r6, r2, #31
 80051ec:	d427      	bmi.n	800523e <__sflush_r+0xb2>
 80051ee:	2200      	movs	r2, #0
 80051f0:	6062      	str	r2, [r4, #4]
 80051f2:	04d9      	lsls	r1, r3, #19
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	d504      	bpl.n	8005204 <__sflush_r+0x78>
 80051fa:	1c42      	adds	r2, r0, #1
 80051fc:	d101      	bne.n	8005202 <__sflush_r+0x76>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	b903      	cbnz	r3, 8005204 <__sflush_r+0x78>
 8005202:	6560      	str	r0, [r4, #84]	@ 0x54
 8005204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005206:	602f      	str	r7, [r5, #0]
 8005208:	b1b9      	cbz	r1, 800523a <__sflush_r+0xae>
 800520a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800520e:	4299      	cmp	r1, r3
 8005210:	d002      	beq.n	8005218 <__sflush_r+0x8c>
 8005212:	4628      	mov	r0, r5
 8005214:	f7ff fb38 	bl	8004888 <_free_r>
 8005218:	2300      	movs	r3, #0
 800521a:	6363      	str	r3, [r4, #52]	@ 0x34
 800521c:	e00d      	b.n	800523a <__sflush_r+0xae>
 800521e:	2301      	movs	r3, #1
 8005220:	4628      	mov	r0, r5
 8005222:	47b0      	blx	r6
 8005224:	4602      	mov	r2, r0
 8005226:	1c50      	adds	r0, r2, #1
 8005228:	d1c9      	bne.n	80051be <__sflush_r+0x32>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0c6      	beq.n	80051be <__sflush_r+0x32>
 8005230:	2b1d      	cmp	r3, #29
 8005232:	d001      	beq.n	8005238 <__sflush_r+0xac>
 8005234:	2b16      	cmp	r3, #22
 8005236:	d11e      	bne.n	8005276 <__sflush_r+0xea>
 8005238:	602f      	str	r7, [r5, #0]
 800523a:	2000      	movs	r0, #0
 800523c:	e022      	b.n	8005284 <__sflush_r+0xf8>
 800523e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005242:	b21b      	sxth	r3, r3
 8005244:	e01b      	b.n	800527e <__sflush_r+0xf2>
 8005246:	690f      	ldr	r7, [r1, #16]
 8005248:	2f00      	cmp	r7, #0
 800524a:	d0f6      	beq.n	800523a <__sflush_r+0xae>
 800524c:	0793      	lsls	r3, r2, #30
 800524e:	680e      	ldr	r6, [r1, #0]
 8005250:	bf08      	it	eq
 8005252:	694b      	ldreq	r3, [r1, #20]
 8005254:	600f      	str	r7, [r1, #0]
 8005256:	bf18      	it	ne
 8005258:	2300      	movne	r3, #0
 800525a:	eba6 0807 	sub.w	r8, r6, r7
 800525e:	608b      	str	r3, [r1, #8]
 8005260:	f1b8 0f00 	cmp.w	r8, #0
 8005264:	dde9      	ble.n	800523a <__sflush_r+0xae>
 8005266:	6a21      	ldr	r1, [r4, #32]
 8005268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800526a:	4643      	mov	r3, r8
 800526c:	463a      	mov	r2, r7
 800526e:	4628      	mov	r0, r5
 8005270:	47b0      	blx	r6
 8005272:	2800      	cmp	r0, #0
 8005274:	dc08      	bgt.n	8005288 <__sflush_r+0xfc>
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	4407      	add	r7, r0
 800528a:	eba8 0800 	sub.w	r8, r8, r0
 800528e:	e7e7      	b.n	8005260 <__sflush_r+0xd4>
 8005290:	dfbffffe 	.word	0xdfbffffe

08005294 <_fflush_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b913      	cbnz	r3, 80052a4 <_fflush_r+0x10>
 800529e:	2500      	movs	r5, #0
 80052a0:	4628      	mov	r0, r5
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	b118      	cbz	r0, 80052ae <_fflush_r+0x1a>
 80052a6:	6a03      	ldr	r3, [r0, #32]
 80052a8:	b90b      	cbnz	r3, 80052ae <_fflush_r+0x1a>
 80052aa:	f7fe fb99 	bl	80039e0 <__sinit>
 80052ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f3      	beq.n	800529e <_fflush_r+0xa>
 80052b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052b8:	07d0      	lsls	r0, r2, #31
 80052ba:	d404      	bmi.n	80052c6 <_fflush_r+0x32>
 80052bc:	0599      	lsls	r1, r3, #22
 80052be:	d402      	bmi.n	80052c6 <_fflush_r+0x32>
 80052c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052c2:	f7fe fc84 	bl	8003bce <__retarget_lock_acquire_recursive>
 80052c6:	4628      	mov	r0, r5
 80052c8:	4621      	mov	r1, r4
 80052ca:	f7ff ff5f 	bl	800518c <__sflush_r>
 80052ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d0:	07da      	lsls	r2, r3, #31
 80052d2:	4605      	mov	r5, r0
 80052d4:	d4e4      	bmi.n	80052a0 <_fflush_r+0xc>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	059b      	lsls	r3, r3, #22
 80052da:	d4e1      	bmi.n	80052a0 <_fflush_r+0xc>
 80052dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052de:	f7fe fc77 	bl	8003bd0 <__retarget_lock_release_recursive>
 80052e2:	e7dd      	b.n	80052a0 <_fflush_r+0xc>

080052e4 <_sbrk_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d06      	ldr	r5, [pc, #24]	@ (8005300 <_sbrk_r+0x1c>)
 80052e8:	2300      	movs	r3, #0
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	f7fc f948 	bl	8001584 <_sbrk>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_sbrk_r+0x1a>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_sbrk_r+0x1a>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	200008bc 	.word	0x200008bc

08005304 <__assert_func>:
 8005304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005306:	4614      	mov	r4, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4b09      	ldr	r3, [pc, #36]	@ (8005330 <__assert_func+0x2c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4605      	mov	r5, r0
 8005310:	68d8      	ldr	r0, [r3, #12]
 8005312:	b954      	cbnz	r4, 800532a <__assert_func+0x26>
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <__assert_func+0x30>)
 8005316:	461c      	mov	r4, r3
 8005318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	462b      	mov	r3, r5
 8005320:	4905      	ldr	r1, [pc, #20]	@ (8005338 <__assert_func+0x34>)
 8005322:	f000 f841 	bl	80053a8 <fiprintf>
 8005326:	f000 f851 	bl	80053cc <abort>
 800532a:	4b04      	ldr	r3, [pc, #16]	@ (800533c <__assert_func+0x38>)
 800532c:	e7f4      	b.n	8005318 <__assert_func+0x14>
 800532e:	bf00      	nop
 8005330:	200001e8 	.word	0x200001e8
 8005334:	08005ba5 	.word	0x08005ba5
 8005338:	08005b77 	.word	0x08005b77
 800533c:	08005b6a 	.word	0x08005b6a

08005340 <_calloc_r>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	fba1 5402 	umull	r5, r4, r1, r2
 8005346:	b93c      	cbnz	r4, 8005358 <_calloc_r+0x18>
 8005348:	4629      	mov	r1, r5
 800534a:	f7ff fb11 	bl	8004970 <_malloc_r>
 800534e:	4606      	mov	r6, r0
 8005350:	b928      	cbnz	r0, 800535e <_calloc_r+0x1e>
 8005352:	2600      	movs	r6, #0
 8005354:	4630      	mov	r0, r6
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	220c      	movs	r2, #12
 800535a:	6002      	str	r2, [r0, #0]
 800535c:	e7f9      	b.n	8005352 <_calloc_r+0x12>
 800535e:	462a      	mov	r2, r5
 8005360:	4621      	mov	r1, r4
 8005362:	f7fe fbb6 	bl	8003ad2 <memset>
 8005366:	e7f5      	b.n	8005354 <_calloc_r+0x14>

08005368 <__ascii_mbtowc>:
 8005368:	b082      	sub	sp, #8
 800536a:	b901      	cbnz	r1, 800536e <__ascii_mbtowc+0x6>
 800536c:	a901      	add	r1, sp, #4
 800536e:	b142      	cbz	r2, 8005382 <__ascii_mbtowc+0x1a>
 8005370:	b14b      	cbz	r3, 8005386 <__ascii_mbtowc+0x1e>
 8005372:	7813      	ldrb	r3, [r2, #0]
 8005374:	600b      	str	r3, [r1, #0]
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	1e10      	subs	r0, r2, #0
 800537a:	bf18      	it	ne
 800537c:	2001      	movne	r0, #1
 800537e:	b002      	add	sp, #8
 8005380:	4770      	bx	lr
 8005382:	4610      	mov	r0, r2
 8005384:	e7fb      	b.n	800537e <__ascii_mbtowc+0x16>
 8005386:	f06f 0001 	mvn.w	r0, #1
 800538a:	e7f8      	b.n	800537e <__ascii_mbtowc+0x16>

0800538c <__ascii_wctomb>:
 800538c:	4603      	mov	r3, r0
 800538e:	4608      	mov	r0, r1
 8005390:	b141      	cbz	r1, 80053a4 <__ascii_wctomb+0x18>
 8005392:	2aff      	cmp	r2, #255	@ 0xff
 8005394:	d904      	bls.n	80053a0 <__ascii_wctomb+0x14>
 8005396:	228a      	movs	r2, #138	@ 0x8a
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	4770      	bx	lr
 80053a0:	700a      	strb	r2, [r1, #0]
 80053a2:	2001      	movs	r0, #1
 80053a4:	4770      	bx	lr
	...

080053a8 <fiprintf>:
 80053a8:	b40e      	push	{r1, r2, r3}
 80053aa:	b503      	push	{r0, r1, lr}
 80053ac:	4601      	mov	r1, r0
 80053ae:	ab03      	add	r3, sp, #12
 80053b0:	4805      	ldr	r0, [pc, #20]	@ (80053c8 <fiprintf+0x20>)
 80053b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053b6:	6800      	ldr	r0, [r0, #0]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	f000 f837 	bl	800542c <_vfiprintf_r>
 80053be:	b002      	add	sp, #8
 80053c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c4:	b003      	add	sp, #12
 80053c6:	4770      	bx	lr
 80053c8:	200001e8 	.word	0x200001e8

080053cc <abort>:
 80053cc:	b508      	push	{r3, lr}
 80053ce:	2006      	movs	r0, #6
 80053d0:	f000 fa00 	bl	80057d4 <raise>
 80053d4:	2001      	movs	r0, #1
 80053d6:	f7fc f879 	bl	80014cc <_exit>

080053da <__sfputc_r>:
 80053da:	6893      	ldr	r3, [r2, #8]
 80053dc:	3b01      	subs	r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	b410      	push	{r4}
 80053e2:	6093      	str	r3, [r2, #8]
 80053e4:	da08      	bge.n	80053f8 <__sfputc_r+0x1e>
 80053e6:	6994      	ldr	r4, [r2, #24]
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	db01      	blt.n	80053f0 <__sfputc_r+0x16>
 80053ec:	290a      	cmp	r1, #10
 80053ee:	d103      	bne.n	80053f8 <__sfputc_r+0x1e>
 80053f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f4:	f000 b932 	b.w	800565c <__swbuf_r>
 80053f8:	6813      	ldr	r3, [r2, #0]
 80053fa:	1c58      	adds	r0, r3, #1
 80053fc:	6010      	str	r0, [r2, #0]
 80053fe:	7019      	strb	r1, [r3, #0]
 8005400:	4608      	mov	r0, r1
 8005402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005406:	4770      	bx	lr

08005408 <__sfputs_r>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	4614      	mov	r4, r2
 8005410:	18d5      	adds	r5, r2, r3
 8005412:	42ac      	cmp	r4, r5
 8005414:	d101      	bne.n	800541a <__sfputs_r+0x12>
 8005416:	2000      	movs	r0, #0
 8005418:	e007      	b.n	800542a <__sfputs_r+0x22>
 800541a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800541e:	463a      	mov	r2, r7
 8005420:	4630      	mov	r0, r6
 8005422:	f7ff ffda 	bl	80053da <__sfputc_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d1f3      	bne.n	8005412 <__sfputs_r+0xa>
 800542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800542c <_vfiprintf_r>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	460d      	mov	r5, r1
 8005432:	b09d      	sub	sp, #116	@ 0x74
 8005434:	4614      	mov	r4, r2
 8005436:	4698      	mov	r8, r3
 8005438:	4606      	mov	r6, r0
 800543a:	b118      	cbz	r0, 8005444 <_vfiprintf_r+0x18>
 800543c:	6a03      	ldr	r3, [r0, #32]
 800543e:	b90b      	cbnz	r3, 8005444 <_vfiprintf_r+0x18>
 8005440:	f7fe face 	bl	80039e0 <__sinit>
 8005444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005446:	07d9      	lsls	r1, r3, #31
 8005448:	d405      	bmi.n	8005456 <_vfiprintf_r+0x2a>
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	059a      	lsls	r2, r3, #22
 800544e:	d402      	bmi.n	8005456 <_vfiprintf_r+0x2a>
 8005450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005452:	f7fe fbbc 	bl	8003bce <__retarget_lock_acquire_recursive>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	071b      	lsls	r3, r3, #28
 800545a:	d501      	bpl.n	8005460 <_vfiprintf_r+0x34>
 800545c:	692b      	ldr	r3, [r5, #16]
 800545e:	b99b      	cbnz	r3, 8005488 <_vfiprintf_r+0x5c>
 8005460:	4629      	mov	r1, r5
 8005462:	4630      	mov	r0, r6
 8005464:	f000 f938 	bl	80056d8 <__swsetup_r>
 8005468:	b170      	cbz	r0, 8005488 <_vfiprintf_r+0x5c>
 800546a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800546c:	07dc      	lsls	r4, r3, #31
 800546e:	d504      	bpl.n	800547a <_vfiprintf_r+0x4e>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	b01d      	add	sp, #116	@ 0x74
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	89ab      	ldrh	r3, [r5, #12]
 800547c:	0598      	lsls	r0, r3, #22
 800547e:	d4f7      	bmi.n	8005470 <_vfiprintf_r+0x44>
 8005480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005482:	f7fe fba5 	bl	8003bd0 <__retarget_lock_release_recursive>
 8005486:	e7f3      	b.n	8005470 <_vfiprintf_r+0x44>
 8005488:	2300      	movs	r3, #0
 800548a:	9309      	str	r3, [sp, #36]	@ 0x24
 800548c:	2320      	movs	r3, #32
 800548e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005492:	f8cd 800c 	str.w	r8, [sp, #12]
 8005496:	2330      	movs	r3, #48	@ 0x30
 8005498:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005648 <_vfiprintf_r+0x21c>
 800549c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054a0:	f04f 0901 	mov.w	r9, #1
 80054a4:	4623      	mov	r3, r4
 80054a6:	469a      	mov	sl, r3
 80054a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ac:	b10a      	cbz	r2, 80054b2 <_vfiprintf_r+0x86>
 80054ae:	2a25      	cmp	r2, #37	@ 0x25
 80054b0:	d1f9      	bne.n	80054a6 <_vfiprintf_r+0x7a>
 80054b2:	ebba 0b04 	subs.w	fp, sl, r4
 80054b6:	d00b      	beq.n	80054d0 <_vfiprintf_r+0xa4>
 80054b8:	465b      	mov	r3, fp
 80054ba:	4622      	mov	r2, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	4630      	mov	r0, r6
 80054c0:	f7ff ffa2 	bl	8005408 <__sfputs_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	f000 80a7 	beq.w	8005618 <_vfiprintf_r+0x1ec>
 80054ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054cc:	445a      	add	r2, fp
 80054ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80054d0:	f89a 3000 	ldrb.w	r3, [sl]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 809f 	beq.w	8005618 <_vfiprintf_r+0x1ec>
 80054da:	2300      	movs	r3, #0
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295
 80054e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e4:	f10a 0a01 	add.w	sl, sl, #1
 80054e8:	9304      	str	r3, [sp, #16]
 80054ea:	9307      	str	r3, [sp, #28]
 80054ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80054f2:	4654      	mov	r4, sl
 80054f4:	2205      	movs	r2, #5
 80054f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fa:	4853      	ldr	r0, [pc, #332]	@ (8005648 <_vfiprintf_r+0x21c>)
 80054fc:	f7fa fe70 	bl	80001e0 <memchr>
 8005500:	9a04      	ldr	r2, [sp, #16]
 8005502:	b9d8      	cbnz	r0, 800553c <_vfiprintf_r+0x110>
 8005504:	06d1      	lsls	r1, r2, #27
 8005506:	bf44      	itt	mi
 8005508:	2320      	movmi	r3, #32
 800550a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800550e:	0713      	lsls	r3, r2, #28
 8005510:	bf44      	itt	mi
 8005512:	232b      	movmi	r3, #43	@ 0x2b
 8005514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005518:	f89a 3000 	ldrb.w	r3, [sl]
 800551c:	2b2a      	cmp	r3, #42	@ 0x2a
 800551e:	d015      	beq.n	800554c <_vfiprintf_r+0x120>
 8005520:	9a07      	ldr	r2, [sp, #28]
 8005522:	4654      	mov	r4, sl
 8005524:	2000      	movs	r0, #0
 8005526:	f04f 0c0a 	mov.w	ip, #10
 800552a:	4621      	mov	r1, r4
 800552c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005530:	3b30      	subs	r3, #48	@ 0x30
 8005532:	2b09      	cmp	r3, #9
 8005534:	d94b      	bls.n	80055ce <_vfiprintf_r+0x1a2>
 8005536:	b1b0      	cbz	r0, 8005566 <_vfiprintf_r+0x13a>
 8005538:	9207      	str	r2, [sp, #28]
 800553a:	e014      	b.n	8005566 <_vfiprintf_r+0x13a>
 800553c:	eba0 0308 	sub.w	r3, r0, r8
 8005540:	fa09 f303 	lsl.w	r3, r9, r3
 8005544:	4313      	orrs	r3, r2
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	46a2      	mov	sl, r4
 800554a:	e7d2      	b.n	80054f2 <_vfiprintf_r+0xc6>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	1d19      	adds	r1, r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	9103      	str	r1, [sp, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	bfbb      	ittet	lt
 8005558:	425b      	neglt	r3, r3
 800555a:	f042 0202 	orrlt.w	r2, r2, #2
 800555e:	9307      	strge	r3, [sp, #28]
 8005560:	9307      	strlt	r3, [sp, #28]
 8005562:	bfb8      	it	lt
 8005564:	9204      	strlt	r2, [sp, #16]
 8005566:	7823      	ldrb	r3, [r4, #0]
 8005568:	2b2e      	cmp	r3, #46	@ 0x2e
 800556a:	d10a      	bne.n	8005582 <_vfiprintf_r+0x156>
 800556c:	7863      	ldrb	r3, [r4, #1]
 800556e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005570:	d132      	bne.n	80055d8 <_vfiprintf_r+0x1ac>
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	1d1a      	adds	r2, r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	9203      	str	r2, [sp, #12]
 800557a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800557e:	3402      	adds	r4, #2
 8005580:	9305      	str	r3, [sp, #20]
 8005582:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005658 <_vfiprintf_r+0x22c>
 8005586:	7821      	ldrb	r1, [r4, #0]
 8005588:	2203      	movs	r2, #3
 800558a:	4650      	mov	r0, sl
 800558c:	f7fa fe28 	bl	80001e0 <memchr>
 8005590:	b138      	cbz	r0, 80055a2 <_vfiprintf_r+0x176>
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	eba0 000a 	sub.w	r0, r0, sl
 8005598:	2240      	movs	r2, #64	@ 0x40
 800559a:	4082      	lsls	r2, r0
 800559c:	4313      	orrs	r3, r2
 800559e:	3401      	adds	r4, #1
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a6:	4829      	ldr	r0, [pc, #164]	@ (800564c <_vfiprintf_r+0x220>)
 80055a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055ac:	2206      	movs	r2, #6
 80055ae:	f7fa fe17 	bl	80001e0 <memchr>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d03f      	beq.n	8005636 <_vfiprintf_r+0x20a>
 80055b6:	4b26      	ldr	r3, [pc, #152]	@ (8005650 <_vfiprintf_r+0x224>)
 80055b8:	bb1b      	cbnz	r3, 8005602 <_vfiprintf_r+0x1d6>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	3307      	adds	r3, #7
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	3308      	adds	r3, #8
 80055c4:	9303      	str	r3, [sp, #12]
 80055c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c8:	443b      	add	r3, r7
 80055ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80055cc:	e76a      	b.n	80054a4 <_vfiprintf_r+0x78>
 80055ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d2:	460c      	mov	r4, r1
 80055d4:	2001      	movs	r0, #1
 80055d6:	e7a8      	b.n	800552a <_vfiprintf_r+0xfe>
 80055d8:	2300      	movs	r3, #0
 80055da:	3401      	adds	r4, #1
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	4619      	mov	r1, r3
 80055e0:	f04f 0c0a 	mov.w	ip, #10
 80055e4:	4620      	mov	r0, r4
 80055e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ea:	3a30      	subs	r2, #48	@ 0x30
 80055ec:	2a09      	cmp	r2, #9
 80055ee:	d903      	bls.n	80055f8 <_vfiprintf_r+0x1cc>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0c6      	beq.n	8005582 <_vfiprintf_r+0x156>
 80055f4:	9105      	str	r1, [sp, #20]
 80055f6:	e7c4      	b.n	8005582 <_vfiprintf_r+0x156>
 80055f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80055fc:	4604      	mov	r4, r0
 80055fe:	2301      	movs	r3, #1
 8005600:	e7f0      	b.n	80055e4 <_vfiprintf_r+0x1b8>
 8005602:	ab03      	add	r3, sp, #12
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	462a      	mov	r2, r5
 8005608:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <_vfiprintf_r+0x228>)
 800560a:	a904      	add	r1, sp, #16
 800560c:	4630      	mov	r0, r6
 800560e:	f7fd fda3 	bl	8003158 <_printf_float>
 8005612:	4607      	mov	r7, r0
 8005614:	1c78      	adds	r0, r7, #1
 8005616:	d1d6      	bne.n	80055c6 <_vfiprintf_r+0x19a>
 8005618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800561a:	07d9      	lsls	r1, r3, #31
 800561c:	d405      	bmi.n	800562a <_vfiprintf_r+0x1fe>
 800561e:	89ab      	ldrh	r3, [r5, #12]
 8005620:	059a      	lsls	r2, r3, #22
 8005622:	d402      	bmi.n	800562a <_vfiprintf_r+0x1fe>
 8005624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005626:	f7fe fad3 	bl	8003bd0 <__retarget_lock_release_recursive>
 800562a:	89ab      	ldrh	r3, [r5, #12]
 800562c:	065b      	lsls	r3, r3, #25
 800562e:	f53f af1f 	bmi.w	8005470 <_vfiprintf_r+0x44>
 8005632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005634:	e71e      	b.n	8005474 <_vfiprintf_r+0x48>
 8005636:	ab03      	add	r3, sp, #12
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	462a      	mov	r2, r5
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <_vfiprintf_r+0x228>)
 800563e:	a904      	add	r1, sp, #16
 8005640:	4630      	mov	r0, r6
 8005642:	f7fe f821 	bl	8003688 <_printf_i>
 8005646:	e7e4      	b.n	8005612 <_vfiprintf_r+0x1e6>
 8005648:	08005ca7 	.word	0x08005ca7
 800564c:	08005cb1 	.word	0x08005cb1
 8005650:	08003159 	.word	0x08003159
 8005654:	08005409 	.word	0x08005409
 8005658:	08005cad 	.word	0x08005cad

0800565c <__swbuf_r>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	460e      	mov	r6, r1
 8005660:	4614      	mov	r4, r2
 8005662:	4605      	mov	r5, r0
 8005664:	b118      	cbz	r0, 800566e <__swbuf_r+0x12>
 8005666:	6a03      	ldr	r3, [r0, #32]
 8005668:	b90b      	cbnz	r3, 800566e <__swbuf_r+0x12>
 800566a:	f7fe f9b9 	bl	80039e0 <__sinit>
 800566e:	69a3      	ldr	r3, [r4, #24]
 8005670:	60a3      	str	r3, [r4, #8]
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	071a      	lsls	r2, r3, #28
 8005676:	d501      	bpl.n	800567c <__swbuf_r+0x20>
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	b943      	cbnz	r3, 800568e <__swbuf_r+0x32>
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f82a 	bl	80056d8 <__swsetup_r>
 8005684:	b118      	cbz	r0, 800568e <__swbuf_r+0x32>
 8005686:	f04f 37ff 	mov.w	r7, #4294967295
 800568a:	4638      	mov	r0, r7
 800568c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	6922      	ldr	r2, [r4, #16]
 8005692:	1a98      	subs	r0, r3, r2
 8005694:	6963      	ldr	r3, [r4, #20]
 8005696:	b2f6      	uxtb	r6, r6
 8005698:	4283      	cmp	r3, r0
 800569a:	4637      	mov	r7, r6
 800569c:	dc05      	bgt.n	80056aa <__swbuf_r+0x4e>
 800569e:	4621      	mov	r1, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f7ff fdf7 	bl	8005294 <_fflush_r>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d1ed      	bne.n	8005686 <__swbuf_r+0x2a>
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	60a3      	str	r3, [r4, #8]
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	6022      	str	r2, [r4, #0]
 80056b6:	701e      	strb	r6, [r3, #0]
 80056b8:	6962      	ldr	r2, [r4, #20]
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	429a      	cmp	r2, r3
 80056be:	d004      	beq.n	80056ca <__swbuf_r+0x6e>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d5e1      	bpl.n	800568a <__swbuf_r+0x2e>
 80056c6:	2e0a      	cmp	r6, #10
 80056c8:	d1df      	bne.n	800568a <__swbuf_r+0x2e>
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f7ff fde1 	bl	8005294 <_fflush_r>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d0d9      	beq.n	800568a <__swbuf_r+0x2e>
 80056d6:	e7d6      	b.n	8005686 <__swbuf_r+0x2a>

080056d8 <__swsetup_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4b29      	ldr	r3, [pc, #164]	@ (8005780 <__swsetup_r+0xa8>)
 80056dc:	4605      	mov	r5, r0
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	460c      	mov	r4, r1
 80056e2:	b118      	cbz	r0, 80056ec <__swsetup_r+0x14>
 80056e4:	6a03      	ldr	r3, [r0, #32]
 80056e6:	b90b      	cbnz	r3, 80056ec <__swsetup_r+0x14>
 80056e8:	f7fe f97a 	bl	80039e0 <__sinit>
 80056ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f0:	0719      	lsls	r1, r3, #28
 80056f2:	d422      	bmi.n	800573a <__swsetup_r+0x62>
 80056f4:	06da      	lsls	r2, r3, #27
 80056f6:	d407      	bmi.n	8005708 <__swsetup_r+0x30>
 80056f8:	2209      	movs	r2, #9
 80056fa:	602a      	str	r2, [r5, #0]
 80056fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	f04f 30ff 	mov.w	r0, #4294967295
 8005706:	e033      	b.n	8005770 <__swsetup_r+0x98>
 8005708:	0758      	lsls	r0, r3, #29
 800570a:	d512      	bpl.n	8005732 <__swsetup_r+0x5a>
 800570c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800570e:	b141      	cbz	r1, 8005722 <__swsetup_r+0x4a>
 8005710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005714:	4299      	cmp	r1, r3
 8005716:	d002      	beq.n	800571e <__swsetup_r+0x46>
 8005718:	4628      	mov	r0, r5
 800571a:	f7ff f8b5 	bl	8004888 <_free_r>
 800571e:	2300      	movs	r3, #0
 8005720:	6363      	str	r3, [r4, #52]	@ 0x34
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	2300      	movs	r3, #0
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	f043 0308 	orr.w	r3, r3, #8
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	b94b      	cbnz	r3, 8005752 <__swsetup_r+0x7a>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005748:	d003      	beq.n	8005752 <__swsetup_r+0x7a>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f883 	bl	8005858 <__smakebuf_r>
 8005752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005756:	f013 0201 	ands.w	r2, r3, #1
 800575a:	d00a      	beq.n	8005772 <__swsetup_r+0x9a>
 800575c:	2200      	movs	r2, #0
 800575e:	60a2      	str	r2, [r4, #8]
 8005760:	6962      	ldr	r2, [r4, #20]
 8005762:	4252      	negs	r2, r2
 8005764:	61a2      	str	r2, [r4, #24]
 8005766:	6922      	ldr	r2, [r4, #16]
 8005768:	b942      	cbnz	r2, 800577c <__swsetup_r+0xa4>
 800576a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800576e:	d1c5      	bne.n	80056fc <__swsetup_r+0x24>
 8005770:	bd38      	pop	{r3, r4, r5, pc}
 8005772:	0799      	lsls	r1, r3, #30
 8005774:	bf58      	it	pl
 8005776:	6962      	ldrpl	r2, [r4, #20]
 8005778:	60a2      	str	r2, [r4, #8]
 800577a:	e7f4      	b.n	8005766 <__swsetup_r+0x8e>
 800577c:	2000      	movs	r0, #0
 800577e:	e7f7      	b.n	8005770 <__swsetup_r+0x98>
 8005780:	200001e8 	.word	0x200001e8

08005784 <_raise_r>:
 8005784:	291f      	cmp	r1, #31
 8005786:	b538      	push	{r3, r4, r5, lr}
 8005788:	4605      	mov	r5, r0
 800578a:	460c      	mov	r4, r1
 800578c:	d904      	bls.n	8005798 <_raise_r+0x14>
 800578e:	2316      	movs	r3, #22
 8005790:	6003      	str	r3, [r0, #0]
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800579a:	b112      	cbz	r2, 80057a2 <_raise_r+0x1e>
 800579c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057a0:	b94b      	cbnz	r3, 80057b6 <_raise_r+0x32>
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f830 	bl	8005808 <_getpid_r>
 80057a8:	4622      	mov	r2, r4
 80057aa:	4601      	mov	r1, r0
 80057ac:	4628      	mov	r0, r5
 80057ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b2:	f000 b817 	b.w	80057e4 <_kill_r>
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d00a      	beq.n	80057d0 <_raise_r+0x4c>
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	d103      	bne.n	80057c6 <_raise_r+0x42>
 80057be:	2316      	movs	r3, #22
 80057c0:	6003      	str	r3, [r0, #0]
 80057c2:	2001      	movs	r0, #1
 80057c4:	e7e7      	b.n	8005796 <_raise_r+0x12>
 80057c6:	2100      	movs	r1, #0
 80057c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80057cc:	4620      	mov	r0, r4
 80057ce:	4798      	blx	r3
 80057d0:	2000      	movs	r0, #0
 80057d2:	e7e0      	b.n	8005796 <_raise_r+0x12>

080057d4 <raise>:
 80057d4:	4b02      	ldr	r3, [pc, #8]	@ (80057e0 <raise+0xc>)
 80057d6:	4601      	mov	r1, r0
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	f7ff bfd3 	b.w	8005784 <_raise_r>
 80057de:	bf00      	nop
 80057e0:	200001e8 	.word	0x200001e8

080057e4 <_kill_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d07      	ldr	r5, [pc, #28]	@ (8005804 <_kill_r+0x20>)
 80057e8:	2300      	movs	r3, #0
 80057ea:	4604      	mov	r4, r0
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	f7fb fe5b 	bl	80014ac <_kill>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d102      	bne.n	8005800 <_kill_r+0x1c>
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	b103      	cbz	r3, 8005800 <_kill_r+0x1c>
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	bd38      	pop	{r3, r4, r5, pc}
 8005802:	bf00      	nop
 8005804:	200008bc 	.word	0x200008bc

08005808 <_getpid_r>:
 8005808:	f7fb be48 	b.w	800149c <_getpid>

0800580c <__swhatbuf_r>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	460c      	mov	r4, r1
 8005810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005814:	2900      	cmp	r1, #0
 8005816:	b096      	sub	sp, #88	@ 0x58
 8005818:	4615      	mov	r5, r2
 800581a:	461e      	mov	r6, r3
 800581c:	da0d      	bge.n	800583a <__swhatbuf_r+0x2e>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005824:	f04f 0100 	mov.w	r1, #0
 8005828:	bf14      	ite	ne
 800582a:	2340      	movne	r3, #64	@ 0x40
 800582c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005830:	2000      	movs	r0, #0
 8005832:	6031      	str	r1, [r6, #0]
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	b016      	add	sp, #88	@ 0x58
 8005838:	bd70      	pop	{r4, r5, r6, pc}
 800583a:	466a      	mov	r2, sp
 800583c:	f000 f848 	bl	80058d0 <_fstat_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	dbec      	blt.n	800581e <__swhatbuf_r+0x12>
 8005844:	9901      	ldr	r1, [sp, #4]
 8005846:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800584a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800584e:	4259      	negs	r1, r3
 8005850:	4159      	adcs	r1, r3
 8005852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005856:	e7eb      	b.n	8005830 <__swhatbuf_r+0x24>

08005858 <__smakebuf_r>:
 8005858:	898b      	ldrh	r3, [r1, #12]
 800585a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800585c:	079d      	lsls	r5, r3, #30
 800585e:	4606      	mov	r6, r0
 8005860:	460c      	mov	r4, r1
 8005862:	d507      	bpl.n	8005874 <__smakebuf_r+0x1c>
 8005864:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	2301      	movs	r3, #1
 800586e:	6163      	str	r3, [r4, #20]
 8005870:	b003      	add	sp, #12
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005874:	ab01      	add	r3, sp, #4
 8005876:	466a      	mov	r2, sp
 8005878:	f7ff ffc8 	bl	800580c <__swhatbuf_r>
 800587c:	9f00      	ldr	r7, [sp, #0]
 800587e:	4605      	mov	r5, r0
 8005880:	4639      	mov	r1, r7
 8005882:	4630      	mov	r0, r6
 8005884:	f7ff f874 	bl	8004970 <_malloc_r>
 8005888:	b948      	cbnz	r0, 800589e <__smakebuf_r+0x46>
 800588a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800588e:	059a      	lsls	r2, r3, #22
 8005890:	d4ee      	bmi.n	8005870 <__smakebuf_r+0x18>
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	e7e2      	b.n	8005864 <__smakebuf_r+0xc>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	6020      	str	r0, [r4, #0]
 80058a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a6:	81a3      	strh	r3, [r4, #12]
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058ae:	b15b      	cbz	r3, 80058c8 <__smakebuf_r+0x70>
 80058b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058b4:	4630      	mov	r0, r6
 80058b6:	f000 f81d 	bl	80058f4 <_isatty_r>
 80058ba:	b128      	cbz	r0, 80058c8 <__smakebuf_r+0x70>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	431d      	orrs	r5, r3
 80058cc:	81a5      	strh	r5, [r4, #12]
 80058ce:	e7cf      	b.n	8005870 <__smakebuf_r+0x18>

080058d0 <_fstat_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	@ (80058f0 <_fstat_r+0x20>)
 80058d4:	2300      	movs	r3, #0
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	f7fb fe29 	bl	8001534 <_fstat>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d102      	bne.n	80058ec <_fstat_r+0x1c>
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	b103      	cbz	r3, 80058ec <_fstat_r+0x1c>
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	bd38      	pop	{r3, r4, r5, pc}
 80058ee:	bf00      	nop
 80058f0:	200008bc 	.word	0x200008bc

080058f4 <_isatty_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d06      	ldr	r5, [pc, #24]	@ (8005910 <_isatty_r+0x1c>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fb fe28 	bl	8001554 <_isatty>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_isatty_r+0x1a>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_isatty_r+0x1a>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	200008bc 	.word	0x200008bc

08005914 <_init>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	bf00      	nop
 8005918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591a:	bc08      	pop	{r3}
 800591c:	469e      	mov	lr, r3
 800591e:	4770      	bx	lr

08005920 <_fini>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr
