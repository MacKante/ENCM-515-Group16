
lab2_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08005a98  08005a98  00015a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  00020424  2**0
                  CONTENTS
  4 .ARM          00000008  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e2c  08005e2c  00020424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08005e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015e2c  20000424  08006258  00020424  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016250  08006258  00026250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020424  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc3d  00000000  00000000  00020497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c8  00000000  00000000  0002e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3b  00000000  00000000  00031100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003412  00000000  00000000  00031b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fadf  00000000  00000000  00034f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ab05  00000000  00000000  00044a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004720  00000000  00000000  000df534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000e3c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000424 	.word	0x20000424
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a7c 	.word	0x08005a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000428 	.word	0x20000428
 80001dc:	08005a7c 	.word	0x08005a7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ed4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	e000      	b.n	8000ee0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ede:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <FloatFilterInit>:
float32_t newdata[NUMBER_OF_SAMPLES];

/* this the function prototype for initializing the filter (specifically the history) */
void FloatFilterInit(void);

void FloatFilterInit(void) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  // set all the history to zero
  for (int i = 0; i < 31; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e009      	b.n	8000f24 <FloatFilterInit+0x20>
    history[i] = 0;
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <FloatFilterInit+0x34>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 31; i++) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3301      	adds	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b1e      	cmp	r3, #30
 8000f28:	ddf2      	ble.n	8000f10 <FloatFilterInit+0xc>
  // // set all the newdata to zero
  // for (int i = 0; i < NUMBER_OF_SAMPLES; i++) {
  //   newdata[i] = (float32_t)(*(data + i));
  // }

}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000440 	.word	0x20000440

08000f3c <FloatFilterGet>:
 * This function should return a new output
 */
float32_t FloatFilterGet(float new_sample);

/* here is the function that does the filtering */
float32_t FloatFilterGet(float32_t newsample) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	ed87 0a01 	vstr	s0, [r7, #4]
	// set the new sample as the head
	history[0] = newsample;
 8000f46:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <FloatFilterGet+0x8c>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6013      	str	r3, [r2, #0]

	// set up and do our convolution
  float32_t accumulator = 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 31; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	e016      	b.n	8000f86 <FloatFilterGet+0x4a>
    accumulator += history[i] * filter_taps[i];
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <FloatFilterGet+0x8c>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <FloatFilterGet+0x90>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f74:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (int i = 0; i < 31; i++) {
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b1e      	cmp	r3, #30
 8000f8a:	dde5      	ble.n	8000f58 <FloatFilterGet+0x1c>
  }

	// shuffle the history along for the next one?
  for (int i = 30; i > 0; i--) {
 8000f8c:	231e      	movs	r3, #30
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e00d      	b.n	8000fae <FloatFilterGet+0x72>
    history[i + 1] = history[i];
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <FloatFilterGet+0x8c>)
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	440a      	add	r2, r1
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <FloatFilterGet+0x8c>)
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	601a      	str	r2, [r3, #0]
  for (int i = 30; i > 0; i--) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dcee      	bgt.n	8000f92 <FloatFilterGet+0x56>
  }

	return accumulator;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000440 	.word	0x20000440
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000fd6:	f000 fbe1 	bl	800179c <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 ff94 	bl	8002f08 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f001 ff91 	bl	8002f08 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f001 ff8e 	bl	8002f08 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f001 ff8b 	bl	8002f08 <BSP_LED_Init>

  /* Configure the system clock to 100 MHz */
  SystemClock_Config();
 8000ff2:	f000 f8e5 	bl	80011c0 <SystemClock_Config>

  /* Configure GPIO so that we can probe PB2 with an Oscilloscope */
  GPIOA_Init();
 8000ff6:	f000 f98d 	bl	8001314 <GPIOA_Init>

  /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f002 f815 	bl	800302c <BSP_PB_Init>

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <main+0x1ac>)
 8001004:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <main+0x1b0>)
 8001006:	601a      	str	r2, [r3, #0]

  /* Initialize TIM3 peripheral to toggle with a frequency of ~ 8 kHz
   * System clock is 100 MHz and TIM3 is counting at the rate of the system clock
   * so 100 M / 8 k is 12500
   */
  TimHandle.Init.Period = 12499;
 8001008:	4b5c      	ldr	r3, [pc, #368]	; (800117c <main+0x1ac>)
 800100a:	f243 02d3 	movw	r2, #12499	; 0x30d3
 800100e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 0;
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <main+0x1ac>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8001016:	4b59      	ldr	r3, [pc, #356]	; (800117c <main+0x1ac>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <main+0x1ac>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <main+0x1ac>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001028:	4854      	ldr	r0, [pc, #336]	; (800117c <main+0x1ac>)
 800102a:	f001 fcf7 	bl	8002a1c <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <main+0x68>
  {
	  /* Initialization Error */
	  Error_Handler();
 8001034:	f000 f968 	bl	8001308 <Error_Handler>
  }

  ITM_Port32(30) = 0;
 8001038:	4b52      	ldr	r3, [pc, #328]	; (8001184 <main+0x1b4>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800103e:	484f      	ldr	r0, [pc, #316]	; (800117c <main+0x1ac>)
 8001040:	f001 fd3c 	bl	8002abc <HAL_TIM_Base_Start_IT>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <main+0x7e>
  {
	  /* Starting Error */
	  Error_Handler();
 800104a:	f000 f95d 	bl	8001308 <Error_Handler>
   ******************************************************************************
   ******************************************************************************
   ******************************************************************************
   */

  FloatFilterInit();
 800104e:	f7ff ff59 	bl	8000f04 <FloatFilterInit>
  for (int i = 0; i < NUMBER_OF_SAMPLES; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e015      	b.n	8001084 <main+0xb4>
    newdata[i] = FloatFilterGet(*(data + i));
 8001058:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <main+0x1b8>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f7ff ff67 	bl	8000f3c <FloatFilterGet>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	4a46      	ldr	r2, [pc, #280]	; (800118c <main+0x1bc>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < NUMBER_OF_SAMPLES; i++){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f245 6221 	movw	r2, #22049	; 0x5621
 800108a:	4293      	cmp	r3, r2
 800108c:	dde4      	ble.n	8001058 <main+0x88>

  while (1) {


#ifdef FUNCTIONAL_TEST
		if (sample_count < 64000) {
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <main+0x1c0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001096:	da1a      	bge.n	80010ce <main+0xfe>
			  newSampleL = (int16_t)raw_audio[sample_count];
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <main+0x1c4>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <main+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <main+0x1c8>)
 80010aa:	801a      	strh	r2, [r3, #0]
			  newSampleR = (int16_t)(raw_audio[sample_count] >> 16);
 80010ac:	4b39      	ldr	r3, [pc, #228]	; (8001194 <main+0x1c4>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b37      	ldr	r3, [pc, #220]	; (8001190 <main+0x1c0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	141b      	asrs	r3, r3, #16
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <main+0x1cc>)
 80010c0:	801a      	strh	r2, [r3, #0]
			  sample_count++;
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <main+0x1c0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <main+0x1c0>)
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e002      	b.n	80010d4 <main+0x104>
		  } else {
			  sample_count = 0;
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <main+0x1c0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

#ifndef FUNCTIONAL_TEST
	if (new_sample_flag == 1) {
#endif

		filteredSampleL = ProcessSample(newSampleL,history_l); // "L"
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <main+0x1c8>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	4931      	ldr	r1, [pc, #196]	; (80011a0 <main+0x1d0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f947 	bl	8001370 <ProcessSample>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <main+0x1d4>)
 80010e8:	801a      	strh	r2, [r3, #0]
		new_sample_flag = 0;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <main+0x1d8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
		if (i < NUMBER_OF_TAPS-1) {
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <main+0x1dc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2bda      	cmp	r3, #218	; 0xda
 80010f6:	dc08      	bgt.n	800110a <main+0x13a>
			filteredSampleL = 0;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <main+0x1d4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	801a      	strh	r2, [r3, #0]
			i++;
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <main+0x1dc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <main+0x1dc>)
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e025      	b.n	8001156 <main+0x186>
		} else {
			if (bufchoice == 0) {
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <main+0x1e0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10e      	bne.n	8001130 <main+0x160>
				filteredOutBufferA[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL; // copy the filtered output to both channels
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <main+0x1d4>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <main+0x1d4>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001120:	4619      	mov	r1, r3
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <main+0x1e4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	440a      	add	r2, r1
 8001128:	4923      	ldr	r1, [pc, #140]	; (80011b8 <main+0x1e8>)
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800112e:	e00d      	b.n	800114c <main+0x17c>
			} else {
				filteredOutBufferB[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <main+0x1d4>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <main+0x1d4>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	4619      	mov	r1, r3
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <main+0x1e4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	440a      	add	r2, r1
 8001146:	491d      	ldr	r1, [pc, #116]	; (80011bc <main+0x1ec>)
 8001148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			k++;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <main+0x1e4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <main+0x1e4>)
 8001154:	6013      	str	r3, [r2, #0]
	}
#endif

	// once a buffer is full, we can swap to fill up the other buffer
	// this is probably not going to be used in Lab2
	if (k == BUFFER_SIZE) {
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <main+0x1e4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b20      	cmp	r3, #32
 800115c:	d197      	bne.n	800108e <main+0xbe>
		k = 0;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0x1e4>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
		bufchoice = bufchoice == 0 ? 1 : 0;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <main+0x1e0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf0c      	ite	eq
 800116c:	2301      	moveq	r3, #1
 800116e:	2300      	movne	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <main+0x1e0>)
 8001176:	601a      	str	r2, [r3, #0]
		if (sample_count < 64000) {
 8001178:	e789      	b.n	800108e <main+0xbe>
 800117a:	bf00      	nop
 800117c:	20015d48 	.word	0x20015d48
 8001180:	40000400 	.word	0x40000400
 8001184:	e0000078 	.word	0xe0000078
 8001188:	20000000 	.word	0x20000000
 800118c:	200004bc 	.word	0x200004bc
 8001190:	20015f54 	.word	0x20015f54
 8001194:	20000080 	.word	0x20000080
 8001198:	20015f58 	.word	0x20015f58
 800119c:	20015f5a 	.word	0x20015f5a
 80011a0:	20015d90 	.word	0x20015d90
 80011a4:	20015f5c 	.word	0x20015f5c
 80011a8:	20015f50 	.word	0x20015f50
 80011ac:	20016064 	.word	0x20016064
 80011b0:	20016060 	.word	0x20016060
 80011b4:	20016068 	.word	0x20016068
 80011b8:	20015f60 	.word	0x20015f60
 80011bc:	20015fe0 	.word	0x20015fe0

080011c0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <SystemClock_Config+0xac>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <SystemClock_Config+0xac>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <SystemClock_Config+0xac>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <SystemClock_Config+0xb0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a21      	ldr	r2, [pc, #132]	; (8001270 <SystemClock_Config+0xb0>)
 80011ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <SystemClock_Config+0xb0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8001206:	2310      	movs	r3, #16
 8001208:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001216:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800121c:	2304      	movs	r3, #4
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001220:	2307      	movs	r3, #7
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ff93 	bl	8002154 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001234:	f000 f868 	bl	8001308 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001238:	230f      	movs	r3, #15
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001252:	2103      	movs	r1, #3
 8001254:	4618      	mov	r0, r3
 8001256:	f001 f9f5 	bl	8002644 <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001260:	f000 f852 	bl	8001308 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3750      	adds	r7, #80	; 0x50
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  if (KEY_BUTTON_PIN == GPIO_Pin)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d109      	bne.n	8001298 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8001284:	bf00      	nop
 8001286:	2000      	movs	r0, #0
 8001288:	f001 ff26 	bl	80030d8 <BSP_PB_GetState>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f9      	bne.n	8001286 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8001292:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
  }
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20015d44 	.word	0x20015d44

080012a4 <HAL_TIM_PeriodElapsedCallback>:
}

// This timer callback should trigger every 1/8000 Hz, and it emulates
// the idea of receiving a new sample peridiocally
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
//  BSP_LED_Toggle(LED4);
//  HAL_GPIO_TogglePin(SCOPE_CHECK_GPIO_Port, SCOPE_CHECK_Pin);

	// If we "miss" processing a sample, the new_sample_flag will still be
	// high on the trigger of the interrupt
	if (new_sample_flag == 1) {
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
		ITM_Port32(30) = 10;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012b6:	220a      	movs	r2, #10
 80012b8:	601a      	str	r2, [r3, #0]

		if (sample_count >= 64000) sample_count = 0;
		new_sample_flag = 1;
  }
#endif
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20015f50 	.word	0x20015f50
 80012cc:	e0000078 	.word	0xe0000078

080012d0 <_write>:

int _write(int file, char* ptr, int len) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e009      	b.n	80012f6 <_write+0x26>
		ITM_SendChar(*ptr++);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fde2 	bl	8000eb4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf1      	blt.n	80012e2 <_write+0x12>
	}
	return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 800130c:	2002      	movs	r0, #2
 800130e:	f001 fe73 	bl	8002ff8 <BSP_LED_On>
  while(1)
 8001312:	e7fe      	b.n	8001312 <Error_Handler+0xa>

08001314 <GPIOA_Init>:
  {
  }
}

static void GPIOA_Init(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <GPIOA_Init+0x54>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <GPIOA_Init+0x54>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <GPIOA_Init+0x54>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : SCOPE_CHECK_Pin */
	  GPIO_InitStruct.Pin = SCOPE_CHECK_Pin;
 8001344:	2302      	movs	r3, #2
 8001346:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(SCOPE_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <GPIOA_Init+0x58>)
 800135a:	f000 fd2d 	bl	8001db8 <HAL_GPIO_Init>

}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400

08001370 <ProcessSample>:

static int16_t ProcessSample(int16_t newsample, int16_t* history) {
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	80fb      	strh	r3, [r7, #6]

	// set the new sample as the head
	history[0] = newsample;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	88fa      	ldrh	r2, [r7, #6]
 8001380:	801a      	strh	r2, [r3, #0]

	// set up and do our convolution
	int tap = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
	int32_t accumulator = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
	for (tap = 0; tap < NUMBER_OF_TAPS; tap++) {
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e012      	b.n	80013b6 <ProcessSample+0x46>
		accumulator += (int32_t)filter_coeffs[tap] * (int32_t)history[tap];
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <ProcessSample+0xc0>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001398:	4619      	mov	r1, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
	for (tap = 0; tap < NUMBER_OF_TAPS; tap++) {
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2bdb      	cmp	r3, #219	; 0xdb
 80013ba:	dde9      	ble.n	8001390 <ProcessSample+0x20>
	}

	// shuffle things along for the next one?
	for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80013bc:	23da      	movs	r3, #218	; 0xda
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00e      	b.n	80013e0 <ProcessSample+0x70>
		history[tap+1] = history[tap];
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	441a      	add	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	440b      	add	r3, r1
 80013d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013d8:	801a      	strh	r2, [r3, #0]
	for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3b01      	subs	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	daed      	bge.n	80013c2 <ProcessSample+0x52>
	}

	if (accumulator > 0x3FFFFFFF) {
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ec:	db08      	blt.n	8001400 <ProcessSample+0x90>
		accumulator = 0x3FFFFFFF;
 80013ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80013f2:	613b      	str	r3, [r7, #16]
		overflow_count++;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <ProcessSample+0xc4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <ProcessSample+0xc4>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <ProcessSample+0xa8>
	} else if (accumulator < -0x40000000) {
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001406:	da07      	bge.n	8001418 <ProcessSample+0xa8>
		accumulator = -0x40000000;
 8001408:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800140c:	613b      	str	r3, [r7, #16]
		underflow_count++;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <ProcessSample+0xc8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <ProcessSample+0xc8>)
 8001416:	6013      	str	r3, [r2, #0]
	}

	int16_t temp = (int16_t)(accumulator >> 15);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	13db      	asrs	r3, r3, #15
 800141c:	81fb      	strh	r3, [r7, #14]

	return temp;
 800141e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001422:	4618      	mov	r0, r3
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000084 	.word	0x20000084
 8001434:	20015f48 	.word	0x20015f48
 8001438:	20015f4c 	.word	0x20015f4c

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147a:	2007      	movs	r0, #7
 800147c:	f000 fad0 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2104      	movs	r1, #4
 80014b4:	201d      	movs	r0, #29
 80014b6:	f000 fabe 	bl	8001a36 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80014ba:	201d      	movs	r0, #29
 80014bc:	f000 fad7 	bl	8001a6e <HAL_NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800

080014cc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001520:	f000 f98e 	bl	8001840 <HAL_IncTick>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800152c:	2001      	movs	r0, #1
 800152e:	f000 fdf9 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}

08001536 <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 800153a:	2010      	movs	r0, #16
 800153c:	f000 fdf2 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <DMA1_Stream7_IRQHandler+0x14>)
 800154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154c:	4618      	mov	r0, r3
 800154e:	f000 faa9 	bl	8001aa4 <HAL_DMA_IRQHandler>
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20016074 	.word	0x20016074

0800155c <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2S IT Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <DMA1_Stream3_IRQHandler+0x14>)
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa9d 	bl	8001aa4 <HAL_DMA_IRQHandler>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200160bc 	.word	0x200160bc

08001574 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM3_IRQHandler+0x10>)
 800157a:	f001 fb01 	bl	8002b80 <HAL_TIM_IRQHandler>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20015d48 	.word	0x20015d48

08001588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:

int _kill(int pid, int sig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a2:	f002 fb6d 	bl	8003c80 <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
	return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ca:	e7fe      	b.n	80015ca <_exit+0x12>

080015cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	4601      	mov	r1, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf0      	blt.n	80015de <_read+0x12>
	}

return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f002 faee 	bl	8003c80 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	2001606c 	.word	0x2001606c
 80016d8:	20016250 	.word	0x20016250

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <SystemInit+0x60>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <SystemInit+0x60>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <SystemInit+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <SystemInit+0x64>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <SystemInit+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <SystemInit+0x64>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <SystemInit+0x64>)
 8001708:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800170c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <SystemInit+0x64>)
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <SystemInit+0x68>)
 8001716:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <SystemInit+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <SystemInit+0x64>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x60>)
 800172c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001730:	609a      	str	r2, [r3, #8]
#endif
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	40023800 	.word	0x40023800
 8001744:	24003010 	.word	0x24003010

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001772:	f7ff ffb3 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f002 fa89 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fc29 	bl	8000fd0 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800178c:	08005e34 	.word	0x08005e34
  ldr r2, =_sbss
 8001790:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 8001794:	20016250 	.word	0x20016250

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f92b 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe34 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f943 	bl	8001a8a <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f90b 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000023c 	.word	0x2000023c
 8001838:	20000244 	.word	0x20000244
 800183c:	20000240 	.word	0x20000240

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000244 	.word	0x20000244
 8001864:	20016070 	.word	0x20016070

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20016070 	.word	0x20016070

08001880 <__NVIC_SetPriorityGrouping>:
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ab0:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <HAL_DMA_IRQHandler+0x248>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a8e      	ldr	r2, [pc, #568]	; (8001cf0 <HAL_DMA_IRQHandler+0x24c>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2208      	movs	r2, #8
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d01a      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0204 	bic.w	r2, r2, #4
 8001af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	2208      	movs	r2, #8
 8001afe:	409a      	lsls	r2, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2201      	movs	r2, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d012      	beq.n	8001b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f043 0202 	orr.w	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00b      	beq.n	8001b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	2204      	movs	r2, #4
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b80:	2210      	movs	r2, #16
 8001b82:	409a      	lsls	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d043      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03c      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d018      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d024      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
 8001bd2:	e01f      	b.n	8001c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e016      	b.n	8001c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0208 	bic.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	2220      	movs	r2, #32
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 808f 	beq.w	8001d44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8087 	beq.w	8001d44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d136      	bne.n	8001cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0216 	bic.w	r2, r2, #22
 8001c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <HAL_DMA_IRQHandler+0x1da>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0208 	bic.w	r2, r2, #8
 8001c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	223f      	movs	r2, #63	; 0x3f
 8001c94:	409a      	lsls	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d07e      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
        }
        return;
 8001cba:	e079      	b.n	8001db0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01d      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d031      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
 8001ce8:	e02c      	b.n	8001d44 <HAL_DMA_IRQHandler+0x2a0>
 8001cea:	bf00      	nop
 8001cec:	2000023c 	.word	0x2000023c
 8001cf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
 8001d04:	e01e      	b.n	8001d44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10f      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0210 	bic.w	r2, r2, #16
 8001d22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d032      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d022      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3301      	adds	r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d307      	bcc.n	8001d8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f2      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x2cc>
 8001d8a:	e000      	b.n	8001d8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
 8001dae:	e000      	b.n	8001db2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001db0:	bf00      	nop
    }
  }
}
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e159      	b.n	8002088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8148 	bne.w	8002082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	69b9      	ldr	r1, [r7, #24]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a2 	beq.w	8002082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0x202>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2f4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x1fe>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_GPIO_Init+0x2f8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <HAL_GPIO_Init+0x2fc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x1f6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a45      	ldr	r2, [pc, #276]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x1f2>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	4935      	ldr	r1, [pc, #212]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x304>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_GPIO_Init+0x304>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_GPIO_Init+0x304>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	f67f aea2 	bls.w	8001dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40013c00 	.word	0x40013c00

080020c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800210c:	e003      	b.n	8002116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	619a      	str	r2, [r3, #24]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f896 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e267      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d075      	beq.n	800225e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d00c      	beq.n	8002198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002186:	2b08      	cmp	r3, #8
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d05b      	beq.n	800225c <HAL_RCC_OscConfig+0x108>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e242      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x74>
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xb0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b70      	ldr	r3, [pc, #448]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6f      	ldr	r2, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6c      	ldr	r2, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xb0>
 80021ec:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a68      	ldr	r2, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a65      	ldr	r2, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fb2c 	bl	8001868 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff fb28 	bl	8001868 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e207      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b5b      	ldr	r3, [pc, #364]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xc0>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fb18 	bl	8001868 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fb14 	bl	8001868 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1f3      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b51      	ldr	r3, [pc, #324]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0xe8>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x152>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1c7      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4937      	ldr	r1, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x244>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7ff facd 	bl	8001868 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d2:	f7ff fac9 	bl	8001868 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a8      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b28      	ldr	r3, [pc, #160]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4925      	ldr	r1, [pc, #148]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x244>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff faac 	bl	8001868 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff faa8 	bl	8001868 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e187      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d036      	beq.n	80023ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_RCC_OscConfig+0x248>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff fa8c 	bl	8001868 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fa88 	bl	8001868 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e167      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x200>
 8002372:	e01b      	b.n	80023ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_OscConfig+0x248>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff fa75 	bl	8001868 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e00e      	b.n	80023a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002382:	f7ff fa71 	bl	8001868 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d907      	bls.n	80023a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e150      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
 8002394:	40023800 	.word	0x40023800
 8002398:	42470000 	.word	0x42470000
 800239c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ea      	bne.n	8002382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8097 	beq.w	80024e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b7d      	ldr	r3, [pc, #500]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a7c      	ldr	r2, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b7a      	ldr	r3, [pc, #488]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7ff fa31 	bl	8001868 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7ff fa2d 	bl	8001868 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e10c      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x2ea>
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	e01c      	b.n	8002478 <HAL_RCC_OscConfig+0x324>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x30c>
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a5b      	ldr	r2, [pc, #364]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x324>
 8002460:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002472:	f023 0304 	bic.w	r3, r3, #4
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d015      	beq.n	80024ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7ff f9f2 	bl	8001868 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7ff f9ee 	bl	8001868 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0cb      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ee      	beq.n	8002488 <HAL_RCC_OscConfig+0x334>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7ff f9dc 	bl	8001868 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff f9d8 	bl	8001868 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0b5      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ee      	bne.n	80024b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a1 	beq.w	8002634 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f2:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d05c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d141      	bne.n	800258a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCC_OscConfig+0x478>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff f9ac 	bl	8001868 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002514:	f7ff f9a8 	bl	8001868 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e087      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	019b      	lsls	r3, r3, #6
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	491b      	ldr	r1, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x478>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff f981 	bl	8001868 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff f97d 	bl	8001868 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e05c      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x416>
 8002588:	e054      	b.n	8002634 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0x478>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff f96a 	bl	8001868 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff f966 	bl	8001868 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e045      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x444>
 80025b6:	e03d      	b.n	8002634 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e038      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4ec>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d028      	beq.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d11a      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002608:	4293      	cmp	r3, r2
 800260a:	d111      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	3b01      	subs	r3, #1
 800261a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0cc      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d90c      	bls.n	8002680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b63      	ldr	r3, [pc, #396]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b8      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	494d      	ldr	r1, [pc, #308]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d044      	beq.n	8002764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d119      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e07f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e067      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4934      	ldr	r1, [pc, #208]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002734:	f7ff f898 	bl	8001868 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7ff f894 	bl	8001868 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e04f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d20c      	bcs.n	800278c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4916      	ldr	r1, [pc, #88]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ca:	f000 f821 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	490a      	ldr	r1, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	5ccb      	ldrb	r3, [r1, r3]
 80027de:	fa22 f303 	lsr.w	r3, r2, r3
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fff8 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023c00 	.word	0x40023c00
 8002800:	40023800 	.word	0x40023800
 8002804:	08005a98 	.word	0x08005a98
 8002808:	2000023c 	.word	0x2000023c
 800280c:	20000240 	.word	0x20000240

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002814:	b094      	sub	sp, #80	; 0x50
 8002816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	647b      	str	r3, [r7, #68]	; 0x44
 800281c:	2300      	movs	r3, #0
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002820:	2300      	movs	r3, #0
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d00d      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x40>
 8002834:	2b08      	cmp	r3, #8
 8002836:	f200 80e1 	bhi.w	80029fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x34>
 800283e:	2b04      	cmp	r3, #4
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x3a>
 8002842:	e0db      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002848:	e0db      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284a:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x208>)
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800284e:	e0d8      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002858:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285a:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d063      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	2200      	movs	r2, #0
 800286e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002870:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
 800287a:	2300      	movs	r3, #0
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
 800287e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002882:	4622      	mov	r2, r4
 8002884:	462b      	mov	r3, r5
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	0159      	lsls	r1, r3, #5
 8002890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002894:	0150      	lsls	r0, r2, #5
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4621      	mov	r1, r4
 800289c:	1a51      	subs	r1, r2, r1
 800289e:	6139      	str	r1, [r7, #16]
 80028a0:	4629      	mov	r1, r5
 80028a2:	eb63 0301 	sbc.w	r3, r3, r1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b4:	4659      	mov	r1, fp
 80028b6:	018b      	lsls	r3, r1, #6
 80028b8:	4651      	mov	r1, sl
 80028ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028be:	4651      	mov	r1, sl
 80028c0:	018a      	lsls	r2, r1, #6
 80028c2:	4651      	mov	r1, sl
 80028c4:	ebb2 0801 	subs.w	r8, r2, r1
 80028c8:	4659      	mov	r1, fp
 80028ca:	eb63 0901 	sbc.w	r9, r3, r1
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028e2:	4690      	mov	r8, r2
 80028e4:	4699      	mov	r9, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	eb18 0303 	adds.w	r3, r8, r3
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	462b      	mov	r3, r5
 80028f0:	eb49 0303 	adc.w	r3, r9, r3
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002902:	4629      	mov	r1, r5
 8002904:	024b      	lsls	r3, r1, #9
 8002906:	4621      	mov	r1, r4
 8002908:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800290c:	4621      	mov	r1, r4
 800290e:	024a      	lsls	r2, r1, #9
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002916:	2200      	movs	r2, #0
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
 800291a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800291c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002920:	f7fe f94a 	bl	8000bb8 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800292c:	e058      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	2200      	movs	r2, #0
 8002936:	4618      	mov	r0, r3
 8002938:	4611      	mov	r1, r2
 800293a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002948:	4642      	mov	r2, r8
 800294a:	464b      	mov	r3, r9
 800294c:	f04f 0000 	mov.w	r0, #0
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	0159      	lsls	r1, r3, #5
 8002956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295a:	0150      	lsls	r0, r2, #5
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4641      	mov	r1, r8
 8002962:	ebb2 0a01 	subs.w	sl, r2, r1
 8002966:	4649      	mov	r1, r9
 8002968:	eb63 0b01 	sbc.w	fp, r3, r1
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002978:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800297c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002980:	ebb2 040a 	subs.w	r4, r2, sl
 8002984:	eb63 050b 	sbc.w	r5, r3, fp
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	00eb      	lsls	r3, r5, #3
 8002992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002996:	00e2      	lsls	r2, r4, #3
 8002998:	4614      	mov	r4, r2
 800299a:	461d      	mov	r5, r3
 800299c:	4643      	mov	r3, r8
 800299e:	18e3      	adds	r3, r4, r3
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	464b      	mov	r3, r9
 80029a4:	eb45 0303 	adc.w	r3, r5, r3
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029b6:	4629      	mov	r1, r5
 80029b8:	028b      	lsls	r3, r1, #10
 80029ba:	4621      	mov	r1, r4
 80029bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c0:	4621      	mov	r1, r4
 80029c2:	028a      	lsls	r2, r1, #10
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ca:	2200      	movs	r2, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	61fa      	str	r2, [r7, #28]
 80029d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d4:	f7fe f8f0 	bl	8000bb8 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4613      	mov	r3, r2
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x204>)
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3750      	adds	r7, #80	; 0x50
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	00f42400 	.word	0x00f42400
 8002a18:	007a1200 	.word	0x007a1200

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fd22 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 f9c0 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e044      	b.n	8002b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d018      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x6c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afe:	d013      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x6c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x6c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x6c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x6c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d111      	bne.n	8002b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d010      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	e007      	b.n	8002b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40000c00 	.word	0x40000c00
 8002b7c:	40014000 	.word	0x40014000

08002b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d122      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d11b      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0202 	mvn.w	r2, #2
 8002bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8ee 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e005      	b.n	8002bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8e0 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f8f1 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d122      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0204 	mvn.w	r2, #4
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8c4 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8b6 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f8c7 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d11b      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0208 	mvn.w	r2, #8
 8002c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f89a 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f88c 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f89d 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0210 	mvn.w	r2, #16
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2208      	movs	r2, #8
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f870 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f862 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f873 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fad0 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8e2 	bl	8002ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f838 	bl	8002dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0220 	mvn.w	r2, #32
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8ac 	bl	8002ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <TIM_Base_SetConfig+0xe4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <TIM_Base_SetConfig+0xe8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <TIM_Base_SetConfig+0xec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <TIM_Base_SetConfig+0xf0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <TIM_Base_SetConfig+0xe4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01b      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d017      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <TIM_Base_SetConfig+0xe8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <TIM_Base_SetConfig+0xec>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00f      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <TIM_Base_SetConfig+0xf0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <TIM_Base_SetConfig+0xf4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <TIM_Base_SetConfig+0xf8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <TIM_Base_SetConfig+0x8a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <TIM_Base_SetConfig+0xfc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d108      	bne.n	8002e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <TIM_Base_SetConfig+0xe4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800

08002ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10e      	bne.n	8002f36 <BSP_LED_Init+0x2e>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4a32      	ldr	r2, [pc, #200]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6313      	str	r3, [r2, #48]	; 0x30
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	e034      	b.n	8002fa0 <BSP_LED_Init+0x98>
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10e      	bne.n	8002f5a <BSP_LED_Init+0x52>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	4a29      	ldr	r2, [pc, #164]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	e022      	b.n	8002fa0 <BSP_LED_Init+0x98>
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d10e      	bne.n	8002f7e <BSP_LED_Init+0x76>
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	e010      	b.n	8002fa0 <BSP_LED_Init+0x98>
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d10d      	bne.n	8002fa0 <BSP_LED_Init+0x98>
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f8e:	f043 0308 	orr.w	r3, r3, #8
 8002f92:	6313      	str	r3, [r2, #48]	; 0x30
 8002f94:	4b15      	ldr	r3, [pc, #84]	; (8002fec <BSP_LED_Init+0xe4>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <BSP_LED_Init+0xe8>)
 8002fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <BSP_LED_Init+0xec>)
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	f107 021c 	add.w	r2, r7, #28
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fef7 	bl	8001db8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <BSP_LED_Init+0xec>)
 8002fce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <BSP_LED_Init+0xe8>)
 8002fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7ff f887 	bl	80020f0 <HAL_GPIO_WritePin>
}
 8002fe2:	bf00      	nop
 8002fe4:	3730      	adds	r7, #48	; 0x30
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08005aa8 	.word	0x08005aa8
 8002ff4:	20000248 	.word	0x20000248

08002ff8 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <BSP_LED_On+0x2c>)
 8003006:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	4a06      	ldr	r2, [pc, #24]	; (8003028 <BSP_LED_On+0x30>)
 800300e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003012:	2201      	movs	r2, #1
 8003014:	4619      	mov	r1, r3
 8003016:	f7ff f86b 	bl	80020f0 <HAL_GPIO_WritePin>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000248 	.word	0x20000248
 8003028:	08005aa8 	.word	0x08005aa8

0800302c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	460a      	mov	r2, r1
 8003036:	71fb      	strb	r3, [r7, #7]
 8003038:	4613      	mov	r3, r2
 800303a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <BSP_PB_Init+0x32>
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <BSP_PB_Init+0xa4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <BSP_PB_Init+0xa4>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <BSP_PB_Init+0xa4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800305e:	79bb      	ldrb	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800306c:	2302      	movs	r3, #2
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <BSP_PB_Init+0xa8>)
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fe98 	bl	8001db8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003088:	79bb      	ldrb	r3, [r7, #6]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d11c      	bne.n	80030c8 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800308e:	2301      	movs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8003096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800309a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <BSP_PB_Init+0xa8>)
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	f107 020c 	add.w	r2, r7, #12
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fe84 	bl	8001db8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80030b0:	2306      	movs	r3, #6
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	210f      	movs	r1, #15
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fcbc 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80030be:	2306      	movs	r3, #6
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fcd3 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  }
}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	20000258 	.word	0x20000258

080030d8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	4a06      	ldr	r2, [pc, #24]	; (8003100 <BSP_PB_GetState+0x28>)
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ffe6 	bl	80020c0 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000258 	.word	0x20000258

08003104 <__cvt>:
 8003104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003108:	ec55 4b10 	vmov	r4, r5, d0
 800310c:	2d00      	cmp	r5, #0
 800310e:	460e      	mov	r6, r1
 8003110:	4619      	mov	r1, r3
 8003112:	462b      	mov	r3, r5
 8003114:	bfbb      	ittet	lt
 8003116:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800311a:	461d      	movlt	r5, r3
 800311c:	2300      	movge	r3, #0
 800311e:	232d      	movlt	r3, #45	; 0x2d
 8003120:	700b      	strb	r3, [r1, #0]
 8003122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003124:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003128:	4691      	mov	r9, r2
 800312a:	f023 0820 	bic.w	r8, r3, #32
 800312e:	bfbc      	itt	lt
 8003130:	4622      	movlt	r2, r4
 8003132:	4614      	movlt	r4, r2
 8003134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003138:	d005      	beq.n	8003146 <__cvt+0x42>
 800313a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800313e:	d100      	bne.n	8003142 <__cvt+0x3e>
 8003140:	3601      	adds	r6, #1
 8003142:	2102      	movs	r1, #2
 8003144:	e000      	b.n	8003148 <__cvt+0x44>
 8003146:	2103      	movs	r1, #3
 8003148:	ab03      	add	r3, sp, #12
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	ab02      	add	r3, sp, #8
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	ec45 4b10 	vmov	d0, r4, r5
 8003154:	4653      	mov	r3, sl
 8003156:	4632      	mov	r2, r6
 8003158:	f000 fe56 	bl	8003e08 <_dtoa_r>
 800315c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003160:	4607      	mov	r7, r0
 8003162:	d102      	bne.n	800316a <__cvt+0x66>
 8003164:	f019 0f01 	tst.w	r9, #1
 8003168:	d022      	beq.n	80031b0 <__cvt+0xac>
 800316a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800316e:	eb07 0906 	add.w	r9, r7, r6
 8003172:	d110      	bne.n	8003196 <__cvt+0x92>
 8003174:	783b      	ldrb	r3, [r7, #0]
 8003176:	2b30      	cmp	r3, #48	; 0x30
 8003178:	d10a      	bne.n	8003190 <__cvt+0x8c>
 800317a:	2200      	movs	r2, #0
 800317c:	2300      	movs	r3, #0
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003186:	b918      	cbnz	r0, 8003190 <__cvt+0x8c>
 8003188:	f1c6 0601 	rsb	r6, r6, #1
 800318c:	f8ca 6000 	str.w	r6, [sl]
 8003190:	f8da 3000 	ldr.w	r3, [sl]
 8003194:	4499      	add	r9, r3
 8003196:	2200      	movs	r2, #0
 8003198:	2300      	movs	r3, #0
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd fc9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80031a2:	b108      	cbz	r0, 80031a8 <__cvt+0xa4>
 80031a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80031a8:	2230      	movs	r2, #48	; 0x30
 80031aa:	9b03      	ldr	r3, [sp, #12]
 80031ac:	454b      	cmp	r3, r9
 80031ae:	d307      	bcc.n	80031c0 <__cvt+0xbc>
 80031b0:	9b03      	ldr	r3, [sp, #12]
 80031b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031b4:	1bdb      	subs	r3, r3, r7
 80031b6:	4638      	mov	r0, r7
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	b004      	add	sp, #16
 80031bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c0:	1c59      	adds	r1, r3, #1
 80031c2:	9103      	str	r1, [sp, #12]
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e7f0      	b.n	80031aa <__cvt+0xa6>

080031c8 <__exponent>:
 80031c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ca:	4603      	mov	r3, r0
 80031cc:	2900      	cmp	r1, #0
 80031ce:	bfb8      	it	lt
 80031d0:	4249      	neglt	r1, r1
 80031d2:	f803 2b02 	strb.w	r2, [r3], #2
 80031d6:	bfb4      	ite	lt
 80031d8:	222d      	movlt	r2, #45	; 0x2d
 80031da:	222b      	movge	r2, #43	; 0x2b
 80031dc:	2909      	cmp	r1, #9
 80031de:	7042      	strb	r2, [r0, #1]
 80031e0:	dd2a      	ble.n	8003238 <__exponent+0x70>
 80031e2:	f10d 0207 	add.w	r2, sp, #7
 80031e6:	4617      	mov	r7, r2
 80031e8:	260a      	movs	r6, #10
 80031ea:	4694      	mov	ip, r2
 80031ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80031f0:	fb06 1415 	mls	r4, r6, r5, r1
 80031f4:	3430      	adds	r4, #48	; 0x30
 80031f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80031fa:	460c      	mov	r4, r1
 80031fc:	2c63      	cmp	r4, #99	; 0x63
 80031fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8003202:	4629      	mov	r1, r5
 8003204:	dcf1      	bgt.n	80031ea <__exponent+0x22>
 8003206:	3130      	adds	r1, #48	; 0x30
 8003208:	f1ac 0402 	sub.w	r4, ip, #2
 800320c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003210:	1c41      	adds	r1, r0, #1
 8003212:	4622      	mov	r2, r4
 8003214:	42ba      	cmp	r2, r7
 8003216:	d30a      	bcc.n	800322e <__exponent+0x66>
 8003218:	f10d 0209 	add.w	r2, sp, #9
 800321c:	eba2 020c 	sub.w	r2, r2, ip
 8003220:	42bc      	cmp	r4, r7
 8003222:	bf88      	it	hi
 8003224:	2200      	movhi	r2, #0
 8003226:	4413      	add	r3, r2
 8003228:	1a18      	subs	r0, r3, r0
 800322a:	b003      	add	sp, #12
 800322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003232:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003236:	e7ed      	b.n	8003214 <__exponent+0x4c>
 8003238:	2330      	movs	r3, #48	; 0x30
 800323a:	3130      	adds	r1, #48	; 0x30
 800323c:	7083      	strb	r3, [r0, #2]
 800323e:	70c1      	strb	r1, [r0, #3]
 8003240:	1d03      	adds	r3, r0, #4
 8003242:	e7f1      	b.n	8003228 <__exponent+0x60>

08003244 <_printf_float>:
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	ed2d 8b02 	vpush	{d8}
 800324c:	b08d      	sub	sp, #52	; 0x34
 800324e:	460c      	mov	r4, r1
 8003250:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003254:	4616      	mov	r6, r2
 8003256:	461f      	mov	r7, r3
 8003258:	4605      	mov	r5, r0
 800325a:	f000 fcc7 	bl	8003bec <_localeconv_r>
 800325e:	f8d0 a000 	ldr.w	sl, [r0]
 8003262:	4650      	mov	r0, sl
 8003264:	f7fd f80c 	bl	8000280 <strlen>
 8003268:	2300      	movs	r3, #0
 800326a:	930a      	str	r3, [sp, #40]	; 0x28
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	9305      	str	r3, [sp, #20]
 8003270:	f8d8 3000 	ldr.w	r3, [r8]
 8003274:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003278:	3307      	adds	r3, #7
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	f103 0208 	add.w	r2, r3, #8
 8003282:	f8c8 2000 	str.w	r2, [r8]
 8003286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800328a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800328e:	9307      	str	r3, [sp, #28]
 8003290:	f8cd 8018 	str.w	r8, [sp, #24]
 8003294:	ee08 0a10 	vmov	s16, r0
 8003298:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800329c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032a0:	4b9e      	ldr	r3, [pc, #632]	; (800351c <_printf_float+0x2d8>)
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295
 80032a6:	f7fd fc49 	bl	8000b3c <__aeabi_dcmpun>
 80032aa:	bb88      	cbnz	r0, 8003310 <_printf_float+0xcc>
 80032ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032b0:	4b9a      	ldr	r3, [pc, #616]	; (800351c <_printf_float+0x2d8>)
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	f7fd fc23 	bl	8000b00 <__aeabi_dcmple>
 80032ba:	bb48      	cbnz	r0, 8003310 <_printf_float+0xcc>
 80032bc:	2200      	movs	r2, #0
 80032be:	2300      	movs	r3, #0
 80032c0:	4640      	mov	r0, r8
 80032c2:	4649      	mov	r1, r9
 80032c4:	f7fd fc12 	bl	8000aec <__aeabi_dcmplt>
 80032c8:	b110      	cbz	r0, 80032d0 <_printf_float+0x8c>
 80032ca:	232d      	movs	r3, #45	; 0x2d
 80032cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d0:	4a93      	ldr	r2, [pc, #588]	; (8003520 <_printf_float+0x2dc>)
 80032d2:	4b94      	ldr	r3, [pc, #592]	; (8003524 <_printf_float+0x2e0>)
 80032d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80032d8:	bf94      	ite	ls
 80032da:	4690      	movls	r8, r2
 80032dc:	4698      	movhi	r8, r3
 80032de:	2303      	movs	r3, #3
 80032e0:	6123      	str	r3, [r4, #16]
 80032e2:	9b05      	ldr	r3, [sp, #20]
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	f04f 0900 	mov.w	r9, #0
 80032ee:	9700      	str	r7, [sp, #0]
 80032f0:	4633      	mov	r3, r6
 80032f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80032f4:	4621      	mov	r1, r4
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f9da 	bl	80036b0 <_printf_common>
 80032fc:	3001      	adds	r0, #1
 80032fe:	f040 8090 	bne.w	8003422 <_printf_float+0x1de>
 8003302:	f04f 30ff 	mov.w	r0, #4294967295
 8003306:	b00d      	add	sp, #52	; 0x34
 8003308:	ecbd 8b02 	vpop	{d8}
 800330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003310:	4642      	mov	r2, r8
 8003312:	464b      	mov	r3, r9
 8003314:	4640      	mov	r0, r8
 8003316:	4649      	mov	r1, r9
 8003318:	f7fd fc10 	bl	8000b3c <__aeabi_dcmpun>
 800331c:	b140      	cbz	r0, 8003330 <_printf_float+0xec>
 800331e:	464b      	mov	r3, r9
 8003320:	2b00      	cmp	r3, #0
 8003322:	bfbc      	itt	lt
 8003324:	232d      	movlt	r3, #45	; 0x2d
 8003326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800332a:	4a7f      	ldr	r2, [pc, #508]	; (8003528 <_printf_float+0x2e4>)
 800332c:	4b7f      	ldr	r3, [pc, #508]	; (800352c <_printf_float+0x2e8>)
 800332e:	e7d1      	b.n	80032d4 <_printf_float+0x90>
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003336:	9206      	str	r2, [sp, #24]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	d13f      	bne.n	80033bc <_printf_float+0x178>
 800333c:	2306      	movs	r3, #6
 800333e:	6063      	str	r3, [r4, #4]
 8003340:	9b05      	ldr	r3, [sp, #20]
 8003342:	6861      	ldr	r1, [r4, #4]
 8003344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003348:	2300      	movs	r3, #0
 800334a:	9303      	str	r3, [sp, #12]
 800334c:	ab0a      	add	r3, sp, #40	; 0x28
 800334e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003352:	ab09      	add	r3, sp, #36	; 0x24
 8003354:	ec49 8b10 	vmov	d0, r8, r9
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6022      	str	r2, [r4, #0]
 800335c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003360:	4628      	mov	r0, r5
 8003362:	f7ff fecf 	bl	8003104 <__cvt>
 8003366:	9b06      	ldr	r3, [sp, #24]
 8003368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800336a:	2b47      	cmp	r3, #71	; 0x47
 800336c:	4680      	mov	r8, r0
 800336e:	d108      	bne.n	8003382 <_printf_float+0x13e>
 8003370:	1cc8      	adds	r0, r1, #3
 8003372:	db02      	blt.n	800337a <_printf_float+0x136>
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	4299      	cmp	r1, r3
 8003378:	dd41      	ble.n	80033fe <_printf_float+0x1ba>
 800337a:	f1ab 0302 	sub.w	r3, fp, #2
 800337e:	fa5f fb83 	uxtb.w	fp, r3
 8003382:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003386:	d820      	bhi.n	80033ca <_printf_float+0x186>
 8003388:	3901      	subs	r1, #1
 800338a:	465a      	mov	r2, fp
 800338c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003390:	9109      	str	r1, [sp, #36]	; 0x24
 8003392:	f7ff ff19 	bl	80031c8 <__exponent>
 8003396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003398:	1813      	adds	r3, r2, r0
 800339a:	2a01      	cmp	r2, #1
 800339c:	4681      	mov	r9, r0
 800339e:	6123      	str	r3, [r4, #16]
 80033a0:	dc02      	bgt.n	80033a8 <_printf_float+0x164>
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	07d2      	lsls	r2, r2, #31
 80033a6:	d501      	bpl.n	80033ac <_printf_float+0x168>
 80033a8:	3301      	adds	r3, #1
 80033aa:	6123      	str	r3, [r4, #16]
 80033ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d09c      	beq.n	80032ee <_printf_float+0xaa>
 80033b4:	232d      	movs	r3, #45	; 0x2d
 80033b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ba:	e798      	b.n	80032ee <_printf_float+0xaa>
 80033bc:	9a06      	ldr	r2, [sp, #24]
 80033be:	2a47      	cmp	r2, #71	; 0x47
 80033c0:	d1be      	bne.n	8003340 <_printf_float+0xfc>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1bc      	bne.n	8003340 <_printf_float+0xfc>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e7b9      	b.n	800333e <_printf_float+0xfa>
 80033ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80033ce:	d118      	bne.n	8003402 <_printf_float+0x1be>
 80033d0:	2900      	cmp	r1, #0
 80033d2:	6863      	ldr	r3, [r4, #4]
 80033d4:	dd0b      	ble.n	80033ee <_printf_float+0x1aa>
 80033d6:	6121      	str	r1, [r4, #16]
 80033d8:	b913      	cbnz	r3, 80033e0 <_printf_float+0x19c>
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	07d0      	lsls	r0, r2, #31
 80033de:	d502      	bpl.n	80033e6 <_printf_float+0x1a2>
 80033e0:	3301      	adds	r3, #1
 80033e2:	440b      	add	r3, r1
 80033e4:	6123      	str	r3, [r4, #16]
 80033e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80033e8:	f04f 0900 	mov.w	r9, #0
 80033ec:	e7de      	b.n	80033ac <_printf_float+0x168>
 80033ee:	b913      	cbnz	r3, 80033f6 <_printf_float+0x1b2>
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	07d2      	lsls	r2, r2, #31
 80033f4:	d501      	bpl.n	80033fa <_printf_float+0x1b6>
 80033f6:	3302      	adds	r3, #2
 80033f8:	e7f4      	b.n	80033e4 <_printf_float+0x1a0>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e7f2      	b.n	80033e4 <_printf_float+0x1a0>
 80033fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003404:	4299      	cmp	r1, r3
 8003406:	db05      	blt.n	8003414 <_printf_float+0x1d0>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	6121      	str	r1, [r4, #16]
 800340c:	07d8      	lsls	r0, r3, #31
 800340e:	d5ea      	bpl.n	80033e6 <_printf_float+0x1a2>
 8003410:	1c4b      	adds	r3, r1, #1
 8003412:	e7e7      	b.n	80033e4 <_printf_float+0x1a0>
 8003414:	2900      	cmp	r1, #0
 8003416:	bfd4      	ite	le
 8003418:	f1c1 0202 	rsble	r2, r1, #2
 800341c:	2201      	movgt	r2, #1
 800341e:	4413      	add	r3, r2
 8003420:	e7e0      	b.n	80033e4 <_printf_float+0x1a0>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	055a      	lsls	r2, r3, #21
 8003426:	d407      	bmi.n	8003438 <_printf_float+0x1f4>
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	4642      	mov	r2, r8
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	d12c      	bne.n	8003490 <_printf_float+0x24c>
 8003436:	e764      	b.n	8003302 <_printf_float+0xbe>
 8003438:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800343c:	f240 80e0 	bls.w	8003600 <_printf_float+0x3bc>
 8003440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003444:	2200      	movs	r2, #0
 8003446:	2300      	movs	r3, #0
 8003448:	f7fd fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800344c:	2800      	cmp	r0, #0
 800344e:	d034      	beq.n	80034ba <_printf_float+0x276>
 8003450:	4a37      	ldr	r2, [pc, #220]	; (8003530 <_printf_float+0x2ec>)
 8003452:	2301      	movs	r3, #1
 8003454:	4631      	mov	r1, r6
 8003456:	4628      	mov	r0, r5
 8003458:	47b8      	blx	r7
 800345a:	3001      	adds	r0, #1
 800345c:	f43f af51 	beq.w	8003302 <_printf_float+0xbe>
 8003460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003464:	429a      	cmp	r2, r3
 8003466:	db02      	blt.n	800346e <_printf_float+0x22a>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	07d8      	lsls	r0, r3, #31
 800346c:	d510      	bpl.n	8003490 <_printf_float+0x24c>
 800346e:	ee18 3a10 	vmov	r3, s16
 8003472:	4652      	mov	r2, sl
 8003474:	4631      	mov	r1, r6
 8003476:	4628      	mov	r0, r5
 8003478:	47b8      	blx	r7
 800347a:	3001      	adds	r0, #1
 800347c:	f43f af41 	beq.w	8003302 <_printf_float+0xbe>
 8003480:	f04f 0800 	mov.w	r8, #0
 8003484:	f104 091a 	add.w	r9, r4, #26
 8003488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	4543      	cmp	r3, r8
 800348e:	dc09      	bgt.n	80034a4 <_printf_float+0x260>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	079b      	lsls	r3, r3, #30
 8003494:	f100 8107 	bmi.w	80036a6 <_printf_float+0x462>
 8003498:	68e0      	ldr	r0, [r4, #12]
 800349a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800349c:	4298      	cmp	r0, r3
 800349e:	bfb8      	it	lt
 80034a0:	4618      	movlt	r0, r3
 80034a2:	e730      	b.n	8003306 <_printf_float+0xc2>
 80034a4:	2301      	movs	r3, #1
 80034a6:	464a      	mov	r2, r9
 80034a8:	4631      	mov	r1, r6
 80034aa:	4628      	mov	r0, r5
 80034ac:	47b8      	blx	r7
 80034ae:	3001      	adds	r0, #1
 80034b0:	f43f af27 	beq.w	8003302 <_printf_float+0xbe>
 80034b4:	f108 0801 	add.w	r8, r8, #1
 80034b8:	e7e6      	b.n	8003488 <_printf_float+0x244>
 80034ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	dc39      	bgt.n	8003534 <_printf_float+0x2f0>
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <_printf_float+0x2ec>)
 80034c2:	2301      	movs	r3, #1
 80034c4:	4631      	mov	r1, r6
 80034c6:	4628      	mov	r0, r5
 80034c8:	47b8      	blx	r7
 80034ca:	3001      	adds	r0, #1
 80034cc:	f43f af19 	beq.w	8003302 <_printf_float+0xbe>
 80034d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80034d4:	4313      	orrs	r3, r2
 80034d6:	d102      	bne.n	80034de <_printf_float+0x29a>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	07d9      	lsls	r1, r3, #31
 80034dc:	d5d8      	bpl.n	8003490 <_printf_float+0x24c>
 80034de:	ee18 3a10 	vmov	r3, s16
 80034e2:	4652      	mov	r2, sl
 80034e4:	4631      	mov	r1, r6
 80034e6:	4628      	mov	r0, r5
 80034e8:	47b8      	blx	r7
 80034ea:	3001      	adds	r0, #1
 80034ec:	f43f af09 	beq.w	8003302 <_printf_float+0xbe>
 80034f0:	f04f 0900 	mov.w	r9, #0
 80034f4:	f104 0a1a 	add.w	sl, r4, #26
 80034f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034fa:	425b      	negs	r3, r3
 80034fc:	454b      	cmp	r3, r9
 80034fe:	dc01      	bgt.n	8003504 <_printf_float+0x2c0>
 8003500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003502:	e792      	b.n	800342a <_printf_float+0x1e6>
 8003504:	2301      	movs	r3, #1
 8003506:	4652      	mov	r2, sl
 8003508:	4631      	mov	r1, r6
 800350a:	4628      	mov	r0, r5
 800350c:	47b8      	blx	r7
 800350e:	3001      	adds	r0, #1
 8003510:	f43f aef7 	beq.w	8003302 <_printf_float+0xbe>
 8003514:	f109 0901 	add.w	r9, r9, #1
 8003518:	e7ee      	b.n	80034f8 <_printf_float+0x2b4>
 800351a:	bf00      	nop
 800351c:	7fefffff 	.word	0x7fefffff
 8003520:	08005ab0 	.word	0x08005ab0
 8003524:	08005ab4 	.word	0x08005ab4
 8003528:	08005ab8 	.word	0x08005ab8
 800352c:	08005abc 	.word	0x08005abc
 8003530:	08005ac0 	.word	0x08005ac0
 8003534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003538:	429a      	cmp	r2, r3
 800353a:	bfa8      	it	ge
 800353c:	461a      	movge	r2, r3
 800353e:	2a00      	cmp	r2, #0
 8003540:	4691      	mov	r9, r2
 8003542:	dc37      	bgt.n	80035b4 <_printf_float+0x370>
 8003544:	f04f 0b00 	mov.w	fp, #0
 8003548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800354c:	f104 021a 	add.w	r2, r4, #26
 8003550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003552:	9305      	str	r3, [sp, #20]
 8003554:	eba3 0309 	sub.w	r3, r3, r9
 8003558:	455b      	cmp	r3, fp
 800355a:	dc33      	bgt.n	80035c4 <_printf_float+0x380>
 800355c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003560:	429a      	cmp	r2, r3
 8003562:	db3b      	blt.n	80035dc <_printf_float+0x398>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	07da      	lsls	r2, r3, #31
 8003568:	d438      	bmi.n	80035dc <_printf_float+0x398>
 800356a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800356e:	eba2 0903 	sub.w	r9, r2, r3
 8003572:	9b05      	ldr	r3, [sp, #20]
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	4591      	cmp	r9, r2
 8003578:	bfa8      	it	ge
 800357a:	4691      	movge	r9, r2
 800357c:	f1b9 0f00 	cmp.w	r9, #0
 8003580:	dc35      	bgt.n	80035ee <_printf_float+0x3aa>
 8003582:	f04f 0800 	mov.w	r8, #0
 8003586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800358a:	f104 0a1a 	add.w	sl, r4, #26
 800358e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	eba3 0309 	sub.w	r3, r3, r9
 8003598:	4543      	cmp	r3, r8
 800359a:	f77f af79 	ble.w	8003490 <_printf_float+0x24c>
 800359e:	2301      	movs	r3, #1
 80035a0:	4652      	mov	r2, sl
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b8      	blx	r7
 80035a8:	3001      	adds	r0, #1
 80035aa:	f43f aeaa 	beq.w	8003302 <_printf_float+0xbe>
 80035ae:	f108 0801 	add.w	r8, r8, #1
 80035b2:	e7ec      	b.n	800358e <_printf_float+0x34a>
 80035b4:	4613      	mov	r3, r2
 80035b6:	4631      	mov	r1, r6
 80035b8:	4642      	mov	r2, r8
 80035ba:	4628      	mov	r0, r5
 80035bc:	47b8      	blx	r7
 80035be:	3001      	adds	r0, #1
 80035c0:	d1c0      	bne.n	8003544 <_printf_float+0x300>
 80035c2:	e69e      	b.n	8003302 <_printf_float+0xbe>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4631      	mov	r1, r6
 80035c8:	4628      	mov	r0, r5
 80035ca:	9205      	str	r2, [sp, #20]
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f ae97 	beq.w	8003302 <_printf_float+0xbe>
 80035d4:	9a05      	ldr	r2, [sp, #20]
 80035d6:	f10b 0b01 	add.w	fp, fp, #1
 80035da:	e7b9      	b.n	8003550 <_printf_float+0x30c>
 80035dc:	ee18 3a10 	vmov	r3, s16
 80035e0:	4652      	mov	r2, sl
 80035e2:	4631      	mov	r1, r6
 80035e4:	4628      	mov	r0, r5
 80035e6:	47b8      	blx	r7
 80035e8:	3001      	adds	r0, #1
 80035ea:	d1be      	bne.n	800356a <_printf_float+0x326>
 80035ec:	e689      	b.n	8003302 <_printf_float+0xbe>
 80035ee:	9a05      	ldr	r2, [sp, #20]
 80035f0:	464b      	mov	r3, r9
 80035f2:	4442      	add	r2, r8
 80035f4:	4631      	mov	r1, r6
 80035f6:	4628      	mov	r0, r5
 80035f8:	47b8      	blx	r7
 80035fa:	3001      	adds	r0, #1
 80035fc:	d1c1      	bne.n	8003582 <_printf_float+0x33e>
 80035fe:	e680      	b.n	8003302 <_printf_float+0xbe>
 8003600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003602:	2a01      	cmp	r2, #1
 8003604:	dc01      	bgt.n	800360a <_printf_float+0x3c6>
 8003606:	07db      	lsls	r3, r3, #31
 8003608:	d53a      	bpl.n	8003680 <_printf_float+0x43c>
 800360a:	2301      	movs	r3, #1
 800360c:	4642      	mov	r2, r8
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	f43f ae74 	beq.w	8003302 <_printf_float+0xbe>
 800361a:	ee18 3a10 	vmov	r3, s16
 800361e:	4652      	mov	r2, sl
 8003620:	4631      	mov	r1, r6
 8003622:	4628      	mov	r0, r5
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	f43f ae6b 	beq.w	8003302 <_printf_float+0xbe>
 800362c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003630:	2200      	movs	r2, #0
 8003632:	2300      	movs	r3, #0
 8003634:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003638:	f7fd fa4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800363c:	b9d8      	cbnz	r0, 8003676 <_printf_float+0x432>
 800363e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003642:	f108 0201 	add.w	r2, r8, #1
 8003646:	4631      	mov	r1, r6
 8003648:	4628      	mov	r0, r5
 800364a:	47b8      	blx	r7
 800364c:	3001      	adds	r0, #1
 800364e:	d10e      	bne.n	800366e <_printf_float+0x42a>
 8003650:	e657      	b.n	8003302 <_printf_float+0xbe>
 8003652:	2301      	movs	r3, #1
 8003654:	4652      	mov	r2, sl
 8003656:	4631      	mov	r1, r6
 8003658:	4628      	mov	r0, r5
 800365a:	47b8      	blx	r7
 800365c:	3001      	adds	r0, #1
 800365e:	f43f ae50 	beq.w	8003302 <_printf_float+0xbe>
 8003662:	f108 0801 	add.w	r8, r8, #1
 8003666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	4543      	cmp	r3, r8
 800366c:	dcf1      	bgt.n	8003652 <_printf_float+0x40e>
 800366e:	464b      	mov	r3, r9
 8003670:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003674:	e6da      	b.n	800342c <_printf_float+0x1e8>
 8003676:	f04f 0800 	mov.w	r8, #0
 800367a:	f104 0a1a 	add.w	sl, r4, #26
 800367e:	e7f2      	b.n	8003666 <_printf_float+0x422>
 8003680:	2301      	movs	r3, #1
 8003682:	4642      	mov	r2, r8
 8003684:	e7df      	b.n	8003646 <_printf_float+0x402>
 8003686:	2301      	movs	r3, #1
 8003688:	464a      	mov	r2, r9
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	f43f ae36 	beq.w	8003302 <_printf_float+0xbe>
 8003696:	f108 0801 	add.w	r8, r8, #1
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800369e:	1a5b      	subs	r3, r3, r1
 80036a0:	4543      	cmp	r3, r8
 80036a2:	dcf0      	bgt.n	8003686 <_printf_float+0x442>
 80036a4:	e6f8      	b.n	8003498 <_printf_float+0x254>
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	f104 0919 	add.w	r9, r4, #25
 80036ae:	e7f4      	b.n	800369a <_printf_float+0x456>

080036b0 <_printf_common>:
 80036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	4616      	mov	r6, r2
 80036b6:	4699      	mov	r9, r3
 80036b8:	688a      	ldr	r2, [r1, #8]
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bfb8      	it	lt
 80036c4:	4613      	movlt	r3, r2
 80036c6:	6033      	str	r3, [r6, #0]
 80036c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036cc:	4607      	mov	r7, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	b10a      	cbz	r2, 80036d6 <_printf_common+0x26>
 80036d2:	3301      	adds	r3, #1
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	6833      	ldrmi	r3, [r6, #0]
 80036de:	3302      	addmi	r3, #2
 80036e0:	6033      	strmi	r3, [r6, #0]
 80036e2:	6825      	ldr	r5, [r4, #0]
 80036e4:	f015 0506 	ands.w	r5, r5, #6
 80036e8:	d106      	bne.n	80036f8 <_printf_common+0x48>
 80036ea:	f104 0a19 	add.w	sl, r4, #25
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dc26      	bgt.n	8003746 <_printf_common+0x96>
 80036f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036fc:	1e13      	subs	r3, r2, #0
 80036fe:	6822      	ldr	r2, [r4, #0]
 8003700:	bf18      	it	ne
 8003702:	2301      	movne	r3, #1
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d42b      	bmi.n	8003760 <_printf_common+0xb0>
 8003708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800370c:	4649      	mov	r1, r9
 800370e:	4638      	mov	r0, r7
 8003710:	47c0      	blx	r8
 8003712:	3001      	adds	r0, #1
 8003714:	d01e      	beq.n	8003754 <_printf_common+0xa4>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	f003 0306 	and.w	r3, r3, #6
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf02      	ittt	eq
 8003722:	68e5      	ldreq	r5, [r4, #12]
 8003724:	6833      	ldreq	r3, [r6, #0]
 8003726:	1aed      	subeq	r5, r5, r3
 8003728:	68a3      	ldr	r3, [r4, #8]
 800372a:	bf0c      	ite	eq
 800372c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003730:	2500      	movne	r5, #0
 8003732:	4293      	cmp	r3, r2
 8003734:	bfc4      	itt	gt
 8003736:	1a9b      	subgt	r3, r3, r2
 8003738:	18ed      	addgt	r5, r5, r3
 800373a:	2600      	movs	r6, #0
 800373c:	341a      	adds	r4, #26
 800373e:	42b5      	cmp	r5, r6
 8003740:	d11a      	bne.n	8003778 <_printf_common+0xc8>
 8003742:	2000      	movs	r0, #0
 8003744:	e008      	b.n	8003758 <_printf_common+0xa8>
 8003746:	2301      	movs	r3, #1
 8003748:	4652      	mov	r2, sl
 800374a:	4649      	mov	r1, r9
 800374c:	4638      	mov	r0, r7
 800374e:	47c0      	blx	r8
 8003750:	3001      	adds	r0, #1
 8003752:	d103      	bne.n	800375c <_printf_common+0xac>
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375c:	3501      	adds	r5, #1
 800375e:	e7c6      	b.n	80036ee <_printf_common+0x3e>
 8003760:	18e1      	adds	r1, r4, r3
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	2030      	movs	r0, #48	; 0x30
 8003766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800376a:	4422      	add	r2, r4
 800376c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003774:	3302      	adds	r3, #2
 8003776:	e7c7      	b.n	8003708 <_printf_common+0x58>
 8003778:	2301      	movs	r3, #1
 800377a:	4622      	mov	r2, r4
 800377c:	4649      	mov	r1, r9
 800377e:	4638      	mov	r0, r7
 8003780:	47c0      	blx	r8
 8003782:	3001      	adds	r0, #1
 8003784:	d0e6      	beq.n	8003754 <_printf_common+0xa4>
 8003786:	3601      	adds	r6, #1
 8003788:	e7d9      	b.n	800373e <_printf_common+0x8e>
	...

0800378c <_printf_i>:
 800378c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003790:	7e0f      	ldrb	r7, [r1, #24]
 8003792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003794:	2f78      	cmp	r7, #120	; 0x78
 8003796:	4691      	mov	r9, r2
 8003798:	4680      	mov	r8, r0
 800379a:	460c      	mov	r4, r1
 800379c:	469a      	mov	sl, r3
 800379e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037a2:	d807      	bhi.n	80037b4 <_printf_i+0x28>
 80037a4:	2f62      	cmp	r7, #98	; 0x62
 80037a6:	d80a      	bhi.n	80037be <_printf_i+0x32>
 80037a8:	2f00      	cmp	r7, #0
 80037aa:	f000 80d4 	beq.w	8003956 <_printf_i+0x1ca>
 80037ae:	2f58      	cmp	r7, #88	; 0x58
 80037b0:	f000 80c0 	beq.w	8003934 <_printf_i+0x1a8>
 80037b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037bc:	e03a      	b.n	8003834 <_printf_i+0xa8>
 80037be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037c2:	2b15      	cmp	r3, #21
 80037c4:	d8f6      	bhi.n	80037b4 <_printf_i+0x28>
 80037c6:	a101      	add	r1, pc, #4	; (adr r1, 80037cc <_printf_i+0x40>)
 80037c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037cc:	08003825 	.word	0x08003825
 80037d0:	08003839 	.word	0x08003839
 80037d4:	080037b5 	.word	0x080037b5
 80037d8:	080037b5 	.word	0x080037b5
 80037dc:	080037b5 	.word	0x080037b5
 80037e0:	080037b5 	.word	0x080037b5
 80037e4:	08003839 	.word	0x08003839
 80037e8:	080037b5 	.word	0x080037b5
 80037ec:	080037b5 	.word	0x080037b5
 80037f0:	080037b5 	.word	0x080037b5
 80037f4:	080037b5 	.word	0x080037b5
 80037f8:	0800393d 	.word	0x0800393d
 80037fc:	08003865 	.word	0x08003865
 8003800:	080038f7 	.word	0x080038f7
 8003804:	080037b5 	.word	0x080037b5
 8003808:	080037b5 	.word	0x080037b5
 800380c:	0800395f 	.word	0x0800395f
 8003810:	080037b5 	.word	0x080037b5
 8003814:	08003865 	.word	0x08003865
 8003818:	080037b5 	.word	0x080037b5
 800381c:	080037b5 	.word	0x080037b5
 8003820:	080038ff 	.word	0x080038ff
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	602a      	str	r2, [r5, #0]
 800382c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003834:	2301      	movs	r3, #1
 8003836:	e09f      	b.n	8003978 <_printf_i+0x1ec>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	0607      	lsls	r7, r0, #24
 800383e:	f103 0104 	add.w	r1, r3, #4
 8003842:	6029      	str	r1, [r5, #0]
 8003844:	d501      	bpl.n	800384a <_printf_i+0xbe>
 8003846:	681e      	ldr	r6, [r3, #0]
 8003848:	e003      	b.n	8003852 <_printf_i+0xc6>
 800384a:	0646      	lsls	r6, r0, #25
 800384c:	d5fb      	bpl.n	8003846 <_printf_i+0xba>
 800384e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003852:	2e00      	cmp	r6, #0
 8003854:	da03      	bge.n	800385e <_printf_i+0xd2>
 8003856:	232d      	movs	r3, #45	; 0x2d
 8003858:	4276      	negs	r6, r6
 800385a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800385e:	485a      	ldr	r0, [pc, #360]	; (80039c8 <_printf_i+0x23c>)
 8003860:	230a      	movs	r3, #10
 8003862:	e012      	b.n	800388a <_printf_i+0xfe>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	1d19      	adds	r1, r3, #4
 800386a:	6029      	str	r1, [r5, #0]
 800386c:	0605      	lsls	r5, r0, #24
 800386e:	d501      	bpl.n	8003874 <_printf_i+0xe8>
 8003870:	681e      	ldr	r6, [r3, #0]
 8003872:	e002      	b.n	800387a <_printf_i+0xee>
 8003874:	0641      	lsls	r1, r0, #25
 8003876:	d5fb      	bpl.n	8003870 <_printf_i+0xe4>
 8003878:	881e      	ldrh	r6, [r3, #0]
 800387a:	4853      	ldr	r0, [pc, #332]	; (80039c8 <_printf_i+0x23c>)
 800387c:	2f6f      	cmp	r7, #111	; 0x6f
 800387e:	bf0c      	ite	eq
 8003880:	2308      	moveq	r3, #8
 8003882:	230a      	movne	r3, #10
 8003884:	2100      	movs	r1, #0
 8003886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800388a:	6865      	ldr	r5, [r4, #4]
 800388c:	60a5      	str	r5, [r4, #8]
 800388e:	2d00      	cmp	r5, #0
 8003890:	bfa2      	ittt	ge
 8003892:	6821      	ldrge	r1, [r4, #0]
 8003894:	f021 0104 	bicge.w	r1, r1, #4
 8003898:	6021      	strge	r1, [r4, #0]
 800389a:	b90e      	cbnz	r6, 80038a0 <_printf_i+0x114>
 800389c:	2d00      	cmp	r5, #0
 800389e:	d04b      	beq.n	8003938 <_printf_i+0x1ac>
 80038a0:	4615      	mov	r5, r2
 80038a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80038a6:	fb03 6711 	mls	r7, r3, r1, r6
 80038aa:	5dc7      	ldrb	r7, [r0, r7]
 80038ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038b0:	4637      	mov	r7, r6
 80038b2:	42bb      	cmp	r3, r7
 80038b4:	460e      	mov	r6, r1
 80038b6:	d9f4      	bls.n	80038a2 <_printf_i+0x116>
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d10b      	bne.n	80038d4 <_printf_i+0x148>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	07de      	lsls	r6, r3, #31
 80038c0:	d508      	bpl.n	80038d4 <_printf_i+0x148>
 80038c2:	6923      	ldr	r3, [r4, #16]
 80038c4:	6861      	ldr	r1, [r4, #4]
 80038c6:	4299      	cmp	r1, r3
 80038c8:	bfde      	ittt	le
 80038ca:	2330      	movle	r3, #48	; 0x30
 80038cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038d4:	1b52      	subs	r2, r2, r5
 80038d6:	6122      	str	r2, [r4, #16]
 80038d8:	f8cd a000 	str.w	sl, [sp]
 80038dc:	464b      	mov	r3, r9
 80038de:	aa03      	add	r2, sp, #12
 80038e0:	4621      	mov	r1, r4
 80038e2:	4640      	mov	r0, r8
 80038e4:	f7ff fee4 	bl	80036b0 <_printf_common>
 80038e8:	3001      	adds	r0, #1
 80038ea:	d14a      	bne.n	8003982 <_printf_i+0x1f6>
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	b004      	add	sp, #16
 80038f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f043 0320 	orr.w	r3, r3, #32
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	4833      	ldr	r0, [pc, #204]	; (80039cc <_printf_i+0x240>)
 8003900:	2778      	movs	r7, #120	; 0x78
 8003902:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	6829      	ldr	r1, [r5, #0]
 800390a:	061f      	lsls	r7, r3, #24
 800390c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003910:	d402      	bmi.n	8003918 <_printf_i+0x18c>
 8003912:	065f      	lsls	r7, r3, #25
 8003914:	bf48      	it	mi
 8003916:	b2b6      	uxthmi	r6, r6
 8003918:	07df      	lsls	r7, r3, #31
 800391a:	bf48      	it	mi
 800391c:	f043 0320 	orrmi.w	r3, r3, #32
 8003920:	6029      	str	r1, [r5, #0]
 8003922:	bf48      	it	mi
 8003924:	6023      	strmi	r3, [r4, #0]
 8003926:	b91e      	cbnz	r6, 8003930 <_printf_i+0x1a4>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f023 0320 	bic.w	r3, r3, #32
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	2310      	movs	r3, #16
 8003932:	e7a7      	b.n	8003884 <_printf_i+0xf8>
 8003934:	4824      	ldr	r0, [pc, #144]	; (80039c8 <_printf_i+0x23c>)
 8003936:	e7e4      	b.n	8003902 <_printf_i+0x176>
 8003938:	4615      	mov	r5, r2
 800393a:	e7bd      	b.n	80038b8 <_printf_i+0x12c>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	6826      	ldr	r6, [r4, #0]
 8003940:	6961      	ldr	r1, [r4, #20]
 8003942:	1d18      	adds	r0, r3, #4
 8003944:	6028      	str	r0, [r5, #0]
 8003946:	0635      	lsls	r5, r6, #24
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	d501      	bpl.n	8003950 <_printf_i+0x1c4>
 800394c:	6019      	str	r1, [r3, #0]
 800394e:	e002      	b.n	8003956 <_printf_i+0x1ca>
 8003950:	0670      	lsls	r0, r6, #25
 8003952:	d5fb      	bpl.n	800394c <_printf_i+0x1c0>
 8003954:	8019      	strh	r1, [r3, #0]
 8003956:	2300      	movs	r3, #0
 8003958:	6123      	str	r3, [r4, #16]
 800395a:	4615      	mov	r5, r2
 800395c:	e7bc      	b.n	80038d8 <_printf_i+0x14c>
 800395e:	682b      	ldr	r3, [r5, #0]
 8003960:	1d1a      	adds	r2, r3, #4
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	681d      	ldr	r5, [r3, #0]
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	2100      	movs	r1, #0
 800396a:	4628      	mov	r0, r5
 800396c:	f7fc fc38 	bl	80001e0 <memchr>
 8003970:	b108      	cbz	r0, 8003976 <_printf_i+0x1ea>
 8003972:	1b40      	subs	r0, r0, r5
 8003974:	6060      	str	r0, [r4, #4]
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	6123      	str	r3, [r4, #16]
 800397a:	2300      	movs	r3, #0
 800397c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003980:	e7aa      	b.n	80038d8 <_printf_i+0x14c>
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	462a      	mov	r2, r5
 8003986:	4649      	mov	r1, r9
 8003988:	4640      	mov	r0, r8
 800398a:	47d0      	blx	sl
 800398c:	3001      	adds	r0, #1
 800398e:	d0ad      	beq.n	80038ec <_printf_i+0x160>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	079b      	lsls	r3, r3, #30
 8003994:	d413      	bmi.n	80039be <_printf_i+0x232>
 8003996:	68e0      	ldr	r0, [r4, #12]
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	4298      	cmp	r0, r3
 800399c:	bfb8      	it	lt
 800399e:	4618      	movlt	r0, r3
 80039a0:	e7a6      	b.n	80038f0 <_printf_i+0x164>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4632      	mov	r2, r6
 80039a6:	4649      	mov	r1, r9
 80039a8:	4640      	mov	r0, r8
 80039aa:	47d0      	blx	sl
 80039ac:	3001      	adds	r0, #1
 80039ae:	d09d      	beq.n	80038ec <_printf_i+0x160>
 80039b0:	3501      	adds	r5, #1
 80039b2:	68e3      	ldr	r3, [r4, #12]
 80039b4:	9903      	ldr	r1, [sp, #12]
 80039b6:	1a5b      	subs	r3, r3, r1
 80039b8:	42ab      	cmp	r3, r5
 80039ba:	dcf2      	bgt.n	80039a2 <_printf_i+0x216>
 80039bc:	e7eb      	b.n	8003996 <_printf_i+0x20a>
 80039be:	2500      	movs	r5, #0
 80039c0:	f104 0619 	add.w	r6, r4, #25
 80039c4:	e7f5      	b.n	80039b2 <_printf_i+0x226>
 80039c6:	bf00      	nop
 80039c8:	08005ac2 	.word	0x08005ac2
 80039cc:	08005ad3 	.word	0x08005ad3

080039d0 <std>:
 80039d0:	2300      	movs	r3, #0
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
 80039d6:	e9c0 3300 	strd	r3, r3, [r0]
 80039da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039de:	6083      	str	r3, [r0, #8]
 80039e0:	8181      	strh	r1, [r0, #12]
 80039e2:	6643      	str	r3, [r0, #100]	; 0x64
 80039e4:	81c2      	strh	r2, [r0, #14]
 80039e6:	6183      	str	r3, [r0, #24]
 80039e8:	4619      	mov	r1, r3
 80039ea:	2208      	movs	r2, #8
 80039ec:	305c      	adds	r0, #92	; 0x5c
 80039ee:	f000 f8f4 	bl	8003bda <memset>
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <std+0x58>)
 80039f4:	6263      	str	r3, [r4, #36]	; 0x24
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <std+0x5c>)
 80039f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <std+0x60>)
 80039fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <std+0x64>)
 8003a00:	6323      	str	r3, [r4, #48]	; 0x30
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <std+0x68>)
 8003a04:	6224      	str	r4, [r4, #32]
 8003a06:	429c      	cmp	r4, r3
 8003a08:	d006      	beq.n	8003a18 <std+0x48>
 8003a0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003a0e:	4294      	cmp	r4, r2
 8003a10:	d002      	beq.n	8003a18 <std+0x48>
 8003a12:	33d0      	adds	r3, #208	; 0xd0
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d105      	bne.n	8003a24 <std+0x54>
 8003a18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a20:	f000 b958 	b.w	8003cd4 <__retarget_lock_init_recursive>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	bf00      	nop
 8003a28:	08003b55 	.word	0x08003b55
 8003a2c:	08003b77 	.word	0x08003b77
 8003a30:	08003baf 	.word	0x08003baf
 8003a34:	08003bd3 	.word	0x08003bd3
 8003a38:	20016104 	.word	0x20016104

08003a3c <stdio_exit_handler>:
 8003a3c:	4a02      	ldr	r2, [pc, #8]	; (8003a48 <stdio_exit_handler+0xc>)
 8003a3e:	4903      	ldr	r1, [pc, #12]	; (8003a4c <stdio_exit_handler+0x10>)
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <stdio_exit_handler+0x14>)
 8003a42:	f000 b869 	b.w	8003b18 <_fwalk_sglue>
 8003a46:	bf00      	nop
 8003a48:	2000025c 	.word	0x2000025c
 8003a4c:	080053f1 	.word	0x080053f1
 8003a50:	20000268 	.word	0x20000268

08003a54 <cleanup_stdio>:
 8003a54:	6841      	ldr	r1, [r0, #4]
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <cleanup_stdio+0x34>)
 8003a58:	4299      	cmp	r1, r3
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	d001      	beq.n	8003a64 <cleanup_stdio+0x10>
 8003a60:	f001 fcc6 	bl	80053f0 <_fflush_r>
 8003a64:	68a1      	ldr	r1, [r4, #8]
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <cleanup_stdio+0x38>)
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <cleanup_stdio+0x1e>
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f001 fcbf 	bl	80053f0 <_fflush_r>
 8003a72:	68e1      	ldr	r1, [r4, #12]
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <cleanup_stdio+0x3c>)
 8003a76:	4299      	cmp	r1, r3
 8003a78:	d004      	beq.n	8003a84 <cleanup_stdio+0x30>
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a80:	f001 bcb6 	b.w	80053f0 <_fflush_r>
 8003a84:	bd10      	pop	{r4, pc}
 8003a86:	bf00      	nop
 8003a88:	20016104 	.word	0x20016104
 8003a8c:	2001616c 	.word	0x2001616c
 8003a90:	200161d4 	.word	0x200161d4

08003a94 <global_stdio_init.part.0>:
 8003a94:	b510      	push	{r4, lr}
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <global_stdio_init.part.0+0x30>)
 8003a98:	4c0b      	ldr	r4, [pc, #44]	; (8003ac8 <global_stdio_init.part.0+0x34>)
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <global_stdio_init.part.0+0x38>)
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	f7ff ff94 	bl	80039d0 <std>
 8003aa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003aac:	2201      	movs	r2, #1
 8003aae:	2109      	movs	r1, #9
 8003ab0:	f7ff ff8e 	bl	80039d0 <std>
 8003ab4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ab8:	2202      	movs	r2, #2
 8003aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003abe:	2112      	movs	r1, #18
 8003ac0:	f7ff bf86 	b.w	80039d0 <std>
 8003ac4:	2001623c 	.word	0x2001623c
 8003ac8:	20016104 	.word	0x20016104
 8003acc:	08003a3d 	.word	0x08003a3d

08003ad0 <__sfp_lock_acquire>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__sfp_lock_acquire+0x8>)
 8003ad2:	f000 b900 	b.w	8003cd6 <__retarget_lock_acquire_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	20016245 	.word	0x20016245

08003adc <__sfp_lock_release>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__sfp_lock_release+0x8>)
 8003ade:	f000 b8fb 	b.w	8003cd8 <__retarget_lock_release_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	20016245 	.word	0x20016245

08003ae8 <__sinit>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	f7ff fff0 	bl	8003ad0 <__sfp_lock_acquire>
 8003af0:	6a23      	ldr	r3, [r4, #32]
 8003af2:	b11b      	cbz	r3, 8003afc <__sinit+0x14>
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f7ff bff0 	b.w	8003adc <__sfp_lock_release>
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <__sinit+0x28>)
 8003afe:	6223      	str	r3, [r4, #32]
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <__sinit+0x2c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f5      	bne.n	8003af4 <__sinit+0xc>
 8003b08:	f7ff ffc4 	bl	8003a94 <global_stdio_init.part.0>
 8003b0c:	e7f2      	b.n	8003af4 <__sinit+0xc>
 8003b0e:	bf00      	nop
 8003b10:	08003a55 	.word	0x08003a55
 8003b14:	2001623c 	.word	0x2001623c

08003b18 <_fwalk_sglue>:
 8003b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b1c:	4607      	mov	r7, r0
 8003b1e:	4688      	mov	r8, r1
 8003b20:	4614      	mov	r4, r2
 8003b22:	2600      	movs	r6, #0
 8003b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b28:	f1b9 0901 	subs.w	r9, r9, #1
 8003b2c:	d505      	bpl.n	8003b3a <_fwalk_sglue+0x22>
 8003b2e:	6824      	ldr	r4, [r4, #0]
 8003b30:	2c00      	cmp	r4, #0
 8003b32:	d1f7      	bne.n	8003b24 <_fwalk_sglue+0xc>
 8003b34:	4630      	mov	r0, r6
 8003b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b3a:	89ab      	ldrh	r3, [r5, #12]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d907      	bls.n	8003b50 <_fwalk_sglue+0x38>
 8003b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b44:	3301      	adds	r3, #1
 8003b46:	d003      	beq.n	8003b50 <_fwalk_sglue+0x38>
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	4306      	orrs	r6, r0
 8003b50:	3568      	adds	r5, #104	; 0x68
 8003b52:	e7e9      	b.n	8003b28 <_fwalk_sglue+0x10>

08003b54 <__sread>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	460c      	mov	r4, r1
 8003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5c:	f000 f86c 	bl	8003c38 <_read_r>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	bfab      	itete	ge
 8003b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b66:	89a3      	ldrhlt	r3, [r4, #12]
 8003b68:	181b      	addge	r3, r3, r0
 8003b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b6e:	bfac      	ite	ge
 8003b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b72:	81a3      	strhlt	r3, [r4, #12]
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <__swrite>:
 8003b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	898b      	ldrh	r3, [r1, #12]
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	4605      	mov	r5, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	4616      	mov	r6, r2
 8003b86:	d505      	bpl.n	8003b94 <__swrite+0x1e>
 8003b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f000 f840 	bl	8003c14 <_lseek_r>
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	f000 b857 	b.w	8003c5c <_write_r>

08003bae <__sseek>:
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb6:	f000 f82d 	bl	8003c14 <_lseek_r>
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	bf15      	itete	ne
 8003bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bca:	81a3      	strheq	r3, [r4, #12]
 8003bcc:	bf18      	it	ne
 8003bce:	81a3      	strhne	r3, [r4, #12]
 8003bd0:	bd10      	pop	{r4, pc}

08003bd2 <__sclose>:
 8003bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd6:	f000 b80d 	b.w	8003bf4 <_close_r>

08003bda <memset>:
 8003bda:	4402      	add	r2, r0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d100      	bne.n	8003be4 <memset+0xa>
 8003be2:	4770      	bx	lr
 8003be4:	f803 1b01 	strb.w	r1, [r3], #1
 8003be8:	e7f9      	b.n	8003bde <memset+0x4>
	...

08003bec <_localeconv_r>:
 8003bec:	4800      	ldr	r0, [pc, #0]	; (8003bf0 <_localeconv_r+0x4>)
 8003bee:	4770      	bx	lr
 8003bf0:	200003a8 	.word	0x200003a8

08003bf4 <_close_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4d06      	ldr	r5, [pc, #24]	; (8003c10 <_close_r+0x1c>)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fd fd01 	bl	8001606 <_close>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_close_r+0x1a>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_close_r+0x1a>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20016240 	.word	0x20016240

08003c14 <_lseek_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4d07      	ldr	r5, [pc, #28]	; (8003c34 <_lseek_r+0x20>)
 8003c18:	4604      	mov	r4, r0
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	2200      	movs	r2, #0
 8003c20:	602a      	str	r2, [r5, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fd fd16 	bl	8001654 <_lseek>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_lseek_r+0x1e>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_lseek_r+0x1e>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	20016240 	.word	0x20016240

08003c38 <_read_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d07      	ldr	r5, [pc, #28]	; (8003c58 <_read_r+0x20>)
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	602a      	str	r2, [r5, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7fd fcc0 	bl	80015cc <_read>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_read_r+0x1e>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_read_r+0x1e>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20016240 	.word	0x20016240

08003c5c <_write_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4d07      	ldr	r5, [pc, #28]	; (8003c7c <_write_r+0x20>)
 8003c60:	4604      	mov	r4, r0
 8003c62:	4608      	mov	r0, r1
 8003c64:	4611      	mov	r1, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	602a      	str	r2, [r5, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7fd fb30 	bl	80012d0 <_write>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_write_r+0x1e>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_write_r+0x1e>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20016240 	.word	0x20016240

08003c80 <__errno>:
 8003c80:	4b01      	ldr	r3, [pc, #4]	; (8003c88 <__errno+0x8>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	200002b4 	.word	0x200002b4

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4d0d      	ldr	r5, [pc, #52]	; (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	; (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2600      	movs	r6, #0
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4d0b      	ldr	r5, [pc, #44]	; (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	; (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f001 feec 	bl	8005a7c <_init>
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2600      	movs	r6, #0
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08005e2c 	.word	0x08005e2c
 8003cc8:	08005e2c 	.word	0x08005e2c
 8003ccc:	08005e2c 	.word	0x08005e2c
 8003cd0:	08005e30 	.word	0x08005e30

08003cd4 <__retarget_lock_init_recursive>:
 8003cd4:	4770      	bx	lr

08003cd6 <__retarget_lock_acquire_recursive>:
 8003cd6:	4770      	bx	lr

08003cd8 <__retarget_lock_release_recursive>:
 8003cd8:	4770      	bx	lr

08003cda <memcpy>:
 8003cda:	440a      	add	r2, r1
 8003cdc:	4291      	cmp	r1, r2
 8003cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ce2:	d100      	bne.n	8003ce6 <memcpy+0xc>
 8003ce4:	4770      	bx	lr
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cf0:	4291      	cmp	r1, r2
 8003cf2:	d1f9      	bne.n	8003ce8 <memcpy+0xe>
 8003cf4:	bd10      	pop	{r4, pc}

08003cf6 <quorem>:
 8003cf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	6903      	ldr	r3, [r0, #16]
 8003cfc:	690c      	ldr	r4, [r1, #16]
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	4607      	mov	r7, r0
 8003d02:	db7e      	blt.n	8003e02 <quorem+0x10c>
 8003d04:	3c01      	subs	r4, #1
 8003d06:	f101 0814 	add.w	r8, r1, #20
 8003d0a:	f100 0514 	add.w	r5, r0, #20
 8003d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d2c:	d331      	bcc.n	8003d92 <quorem+0x9c>
 8003d2e:	f04f 0e00 	mov.w	lr, #0
 8003d32:	4640      	mov	r0, r8
 8003d34:	46ac      	mov	ip, r5
 8003d36:	46f2      	mov	sl, lr
 8003d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d3c:	b293      	uxth	r3, r2
 8003d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8003d42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d46:	0c1a      	lsrs	r2, r3, #16
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	ebaa 0303 	sub.w	r3, sl, r3
 8003d4e:	f8dc a000 	ldr.w	sl, [ip]
 8003d52:	fa13 f38a 	uxtah	r3, r3, sl
 8003d56:	fb06 220e 	mla	r2, r6, lr, r2
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	9b00      	ldr	r3, [sp, #0]
 8003d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d62:	b292      	uxth	r2, r2
 8003d64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003d70:	4581      	cmp	r9, r0
 8003d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d76:	f84c 3b04 	str.w	r3, [ip], #4
 8003d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d7e:	d2db      	bcs.n	8003d38 <quorem+0x42>
 8003d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d84:	b92b      	cbnz	r3, 8003d92 <quorem+0x9c>
 8003d86:	9b01      	ldr	r3, [sp, #4]
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	429d      	cmp	r5, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	d32c      	bcc.n	8003dea <quorem+0xf4>
 8003d90:	613c      	str	r4, [r7, #16]
 8003d92:	4638      	mov	r0, r7
 8003d94:	f001 f9a6 	bl	80050e4 <__mcmp>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	db22      	blt.n	8003de2 <quorem+0xec>
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	4629      	mov	r1, r5
 8003da0:	2000      	movs	r0, #0
 8003da2:	f858 2b04 	ldr.w	r2, [r8], #4
 8003da6:	f8d1 c000 	ldr.w	ip, [r1]
 8003daa:	b293      	uxth	r3, r2
 8003dac:	1ac3      	subs	r3, r0, r3
 8003dae:	0c12      	lsrs	r2, r2, #16
 8003db0:	fa13 f38c 	uxtah	r3, r3, ip
 8003db4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dc2:	45c1      	cmp	r9, r8
 8003dc4:	f841 3b04 	str.w	r3, [r1], #4
 8003dc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003dcc:	d2e9      	bcs.n	8003da2 <quorem+0xac>
 8003dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003dd6:	b922      	cbnz	r2, 8003de2 <quorem+0xec>
 8003dd8:	3b04      	subs	r3, #4
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	d30a      	bcc.n	8003df6 <quorem+0x100>
 8003de0:	613c      	str	r4, [r7, #16]
 8003de2:	4630      	mov	r0, r6
 8003de4:	b003      	add	sp, #12
 8003de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	3b04      	subs	r3, #4
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d1ce      	bne.n	8003d90 <quorem+0x9a>
 8003df2:	3c01      	subs	r4, #1
 8003df4:	e7c9      	b.n	8003d8a <quorem+0x94>
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	3b04      	subs	r3, #4
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d1f0      	bne.n	8003de0 <quorem+0xea>
 8003dfe:	3c01      	subs	r4, #1
 8003e00:	e7eb      	b.n	8003dda <quorem+0xe4>
 8003e02:	2000      	movs	r0, #0
 8003e04:	e7ee      	b.n	8003de4 <quorem+0xee>
	...

08003e08 <_dtoa_r>:
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	ed2d 8b04 	vpush	{d8-d9}
 8003e10:	69c5      	ldr	r5, [r0, #28]
 8003e12:	b093      	sub	sp, #76	; 0x4c
 8003e14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003e18:	ec57 6b10 	vmov	r6, r7, d0
 8003e1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003e20:	9107      	str	r1, [sp, #28]
 8003e22:	4604      	mov	r4, r0
 8003e24:	920a      	str	r2, [sp, #40]	; 0x28
 8003e26:	930d      	str	r3, [sp, #52]	; 0x34
 8003e28:	b975      	cbnz	r5, 8003e48 <_dtoa_r+0x40>
 8003e2a:	2010      	movs	r0, #16
 8003e2c:	f000 fe2a 	bl	8004a84 <malloc>
 8003e30:	4602      	mov	r2, r0
 8003e32:	61e0      	str	r0, [r4, #28]
 8003e34:	b920      	cbnz	r0, 8003e40 <_dtoa_r+0x38>
 8003e36:	4bae      	ldr	r3, [pc, #696]	; (80040f0 <_dtoa_r+0x2e8>)
 8003e38:	21ef      	movs	r1, #239	; 0xef
 8003e3a:	48ae      	ldr	r0, [pc, #696]	; (80040f4 <_dtoa_r+0x2ec>)
 8003e3c:	f001 fb10 	bl	8005460 <__assert_func>
 8003e40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e44:	6005      	str	r5, [r0, #0]
 8003e46:	60c5      	str	r5, [r0, #12]
 8003e48:	69e3      	ldr	r3, [r4, #28]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	b151      	cbz	r1, 8003e64 <_dtoa_r+0x5c>
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	604a      	str	r2, [r1, #4]
 8003e52:	2301      	movs	r3, #1
 8003e54:	4093      	lsls	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 ff07 	bl	8004c6c <_Bfree>
 8003e5e:	69e3      	ldr	r3, [r4, #28]
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	1e3b      	subs	r3, r7, #0
 8003e66:	bfbb      	ittet	lt
 8003e68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e6c:	9303      	strlt	r3, [sp, #12]
 8003e6e:	2300      	movge	r3, #0
 8003e70:	2201      	movlt	r2, #1
 8003e72:	bfac      	ite	ge
 8003e74:	f8c8 3000 	strge.w	r3, [r8]
 8003e78:	f8c8 2000 	strlt.w	r2, [r8]
 8003e7c:	4b9e      	ldr	r3, [pc, #632]	; (80040f8 <_dtoa_r+0x2f0>)
 8003e7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e82:	ea33 0308 	bics.w	r3, r3, r8
 8003e86:	d11b      	bne.n	8003ec0 <_dtoa_r+0xb8>
 8003e88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003e94:	4333      	orrs	r3, r6
 8003e96:	f000 8593 	beq.w	80049c0 <_dtoa_r+0xbb8>
 8003e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e9c:	b963      	cbnz	r3, 8003eb8 <_dtoa_r+0xb0>
 8003e9e:	4b97      	ldr	r3, [pc, #604]	; (80040fc <_dtoa_r+0x2f4>)
 8003ea0:	e027      	b.n	8003ef2 <_dtoa_r+0xea>
 8003ea2:	4b97      	ldr	r3, [pc, #604]	; (8004100 <_dtoa_r+0x2f8>)
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	9800      	ldr	r0, [sp, #0]
 8003eae:	b013      	add	sp, #76	; 0x4c
 8003eb0:	ecbd 8b04 	vpop	{d8-d9}
 8003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	4b90      	ldr	r3, [pc, #576]	; (80040fc <_dtoa_r+0x2f4>)
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	3303      	adds	r3, #3
 8003ebe:	e7f3      	b.n	8003ea8 <_dtoa_r+0xa0>
 8003ec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	ec51 0b17 	vmov	r0, r1, d7
 8003eca:	eeb0 8a47 	vmov.f32	s16, s14
 8003ece:	eef0 8a67 	vmov.f32	s17, s15
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f7fc fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ed8:	4681      	mov	r9, r0
 8003eda:	b160      	cbz	r0, 8003ef6 <_dtoa_r+0xee>
 8003edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ede:	2301      	movs	r3, #1
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8568 	beq.w	80049ba <_dtoa_r+0xbb2>
 8003eea:	4b86      	ldr	r3, [pc, #536]	; (8004104 <_dtoa_r+0x2fc>)
 8003eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	e7da      	b.n	8003eac <_dtoa_r+0xa4>
 8003ef6:	aa10      	add	r2, sp, #64	; 0x40
 8003ef8:	a911      	add	r1, sp, #68	; 0x44
 8003efa:	4620      	mov	r0, r4
 8003efc:	eeb0 0a48 	vmov.f32	s0, s16
 8003f00:	eef0 0a68 	vmov.f32	s1, s17
 8003f04:	f001 f994 	bl	8005230 <__d2b>
 8003f08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003f0c:	4682      	mov	sl, r0
 8003f0e:	2d00      	cmp	r5, #0
 8003f10:	d07f      	beq.n	8004012 <_dtoa_r+0x20a>
 8003f12:	ee18 3a90 	vmov	r3, s17
 8003f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003f1e:	ec51 0b18 	vmov	r0, r1, d8
 8003f22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003f2e:	4619      	mov	r1, r3
 8003f30:	2200      	movs	r2, #0
 8003f32:	4b75      	ldr	r3, [pc, #468]	; (8004108 <_dtoa_r+0x300>)
 8003f34:	f7fc f9b0 	bl	8000298 <__aeabi_dsub>
 8003f38:	a367      	add	r3, pc, #412	; (adr r3, 80040d8 <_dtoa_r+0x2d0>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f7fc fb63 	bl	8000608 <__aeabi_dmul>
 8003f42:	a367      	add	r3, pc, #412	; (adr r3, 80040e0 <_dtoa_r+0x2d8>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f7fc f9a8 	bl	800029c <__adddf3>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	4628      	mov	r0, r5
 8003f50:	460f      	mov	r7, r1
 8003f52:	f7fc faef 	bl	8000534 <__aeabi_i2d>
 8003f56:	a364      	add	r3, pc, #400	; (adr r3, 80040e8 <_dtoa_r+0x2e0>)
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f7fc fb54 	bl	8000608 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4630      	mov	r0, r6
 8003f66:	4639      	mov	r1, r7
 8003f68:	f7fc f998 	bl	800029c <__adddf3>
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460f      	mov	r7, r1
 8003f70:	f7fc fdfa 	bl	8000b68 <__aeabi_d2iz>
 8003f74:	2200      	movs	r2, #0
 8003f76:	4683      	mov	fp, r0
 8003f78:	2300      	movs	r3, #0
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc fdb5 	bl	8000aec <__aeabi_dcmplt>
 8003f82:	b148      	cbz	r0, 8003f98 <_dtoa_r+0x190>
 8003f84:	4658      	mov	r0, fp
 8003f86:	f7fc fad5 	bl	8000534 <__aeabi_i2d>
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	f7fc fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f92:	b908      	cbnz	r0, 8003f98 <_dtoa_r+0x190>
 8003f94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f98:	f1bb 0f16 	cmp.w	fp, #22
 8003f9c:	d857      	bhi.n	800404e <_dtoa_r+0x246>
 8003f9e:	4b5b      	ldr	r3, [pc, #364]	; (800410c <_dtoa_r+0x304>)
 8003fa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	ec51 0b18 	vmov	r0, r1, d8
 8003fac:	f7fc fd9e 	bl	8000aec <__aeabi_dcmplt>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d04e      	beq.n	8004052 <_dtoa_r+0x24a>
 8003fb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fb8:	2300      	movs	r3, #0
 8003fba:	930c      	str	r3, [sp, #48]	; 0x30
 8003fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fbe:	1b5b      	subs	r3, r3, r5
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	bf45      	ittet	mi
 8003fc4:	f1c3 0301 	rsbmi	r3, r3, #1
 8003fc8:	9305      	strmi	r3, [sp, #20]
 8003fca:	2300      	movpl	r3, #0
 8003fcc:	2300      	movmi	r3, #0
 8003fce:	9206      	str	r2, [sp, #24]
 8003fd0:	bf54      	ite	pl
 8003fd2:	9305      	strpl	r3, [sp, #20]
 8003fd4:	9306      	strmi	r3, [sp, #24]
 8003fd6:	f1bb 0f00 	cmp.w	fp, #0
 8003fda:	db3c      	blt.n	8004056 <_dtoa_r+0x24e>
 8003fdc:	9b06      	ldr	r3, [sp, #24]
 8003fde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003fe2:	445b      	add	r3, fp
 8003fe4:	9306      	str	r3, [sp, #24]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9308      	str	r3, [sp, #32]
 8003fea:	9b07      	ldr	r3, [sp, #28]
 8003fec:	2b09      	cmp	r3, #9
 8003fee:	d868      	bhi.n	80040c2 <_dtoa_r+0x2ba>
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	bfc4      	itt	gt
 8003ff4:	3b04      	subgt	r3, #4
 8003ff6:	9307      	strgt	r3, [sp, #28]
 8003ff8:	9b07      	ldr	r3, [sp, #28]
 8003ffa:	f1a3 0302 	sub.w	r3, r3, #2
 8003ffe:	bfcc      	ite	gt
 8004000:	2500      	movgt	r5, #0
 8004002:	2501      	movle	r5, #1
 8004004:	2b03      	cmp	r3, #3
 8004006:	f200 8085 	bhi.w	8004114 <_dtoa_r+0x30c>
 800400a:	e8df f003 	tbb	[pc, r3]
 800400e:	3b2e      	.short	0x3b2e
 8004010:	5839      	.short	0x5839
 8004012:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004016:	441d      	add	r5, r3
 8004018:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800401c:	2b20      	cmp	r3, #32
 800401e:	bfc1      	itttt	gt
 8004020:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004024:	fa08 f803 	lslgt.w	r8, r8, r3
 8004028:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800402c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004030:	bfd6      	itet	le
 8004032:	f1c3 0320 	rsble	r3, r3, #32
 8004036:	ea48 0003 	orrgt.w	r0, r8, r3
 800403a:	fa06 f003 	lslle.w	r0, r6, r3
 800403e:	f7fc fa69 	bl	8000514 <__aeabi_ui2d>
 8004042:	2201      	movs	r2, #1
 8004044:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004048:	3d01      	subs	r5, #1
 800404a:	920e      	str	r2, [sp, #56]	; 0x38
 800404c:	e76f      	b.n	8003f2e <_dtoa_r+0x126>
 800404e:	2301      	movs	r3, #1
 8004050:	e7b3      	b.n	8003fba <_dtoa_r+0x1b2>
 8004052:	900c      	str	r0, [sp, #48]	; 0x30
 8004054:	e7b2      	b.n	8003fbc <_dtoa_r+0x1b4>
 8004056:	9b05      	ldr	r3, [sp, #20]
 8004058:	eba3 030b 	sub.w	r3, r3, fp
 800405c:	9305      	str	r3, [sp, #20]
 800405e:	f1cb 0300 	rsb	r3, fp, #0
 8004062:	9308      	str	r3, [sp, #32]
 8004064:	2300      	movs	r3, #0
 8004066:	930b      	str	r3, [sp, #44]	; 0x2c
 8004068:	e7bf      	b.n	8003fea <_dtoa_r+0x1e2>
 800406a:	2300      	movs	r3, #0
 800406c:	9309      	str	r3, [sp, #36]	; 0x24
 800406e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	dc52      	bgt.n	800411a <_dtoa_r+0x312>
 8004074:	2301      	movs	r3, #1
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	461a      	mov	r2, r3
 800407c:	920a      	str	r2, [sp, #40]	; 0x28
 800407e:	e00b      	b.n	8004098 <_dtoa_r+0x290>
 8004080:	2301      	movs	r3, #1
 8004082:	e7f3      	b.n	800406c <_dtoa_r+0x264>
 8004084:	2300      	movs	r3, #0
 8004086:	9309      	str	r3, [sp, #36]	; 0x24
 8004088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408a:	445b      	add	r3, fp
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	3301      	adds	r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	bfb8      	it	lt
 8004096:	2301      	movlt	r3, #1
 8004098:	69e0      	ldr	r0, [r4, #28]
 800409a:	2100      	movs	r1, #0
 800409c:	2204      	movs	r2, #4
 800409e:	f102 0614 	add.w	r6, r2, #20
 80040a2:	429e      	cmp	r6, r3
 80040a4:	d93d      	bls.n	8004122 <_dtoa_r+0x31a>
 80040a6:	6041      	str	r1, [r0, #4]
 80040a8:	4620      	mov	r0, r4
 80040aa:	f000 fd9f 	bl	8004bec <_Balloc>
 80040ae:	9000      	str	r0, [sp, #0]
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d139      	bne.n	8004128 <_dtoa_r+0x320>
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <_dtoa_r+0x308>)
 80040b6:	4602      	mov	r2, r0
 80040b8:	f240 11af 	movw	r1, #431	; 0x1af
 80040bc:	e6bd      	b.n	8003e3a <_dtoa_r+0x32>
 80040be:	2301      	movs	r3, #1
 80040c0:	e7e1      	b.n	8004086 <_dtoa_r+0x27e>
 80040c2:	2501      	movs	r5, #1
 80040c4:	2300      	movs	r3, #0
 80040c6:	9307      	str	r3, [sp, #28]
 80040c8:	9509      	str	r5, [sp, #36]	; 0x24
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	2200      	movs	r2, #0
 80040d4:	2312      	movs	r3, #18
 80040d6:	e7d1      	b.n	800407c <_dtoa_r+0x274>
 80040d8:	636f4361 	.word	0x636f4361
 80040dc:	3fd287a7 	.word	0x3fd287a7
 80040e0:	8b60c8b3 	.word	0x8b60c8b3
 80040e4:	3fc68a28 	.word	0x3fc68a28
 80040e8:	509f79fb 	.word	0x509f79fb
 80040ec:	3fd34413 	.word	0x3fd34413
 80040f0:	08005af1 	.word	0x08005af1
 80040f4:	08005b08 	.word	0x08005b08
 80040f8:	7ff00000 	.word	0x7ff00000
 80040fc:	08005aed 	.word	0x08005aed
 8004100:	08005ae4 	.word	0x08005ae4
 8004104:	08005ac1 	.word	0x08005ac1
 8004108:	3ff80000 	.word	0x3ff80000
 800410c:	08005bf8 	.word	0x08005bf8
 8004110:	08005b60 	.word	0x08005b60
 8004114:	2301      	movs	r3, #1
 8004116:	9309      	str	r3, [sp, #36]	; 0x24
 8004118:	e7d7      	b.n	80040ca <_dtoa_r+0x2c2>
 800411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	e7ba      	b.n	8004098 <_dtoa_r+0x290>
 8004122:	3101      	adds	r1, #1
 8004124:	0052      	lsls	r2, r2, #1
 8004126:	e7ba      	b.n	800409e <_dtoa_r+0x296>
 8004128:	69e3      	ldr	r3, [r4, #28]
 800412a:	9a00      	ldr	r2, [sp, #0]
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	9b04      	ldr	r3, [sp, #16]
 8004130:	2b0e      	cmp	r3, #14
 8004132:	f200 80a8 	bhi.w	8004286 <_dtoa_r+0x47e>
 8004136:	2d00      	cmp	r5, #0
 8004138:	f000 80a5 	beq.w	8004286 <_dtoa_r+0x47e>
 800413c:	f1bb 0f00 	cmp.w	fp, #0
 8004140:	dd38      	ble.n	80041b4 <_dtoa_r+0x3ac>
 8004142:	4bc0      	ldr	r3, [pc, #768]	; (8004444 <_dtoa_r+0x63c>)
 8004144:	f00b 020f 	and.w	r2, fp, #15
 8004148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800414c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004150:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004154:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004158:	d019      	beq.n	800418e <_dtoa_r+0x386>
 800415a:	4bbb      	ldr	r3, [pc, #748]	; (8004448 <_dtoa_r+0x640>)
 800415c:	ec51 0b18 	vmov	r0, r1, d8
 8004160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004164:	f7fc fb7a 	bl	800085c <__aeabi_ddiv>
 8004168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800416c:	f008 080f 	and.w	r8, r8, #15
 8004170:	2503      	movs	r5, #3
 8004172:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004448 <_dtoa_r+0x640>
 8004176:	f1b8 0f00 	cmp.w	r8, #0
 800417a:	d10a      	bne.n	8004192 <_dtoa_r+0x38a>
 800417c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004180:	4632      	mov	r2, r6
 8004182:	463b      	mov	r3, r7
 8004184:	f7fc fb6a 	bl	800085c <__aeabi_ddiv>
 8004188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800418c:	e02b      	b.n	80041e6 <_dtoa_r+0x3de>
 800418e:	2502      	movs	r5, #2
 8004190:	e7ef      	b.n	8004172 <_dtoa_r+0x36a>
 8004192:	f018 0f01 	tst.w	r8, #1
 8004196:	d008      	beq.n	80041aa <_dtoa_r+0x3a2>
 8004198:	4630      	mov	r0, r6
 800419a:	4639      	mov	r1, r7
 800419c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80041a0:	f7fc fa32 	bl	8000608 <__aeabi_dmul>
 80041a4:	3501      	adds	r5, #1
 80041a6:	4606      	mov	r6, r0
 80041a8:	460f      	mov	r7, r1
 80041aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80041ae:	f109 0908 	add.w	r9, r9, #8
 80041b2:	e7e0      	b.n	8004176 <_dtoa_r+0x36e>
 80041b4:	f000 809f 	beq.w	80042f6 <_dtoa_r+0x4ee>
 80041b8:	f1cb 0600 	rsb	r6, fp, #0
 80041bc:	4ba1      	ldr	r3, [pc, #644]	; (8004444 <_dtoa_r+0x63c>)
 80041be:	4fa2      	ldr	r7, [pc, #648]	; (8004448 <_dtoa_r+0x640>)
 80041c0:	f006 020f 	and.w	r2, r6, #15
 80041c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	ec51 0b18 	vmov	r0, r1, d8
 80041d0:	f7fc fa1a 	bl	8000608 <__aeabi_dmul>
 80041d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041d8:	1136      	asrs	r6, r6, #4
 80041da:	2300      	movs	r3, #0
 80041dc:	2502      	movs	r5, #2
 80041de:	2e00      	cmp	r6, #0
 80041e0:	d17e      	bne.n	80042e0 <_dtoa_r+0x4d8>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1d0      	bne.n	8004188 <_dtoa_r+0x380>
 80041e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8084 	beq.w	80042fa <_dtoa_r+0x4f2>
 80041f2:	4b96      	ldr	r3, [pc, #600]	; (800444c <_dtoa_r+0x644>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	4640      	mov	r0, r8
 80041f8:	4649      	mov	r1, r9
 80041fa:	f7fc fc77 	bl	8000aec <__aeabi_dcmplt>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d07b      	beq.n	80042fa <_dtoa_r+0x4f2>
 8004202:	9b04      	ldr	r3, [sp, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d078      	beq.n	80042fa <_dtoa_r+0x4f2>
 8004208:	9b01      	ldr	r3, [sp, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	dd39      	ble.n	8004282 <_dtoa_r+0x47a>
 800420e:	4b90      	ldr	r3, [pc, #576]	; (8004450 <_dtoa_r+0x648>)
 8004210:	2200      	movs	r2, #0
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fc f9f7 	bl	8000608 <__aeabi_dmul>
 800421a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800421e:	9e01      	ldr	r6, [sp, #4]
 8004220:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004224:	3501      	adds	r5, #1
 8004226:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800422a:	4628      	mov	r0, r5
 800422c:	f7fc f982 	bl	8000534 <__aeabi_i2d>
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	f7fc f9e8 	bl	8000608 <__aeabi_dmul>
 8004238:	4b86      	ldr	r3, [pc, #536]	; (8004454 <_dtoa_r+0x64c>)
 800423a:	2200      	movs	r2, #0
 800423c:	f7fc f82e 	bl	800029c <__adddf3>
 8004240:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	2e00      	cmp	r6, #0
 800424c:	d158      	bne.n	8004300 <_dtoa_r+0x4f8>
 800424e:	4b82      	ldr	r3, [pc, #520]	; (8004458 <_dtoa_r+0x650>)
 8004250:	2200      	movs	r2, #0
 8004252:	4640      	mov	r0, r8
 8004254:	4649      	mov	r1, r9
 8004256:	f7fc f81f 	bl	8000298 <__aeabi_dsub>
 800425a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800425e:	4680      	mov	r8, r0
 8004260:	4689      	mov	r9, r1
 8004262:	f7fc fc61 	bl	8000b28 <__aeabi_dcmpgt>
 8004266:	2800      	cmp	r0, #0
 8004268:	f040 8296 	bne.w	8004798 <_dtoa_r+0x990>
 800426c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004270:	4640      	mov	r0, r8
 8004272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004276:	4649      	mov	r1, r9
 8004278:	f7fc fc38 	bl	8000aec <__aeabi_dcmplt>
 800427c:	2800      	cmp	r0, #0
 800427e:	f040 8289 	bne.w	8004794 <_dtoa_r+0x98c>
 8004282:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004288:	2b00      	cmp	r3, #0
 800428a:	f2c0 814e 	blt.w	800452a <_dtoa_r+0x722>
 800428e:	f1bb 0f0e 	cmp.w	fp, #14
 8004292:	f300 814a 	bgt.w	800452a <_dtoa_r+0x722>
 8004296:	4b6b      	ldr	r3, [pc, #428]	; (8004444 <_dtoa_r+0x63c>)
 8004298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800429c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f280 80dc 	bge.w	8004460 <_dtoa_r+0x658>
 80042a8:	9b04      	ldr	r3, [sp, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f300 80d8 	bgt.w	8004460 <_dtoa_r+0x658>
 80042b0:	f040 826f 	bne.w	8004792 <_dtoa_r+0x98a>
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <_dtoa_r+0x650>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	4640      	mov	r0, r8
 80042ba:	4649      	mov	r1, r9
 80042bc:	f7fc f9a4 	bl	8000608 <__aeabi_dmul>
 80042c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042c4:	f7fc fc26 	bl	8000b14 <__aeabi_dcmpge>
 80042c8:	9e04      	ldr	r6, [sp, #16]
 80042ca:	4637      	mov	r7, r6
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f040 8245 	bne.w	800475c <_dtoa_r+0x954>
 80042d2:	9d00      	ldr	r5, [sp, #0]
 80042d4:	2331      	movs	r3, #49	; 0x31
 80042d6:	f805 3b01 	strb.w	r3, [r5], #1
 80042da:	f10b 0b01 	add.w	fp, fp, #1
 80042de:	e241      	b.n	8004764 <_dtoa_r+0x95c>
 80042e0:	07f2      	lsls	r2, r6, #31
 80042e2:	d505      	bpl.n	80042f0 <_dtoa_r+0x4e8>
 80042e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e8:	f7fc f98e 	bl	8000608 <__aeabi_dmul>
 80042ec:	3501      	adds	r5, #1
 80042ee:	2301      	movs	r3, #1
 80042f0:	1076      	asrs	r6, r6, #1
 80042f2:	3708      	adds	r7, #8
 80042f4:	e773      	b.n	80041de <_dtoa_r+0x3d6>
 80042f6:	2502      	movs	r5, #2
 80042f8:	e775      	b.n	80041e6 <_dtoa_r+0x3de>
 80042fa:	9e04      	ldr	r6, [sp, #16]
 80042fc:	465f      	mov	r7, fp
 80042fe:	e792      	b.n	8004226 <_dtoa_r+0x41e>
 8004300:	9900      	ldr	r1, [sp, #0]
 8004302:	4b50      	ldr	r3, [pc, #320]	; (8004444 <_dtoa_r+0x63c>)
 8004304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004308:	4431      	add	r1, r6
 800430a:	9102      	str	r1, [sp, #8]
 800430c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800430e:	eeb0 9a47 	vmov.f32	s18, s14
 8004312:	eef0 9a67 	vmov.f32	s19, s15
 8004316:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800431a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800431e:	2900      	cmp	r1, #0
 8004320:	d044      	beq.n	80043ac <_dtoa_r+0x5a4>
 8004322:	494e      	ldr	r1, [pc, #312]	; (800445c <_dtoa_r+0x654>)
 8004324:	2000      	movs	r0, #0
 8004326:	f7fc fa99 	bl	800085c <__aeabi_ddiv>
 800432a:	ec53 2b19 	vmov	r2, r3, d9
 800432e:	f7fb ffb3 	bl	8000298 <__aeabi_dsub>
 8004332:	9d00      	ldr	r5, [sp, #0]
 8004334:	ec41 0b19 	vmov	d9, r0, r1
 8004338:	4649      	mov	r1, r9
 800433a:	4640      	mov	r0, r8
 800433c:	f7fc fc14 	bl	8000b68 <__aeabi_d2iz>
 8004340:	4606      	mov	r6, r0
 8004342:	f7fc f8f7 	bl	8000534 <__aeabi_i2d>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f7fb ffa3 	bl	8000298 <__aeabi_dsub>
 8004352:	3630      	adds	r6, #48	; 0x30
 8004354:	f805 6b01 	strb.w	r6, [r5], #1
 8004358:	ec53 2b19 	vmov	r2, r3, d9
 800435c:	4680      	mov	r8, r0
 800435e:	4689      	mov	r9, r1
 8004360:	f7fc fbc4 	bl	8000aec <__aeabi_dcmplt>
 8004364:	2800      	cmp	r0, #0
 8004366:	d164      	bne.n	8004432 <_dtoa_r+0x62a>
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	4937      	ldr	r1, [pc, #220]	; (800444c <_dtoa_r+0x644>)
 800436e:	2000      	movs	r0, #0
 8004370:	f7fb ff92 	bl	8000298 <__aeabi_dsub>
 8004374:	ec53 2b19 	vmov	r2, r3, d9
 8004378:	f7fc fbb8 	bl	8000aec <__aeabi_dcmplt>
 800437c:	2800      	cmp	r0, #0
 800437e:	f040 80b6 	bne.w	80044ee <_dtoa_r+0x6e6>
 8004382:	9b02      	ldr	r3, [sp, #8]
 8004384:	429d      	cmp	r5, r3
 8004386:	f43f af7c 	beq.w	8004282 <_dtoa_r+0x47a>
 800438a:	4b31      	ldr	r3, [pc, #196]	; (8004450 <_dtoa_r+0x648>)
 800438c:	ec51 0b19 	vmov	r0, r1, d9
 8004390:	2200      	movs	r2, #0
 8004392:	f7fc f939 	bl	8000608 <__aeabi_dmul>
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <_dtoa_r+0x648>)
 8004398:	ec41 0b19 	vmov	d9, r0, r1
 800439c:	2200      	movs	r2, #0
 800439e:	4640      	mov	r0, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	f7fc f931 	bl	8000608 <__aeabi_dmul>
 80043a6:	4680      	mov	r8, r0
 80043a8:	4689      	mov	r9, r1
 80043aa:	e7c5      	b.n	8004338 <_dtoa_r+0x530>
 80043ac:	ec51 0b17 	vmov	r0, r1, d7
 80043b0:	f7fc f92a 	bl	8000608 <__aeabi_dmul>
 80043b4:	9b02      	ldr	r3, [sp, #8]
 80043b6:	9d00      	ldr	r5, [sp, #0]
 80043b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80043ba:	ec41 0b19 	vmov	d9, r0, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	4640      	mov	r0, r8
 80043c2:	f7fc fbd1 	bl	8000b68 <__aeabi_d2iz>
 80043c6:	4606      	mov	r6, r0
 80043c8:	f7fc f8b4 	bl	8000534 <__aeabi_i2d>
 80043cc:	3630      	adds	r6, #48	; 0x30
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4640      	mov	r0, r8
 80043d4:	4649      	mov	r1, r9
 80043d6:	f7fb ff5f 	bl	8000298 <__aeabi_dsub>
 80043da:	f805 6b01 	strb.w	r6, [r5], #1
 80043de:	9b02      	ldr	r3, [sp, #8]
 80043e0:	429d      	cmp	r5, r3
 80043e2:	4680      	mov	r8, r0
 80043e4:	4689      	mov	r9, r1
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	d124      	bne.n	8004436 <_dtoa_r+0x62e>
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <_dtoa_r+0x654>)
 80043ee:	ec51 0b19 	vmov	r0, r1, d9
 80043f2:	f7fb ff53 	bl	800029c <__adddf3>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4640      	mov	r0, r8
 80043fc:	4649      	mov	r1, r9
 80043fe:	f7fc fb93 	bl	8000b28 <__aeabi_dcmpgt>
 8004402:	2800      	cmp	r0, #0
 8004404:	d173      	bne.n	80044ee <_dtoa_r+0x6e6>
 8004406:	ec53 2b19 	vmov	r2, r3, d9
 800440a:	4914      	ldr	r1, [pc, #80]	; (800445c <_dtoa_r+0x654>)
 800440c:	2000      	movs	r0, #0
 800440e:	f7fb ff43 	bl	8000298 <__aeabi_dsub>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4640      	mov	r0, r8
 8004418:	4649      	mov	r1, r9
 800441a:	f7fc fb67 	bl	8000aec <__aeabi_dcmplt>
 800441e:	2800      	cmp	r0, #0
 8004420:	f43f af2f 	beq.w	8004282 <_dtoa_r+0x47a>
 8004424:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004426:	1e6b      	subs	r3, r5, #1
 8004428:	930f      	str	r3, [sp, #60]	; 0x3c
 800442a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800442e:	2b30      	cmp	r3, #48	; 0x30
 8004430:	d0f8      	beq.n	8004424 <_dtoa_r+0x61c>
 8004432:	46bb      	mov	fp, r7
 8004434:	e04a      	b.n	80044cc <_dtoa_r+0x6c4>
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <_dtoa_r+0x648>)
 8004438:	f7fc f8e6 	bl	8000608 <__aeabi_dmul>
 800443c:	4680      	mov	r8, r0
 800443e:	4689      	mov	r9, r1
 8004440:	e7bd      	b.n	80043be <_dtoa_r+0x5b6>
 8004442:	bf00      	nop
 8004444:	08005bf8 	.word	0x08005bf8
 8004448:	08005bd0 	.word	0x08005bd0
 800444c:	3ff00000 	.word	0x3ff00000
 8004450:	40240000 	.word	0x40240000
 8004454:	401c0000 	.word	0x401c0000
 8004458:	40140000 	.word	0x40140000
 800445c:	3fe00000 	.word	0x3fe00000
 8004460:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004464:	9d00      	ldr	r5, [sp, #0]
 8004466:	4642      	mov	r2, r8
 8004468:	464b      	mov	r3, r9
 800446a:	4630      	mov	r0, r6
 800446c:	4639      	mov	r1, r7
 800446e:	f7fc f9f5 	bl	800085c <__aeabi_ddiv>
 8004472:	f7fc fb79 	bl	8000b68 <__aeabi_d2iz>
 8004476:	9001      	str	r0, [sp, #4]
 8004478:	f7fc f85c 	bl	8000534 <__aeabi_i2d>
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	f7fc f8c2 	bl	8000608 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	f7fb ff04 	bl	8000298 <__aeabi_dsub>
 8004490:	9e01      	ldr	r6, [sp, #4]
 8004492:	9f04      	ldr	r7, [sp, #16]
 8004494:	3630      	adds	r6, #48	; 0x30
 8004496:	f805 6b01 	strb.w	r6, [r5], #1
 800449a:	9e00      	ldr	r6, [sp, #0]
 800449c:	1bae      	subs	r6, r5, r6
 800449e:	42b7      	cmp	r7, r6
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	d134      	bne.n	8004510 <_dtoa_r+0x708>
 80044a6:	f7fb fef9 	bl	800029c <__adddf3>
 80044aa:	4642      	mov	r2, r8
 80044ac:	464b      	mov	r3, r9
 80044ae:	4606      	mov	r6, r0
 80044b0:	460f      	mov	r7, r1
 80044b2:	f7fc fb39 	bl	8000b28 <__aeabi_dcmpgt>
 80044b6:	b9c8      	cbnz	r0, 80044ec <_dtoa_r+0x6e4>
 80044b8:	4642      	mov	r2, r8
 80044ba:	464b      	mov	r3, r9
 80044bc:	4630      	mov	r0, r6
 80044be:	4639      	mov	r1, r7
 80044c0:	f7fc fb0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80044c4:	b110      	cbz	r0, 80044cc <_dtoa_r+0x6c4>
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	07db      	lsls	r3, r3, #31
 80044ca:	d40f      	bmi.n	80044ec <_dtoa_r+0x6e4>
 80044cc:	4651      	mov	r1, sl
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 fbcc 	bl	8004c6c <_Bfree>
 80044d4:	2300      	movs	r3, #0
 80044d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044d8:	702b      	strb	r3, [r5, #0]
 80044da:	f10b 0301 	add.w	r3, fp, #1
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f43f ace2 	beq.w	8003eac <_dtoa_r+0xa4>
 80044e8:	601d      	str	r5, [r3, #0]
 80044ea:	e4df      	b.n	8003eac <_dtoa_r+0xa4>
 80044ec:	465f      	mov	r7, fp
 80044ee:	462b      	mov	r3, r5
 80044f0:	461d      	mov	r5, r3
 80044f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044f6:	2a39      	cmp	r2, #57	; 0x39
 80044f8:	d106      	bne.n	8004508 <_dtoa_r+0x700>
 80044fa:	9a00      	ldr	r2, [sp, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1f7      	bne.n	80044f0 <_dtoa_r+0x6e8>
 8004500:	9900      	ldr	r1, [sp, #0]
 8004502:	2230      	movs	r2, #48	; 0x30
 8004504:	3701      	adds	r7, #1
 8004506:	700a      	strb	r2, [r1, #0]
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	3201      	adds	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e790      	b.n	8004432 <_dtoa_r+0x62a>
 8004510:	4ba3      	ldr	r3, [pc, #652]	; (80047a0 <_dtoa_r+0x998>)
 8004512:	2200      	movs	r2, #0
 8004514:	f7fc f878 	bl	8000608 <__aeabi_dmul>
 8004518:	2200      	movs	r2, #0
 800451a:	2300      	movs	r3, #0
 800451c:	4606      	mov	r6, r0
 800451e:	460f      	mov	r7, r1
 8004520:	f7fc fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8004524:	2800      	cmp	r0, #0
 8004526:	d09e      	beq.n	8004466 <_dtoa_r+0x65e>
 8004528:	e7d0      	b.n	80044cc <_dtoa_r+0x6c4>
 800452a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800452c:	2a00      	cmp	r2, #0
 800452e:	f000 80ca 	beq.w	80046c6 <_dtoa_r+0x8be>
 8004532:	9a07      	ldr	r2, [sp, #28]
 8004534:	2a01      	cmp	r2, #1
 8004536:	f300 80ad 	bgt.w	8004694 <_dtoa_r+0x88c>
 800453a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800453c:	2a00      	cmp	r2, #0
 800453e:	f000 80a5 	beq.w	800468c <_dtoa_r+0x884>
 8004542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004546:	9e08      	ldr	r6, [sp, #32]
 8004548:	9d05      	ldr	r5, [sp, #20]
 800454a:	9a05      	ldr	r2, [sp, #20]
 800454c:	441a      	add	r2, r3
 800454e:	9205      	str	r2, [sp, #20]
 8004550:	9a06      	ldr	r2, [sp, #24]
 8004552:	2101      	movs	r1, #1
 8004554:	441a      	add	r2, r3
 8004556:	4620      	mov	r0, r4
 8004558:	9206      	str	r2, [sp, #24]
 800455a:	f000 fc3d 	bl	8004dd8 <__i2b>
 800455e:	4607      	mov	r7, r0
 8004560:	b165      	cbz	r5, 800457c <_dtoa_r+0x774>
 8004562:	9b06      	ldr	r3, [sp, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	dd09      	ble.n	800457c <_dtoa_r+0x774>
 8004568:	42ab      	cmp	r3, r5
 800456a:	9a05      	ldr	r2, [sp, #20]
 800456c:	bfa8      	it	ge
 800456e:	462b      	movge	r3, r5
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	9205      	str	r2, [sp, #20]
 8004574:	9a06      	ldr	r2, [sp, #24]
 8004576:	1aed      	subs	r5, r5, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	9306      	str	r3, [sp, #24]
 800457c:	9b08      	ldr	r3, [sp, #32]
 800457e:	b1f3      	cbz	r3, 80045be <_dtoa_r+0x7b6>
 8004580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a3 	beq.w	80046ce <_dtoa_r+0x8c6>
 8004588:	2e00      	cmp	r6, #0
 800458a:	dd10      	ble.n	80045ae <_dtoa_r+0x7a6>
 800458c:	4639      	mov	r1, r7
 800458e:	4632      	mov	r2, r6
 8004590:	4620      	mov	r0, r4
 8004592:	f000 fce1 	bl	8004f58 <__pow5mult>
 8004596:	4652      	mov	r2, sl
 8004598:	4601      	mov	r1, r0
 800459a:	4607      	mov	r7, r0
 800459c:	4620      	mov	r0, r4
 800459e:	f000 fc31 	bl	8004e04 <__multiply>
 80045a2:	4651      	mov	r1, sl
 80045a4:	4680      	mov	r8, r0
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 fb60 	bl	8004c6c <_Bfree>
 80045ac:	46c2      	mov	sl, r8
 80045ae:	9b08      	ldr	r3, [sp, #32]
 80045b0:	1b9a      	subs	r2, r3, r6
 80045b2:	d004      	beq.n	80045be <_dtoa_r+0x7b6>
 80045b4:	4651      	mov	r1, sl
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 fcce 	bl	8004f58 <__pow5mult>
 80045bc:	4682      	mov	sl, r0
 80045be:	2101      	movs	r1, #1
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 fc09 	bl	8004dd8 <__i2b>
 80045c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	4606      	mov	r6, r0
 80045cc:	f340 8081 	ble.w	80046d2 <_dtoa_r+0x8ca>
 80045d0:	461a      	mov	r2, r3
 80045d2:	4601      	mov	r1, r0
 80045d4:	4620      	mov	r0, r4
 80045d6:	f000 fcbf 	bl	8004f58 <__pow5mult>
 80045da:	9b07      	ldr	r3, [sp, #28]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	4606      	mov	r6, r0
 80045e0:	dd7a      	ble.n	80046d8 <_dtoa_r+0x8d0>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	6933      	ldr	r3, [r6, #16]
 80045e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80045ec:	6918      	ldr	r0, [r3, #16]
 80045ee:	f000 fba5 	bl	8004d3c <__hi0bits>
 80045f2:	f1c0 0020 	rsb	r0, r0, #32
 80045f6:	9b06      	ldr	r3, [sp, #24]
 80045f8:	4418      	add	r0, r3
 80045fa:	f010 001f 	ands.w	r0, r0, #31
 80045fe:	f000 8094 	beq.w	800472a <_dtoa_r+0x922>
 8004602:	f1c0 0320 	rsb	r3, r0, #32
 8004606:	2b04      	cmp	r3, #4
 8004608:	f340 8085 	ble.w	8004716 <_dtoa_r+0x90e>
 800460c:	9b05      	ldr	r3, [sp, #20]
 800460e:	f1c0 001c 	rsb	r0, r0, #28
 8004612:	4403      	add	r3, r0
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	9b06      	ldr	r3, [sp, #24]
 8004618:	4403      	add	r3, r0
 800461a:	4405      	add	r5, r0
 800461c:	9306      	str	r3, [sp, #24]
 800461e:	9b05      	ldr	r3, [sp, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dd05      	ble.n	8004630 <_dtoa_r+0x828>
 8004624:	4651      	mov	r1, sl
 8004626:	461a      	mov	r2, r3
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fcef 	bl	800500c <__lshift>
 800462e:	4682      	mov	sl, r0
 8004630:	9b06      	ldr	r3, [sp, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	dd05      	ble.n	8004642 <_dtoa_r+0x83a>
 8004636:	4631      	mov	r1, r6
 8004638:	461a      	mov	r2, r3
 800463a:	4620      	mov	r0, r4
 800463c:	f000 fce6 	bl	800500c <__lshift>
 8004640:	4606      	mov	r6, r0
 8004642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004644:	2b00      	cmp	r3, #0
 8004646:	d072      	beq.n	800472e <_dtoa_r+0x926>
 8004648:	4631      	mov	r1, r6
 800464a:	4650      	mov	r0, sl
 800464c:	f000 fd4a 	bl	80050e4 <__mcmp>
 8004650:	2800      	cmp	r0, #0
 8004652:	da6c      	bge.n	800472e <_dtoa_r+0x926>
 8004654:	2300      	movs	r3, #0
 8004656:	4651      	mov	r1, sl
 8004658:	220a      	movs	r2, #10
 800465a:	4620      	mov	r0, r4
 800465c:	f000 fb28 	bl	8004cb0 <__multadd>
 8004660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004666:	4682      	mov	sl, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 81b0 	beq.w	80049ce <_dtoa_r+0xbc6>
 800466e:	2300      	movs	r3, #0
 8004670:	4639      	mov	r1, r7
 8004672:	220a      	movs	r2, #10
 8004674:	4620      	mov	r0, r4
 8004676:	f000 fb1b 	bl	8004cb0 <__multadd>
 800467a:	9b01      	ldr	r3, [sp, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	4607      	mov	r7, r0
 8004680:	f300 8096 	bgt.w	80047b0 <_dtoa_r+0x9a8>
 8004684:	9b07      	ldr	r3, [sp, #28]
 8004686:	2b02      	cmp	r3, #2
 8004688:	dc59      	bgt.n	800473e <_dtoa_r+0x936>
 800468a:	e091      	b.n	80047b0 <_dtoa_r+0x9a8>
 800468c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800468e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004692:	e758      	b.n	8004546 <_dtoa_r+0x73e>
 8004694:	9b04      	ldr	r3, [sp, #16]
 8004696:	1e5e      	subs	r6, r3, #1
 8004698:	9b08      	ldr	r3, [sp, #32]
 800469a:	42b3      	cmp	r3, r6
 800469c:	bfbf      	itttt	lt
 800469e:	9b08      	ldrlt	r3, [sp, #32]
 80046a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80046a2:	9608      	strlt	r6, [sp, #32]
 80046a4:	1af3      	sublt	r3, r6, r3
 80046a6:	bfb4      	ite	lt
 80046a8:	18d2      	addlt	r2, r2, r3
 80046aa:	1b9e      	subge	r6, r3, r6
 80046ac:	9b04      	ldr	r3, [sp, #16]
 80046ae:	bfbc      	itt	lt
 80046b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80046b2:	2600      	movlt	r6, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bfb7      	itett	lt
 80046b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80046bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80046c0:	1a9d      	sublt	r5, r3, r2
 80046c2:	2300      	movlt	r3, #0
 80046c4:	e741      	b.n	800454a <_dtoa_r+0x742>
 80046c6:	9e08      	ldr	r6, [sp, #32]
 80046c8:	9d05      	ldr	r5, [sp, #20]
 80046ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80046cc:	e748      	b.n	8004560 <_dtoa_r+0x758>
 80046ce:	9a08      	ldr	r2, [sp, #32]
 80046d0:	e770      	b.n	80045b4 <_dtoa_r+0x7ac>
 80046d2:	9b07      	ldr	r3, [sp, #28]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	dc19      	bgt.n	800470c <_dtoa_r+0x904>
 80046d8:	9b02      	ldr	r3, [sp, #8]
 80046da:	b9bb      	cbnz	r3, 800470c <_dtoa_r+0x904>
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e2:	b99b      	cbnz	r3, 800470c <_dtoa_r+0x904>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	0d1b      	lsrs	r3, r3, #20
 80046ec:	051b      	lsls	r3, r3, #20
 80046ee:	b183      	cbz	r3, 8004712 <_dtoa_r+0x90a>
 80046f0:	9b05      	ldr	r3, [sp, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	9305      	str	r3, [sp, #20]
 80046f6:	9b06      	ldr	r3, [sp, #24]
 80046f8:	3301      	adds	r3, #1
 80046fa:	9306      	str	r3, [sp, #24]
 80046fc:	f04f 0801 	mov.w	r8, #1
 8004700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f af6f 	bne.w	80045e6 <_dtoa_r+0x7de>
 8004708:	2001      	movs	r0, #1
 800470a:	e774      	b.n	80045f6 <_dtoa_r+0x7ee>
 800470c:	f04f 0800 	mov.w	r8, #0
 8004710:	e7f6      	b.n	8004700 <_dtoa_r+0x8f8>
 8004712:	4698      	mov	r8, r3
 8004714:	e7f4      	b.n	8004700 <_dtoa_r+0x8f8>
 8004716:	d082      	beq.n	800461e <_dtoa_r+0x816>
 8004718:	9a05      	ldr	r2, [sp, #20]
 800471a:	331c      	adds	r3, #28
 800471c:	441a      	add	r2, r3
 800471e:	9205      	str	r2, [sp, #20]
 8004720:	9a06      	ldr	r2, [sp, #24]
 8004722:	441a      	add	r2, r3
 8004724:	441d      	add	r5, r3
 8004726:	9206      	str	r2, [sp, #24]
 8004728:	e779      	b.n	800461e <_dtoa_r+0x816>
 800472a:	4603      	mov	r3, r0
 800472c:	e7f4      	b.n	8004718 <_dtoa_r+0x910>
 800472e:	9b04      	ldr	r3, [sp, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dc37      	bgt.n	80047a4 <_dtoa_r+0x99c>
 8004734:	9b07      	ldr	r3, [sp, #28]
 8004736:	2b02      	cmp	r3, #2
 8004738:	dd34      	ble.n	80047a4 <_dtoa_r+0x99c>
 800473a:	9b04      	ldr	r3, [sp, #16]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	9b01      	ldr	r3, [sp, #4]
 8004740:	b963      	cbnz	r3, 800475c <_dtoa_r+0x954>
 8004742:	4631      	mov	r1, r6
 8004744:	2205      	movs	r2, #5
 8004746:	4620      	mov	r0, r4
 8004748:	f000 fab2 	bl	8004cb0 <__multadd>
 800474c:	4601      	mov	r1, r0
 800474e:	4606      	mov	r6, r0
 8004750:	4650      	mov	r0, sl
 8004752:	f000 fcc7 	bl	80050e4 <__mcmp>
 8004756:	2800      	cmp	r0, #0
 8004758:	f73f adbb 	bgt.w	80042d2 <_dtoa_r+0x4ca>
 800475c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800475e:	9d00      	ldr	r5, [sp, #0]
 8004760:	ea6f 0b03 	mvn.w	fp, r3
 8004764:	f04f 0800 	mov.w	r8, #0
 8004768:	4631      	mov	r1, r6
 800476a:	4620      	mov	r0, r4
 800476c:	f000 fa7e 	bl	8004c6c <_Bfree>
 8004770:	2f00      	cmp	r7, #0
 8004772:	f43f aeab 	beq.w	80044cc <_dtoa_r+0x6c4>
 8004776:	f1b8 0f00 	cmp.w	r8, #0
 800477a:	d005      	beq.n	8004788 <_dtoa_r+0x980>
 800477c:	45b8      	cmp	r8, r7
 800477e:	d003      	beq.n	8004788 <_dtoa_r+0x980>
 8004780:	4641      	mov	r1, r8
 8004782:	4620      	mov	r0, r4
 8004784:	f000 fa72 	bl	8004c6c <_Bfree>
 8004788:	4639      	mov	r1, r7
 800478a:	4620      	mov	r0, r4
 800478c:	f000 fa6e 	bl	8004c6c <_Bfree>
 8004790:	e69c      	b.n	80044cc <_dtoa_r+0x6c4>
 8004792:	2600      	movs	r6, #0
 8004794:	4637      	mov	r7, r6
 8004796:	e7e1      	b.n	800475c <_dtoa_r+0x954>
 8004798:	46bb      	mov	fp, r7
 800479a:	4637      	mov	r7, r6
 800479c:	e599      	b.n	80042d2 <_dtoa_r+0x4ca>
 800479e:	bf00      	nop
 80047a0:	40240000 	.word	0x40240000
 80047a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80c8 	beq.w	800493c <_dtoa_r+0xb34>
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2d00      	cmp	r5, #0
 80047b2:	dd05      	ble.n	80047c0 <_dtoa_r+0x9b8>
 80047b4:	4639      	mov	r1, r7
 80047b6:	462a      	mov	r2, r5
 80047b8:	4620      	mov	r0, r4
 80047ba:	f000 fc27 	bl	800500c <__lshift>
 80047be:	4607      	mov	r7, r0
 80047c0:	f1b8 0f00 	cmp.w	r8, #0
 80047c4:	d05b      	beq.n	800487e <_dtoa_r+0xa76>
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4620      	mov	r0, r4
 80047ca:	f000 fa0f 	bl	8004bec <_Balloc>
 80047ce:	4605      	mov	r5, r0
 80047d0:	b928      	cbnz	r0, 80047de <_dtoa_r+0x9d6>
 80047d2:	4b83      	ldr	r3, [pc, #524]	; (80049e0 <_dtoa_r+0xbd8>)
 80047d4:	4602      	mov	r2, r0
 80047d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80047da:	f7ff bb2e 	b.w	8003e3a <_dtoa_r+0x32>
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	3202      	adds	r2, #2
 80047e2:	0092      	lsls	r2, r2, #2
 80047e4:	f107 010c 	add.w	r1, r7, #12
 80047e8:	300c      	adds	r0, #12
 80047ea:	f7ff fa76 	bl	8003cda <memcpy>
 80047ee:	2201      	movs	r2, #1
 80047f0:	4629      	mov	r1, r5
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 fc0a 	bl	800500c <__lshift>
 80047f8:	9b00      	ldr	r3, [sp, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004802:	4413      	add	r3, r2
 8004804:	9308      	str	r3, [sp, #32]
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	46b8      	mov	r8, r7
 800480e:	9306      	str	r3, [sp, #24]
 8004810:	4607      	mov	r7, r0
 8004812:	9b04      	ldr	r3, [sp, #16]
 8004814:	4631      	mov	r1, r6
 8004816:	3b01      	subs	r3, #1
 8004818:	4650      	mov	r0, sl
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f7ff fa6b 	bl	8003cf6 <quorem>
 8004820:	4641      	mov	r1, r8
 8004822:	9002      	str	r0, [sp, #8]
 8004824:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004828:	4650      	mov	r0, sl
 800482a:	f000 fc5b 	bl	80050e4 <__mcmp>
 800482e:	463a      	mov	r2, r7
 8004830:	9005      	str	r0, [sp, #20]
 8004832:	4631      	mov	r1, r6
 8004834:	4620      	mov	r0, r4
 8004836:	f000 fc71 	bl	800511c <__mdiff>
 800483a:	68c2      	ldr	r2, [r0, #12]
 800483c:	4605      	mov	r5, r0
 800483e:	bb02      	cbnz	r2, 8004882 <_dtoa_r+0xa7a>
 8004840:	4601      	mov	r1, r0
 8004842:	4650      	mov	r0, sl
 8004844:	f000 fc4e 	bl	80050e4 <__mcmp>
 8004848:	4602      	mov	r2, r0
 800484a:	4629      	mov	r1, r5
 800484c:	4620      	mov	r0, r4
 800484e:	9209      	str	r2, [sp, #36]	; 0x24
 8004850:	f000 fa0c 	bl	8004c6c <_Bfree>
 8004854:	9b07      	ldr	r3, [sp, #28]
 8004856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004858:	9d04      	ldr	r5, [sp, #16]
 800485a:	ea43 0102 	orr.w	r1, r3, r2
 800485e:	9b06      	ldr	r3, [sp, #24]
 8004860:	4319      	orrs	r1, r3
 8004862:	d110      	bne.n	8004886 <_dtoa_r+0xa7e>
 8004864:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004868:	d029      	beq.n	80048be <_dtoa_r+0xab6>
 800486a:	9b05      	ldr	r3, [sp, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	dd02      	ble.n	8004876 <_dtoa_r+0xa6e>
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	f883 9000 	strb.w	r9, [r3]
 800487c:	e774      	b.n	8004768 <_dtoa_r+0x960>
 800487e:	4638      	mov	r0, r7
 8004880:	e7ba      	b.n	80047f8 <_dtoa_r+0x9f0>
 8004882:	2201      	movs	r2, #1
 8004884:	e7e1      	b.n	800484a <_dtoa_r+0xa42>
 8004886:	9b05      	ldr	r3, [sp, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	db04      	blt.n	8004896 <_dtoa_r+0xa8e>
 800488c:	9907      	ldr	r1, [sp, #28]
 800488e:	430b      	orrs	r3, r1
 8004890:	9906      	ldr	r1, [sp, #24]
 8004892:	430b      	orrs	r3, r1
 8004894:	d120      	bne.n	80048d8 <_dtoa_r+0xad0>
 8004896:	2a00      	cmp	r2, #0
 8004898:	dded      	ble.n	8004876 <_dtoa_r+0xa6e>
 800489a:	4651      	mov	r1, sl
 800489c:	2201      	movs	r2, #1
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 fbb4 	bl	800500c <__lshift>
 80048a4:	4631      	mov	r1, r6
 80048a6:	4682      	mov	sl, r0
 80048a8:	f000 fc1c 	bl	80050e4 <__mcmp>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	dc03      	bgt.n	80048b8 <_dtoa_r+0xab0>
 80048b0:	d1e1      	bne.n	8004876 <_dtoa_r+0xa6e>
 80048b2:	f019 0f01 	tst.w	r9, #1
 80048b6:	d0de      	beq.n	8004876 <_dtoa_r+0xa6e>
 80048b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048bc:	d1d8      	bne.n	8004870 <_dtoa_r+0xa68>
 80048be:	9a01      	ldr	r2, [sp, #4]
 80048c0:	2339      	movs	r3, #57	; 0x39
 80048c2:	7013      	strb	r3, [r2, #0]
 80048c4:	462b      	mov	r3, r5
 80048c6:	461d      	mov	r5, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80048ce:	2a39      	cmp	r2, #57	; 0x39
 80048d0:	d06c      	beq.n	80049ac <_dtoa_r+0xba4>
 80048d2:	3201      	adds	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e747      	b.n	8004768 <_dtoa_r+0x960>
 80048d8:	2a00      	cmp	r2, #0
 80048da:	dd07      	ble.n	80048ec <_dtoa_r+0xae4>
 80048dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048e0:	d0ed      	beq.n	80048be <_dtoa_r+0xab6>
 80048e2:	9a01      	ldr	r2, [sp, #4]
 80048e4:	f109 0301 	add.w	r3, r9, #1
 80048e8:	7013      	strb	r3, [r2, #0]
 80048ea:	e73d      	b.n	8004768 <_dtoa_r+0x960>
 80048ec:	9b04      	ldr	r3, [sp, #16]
 80048ee:	9a08      	ldr	r2, [sp, #32]
 80048f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d043      	beq.n	8004980 <_dtoa_r+0xb78>
 80048f8:	4651      	mov	r1, sl
 80048fa:	2300      	movs	r3, #0
 80048fc:	220a      	movs	r2, #10
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 f9d6 	bl	8004cb0 <__multadd>
 8004904:	45b8      	cmp	r8, r7
 8004906:	4682      	mov	sl, r0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	f04f 020a 	mov.w	r2, #10
 8004910:	4641      	mov	r1, r8
 8004912:	4620      	mov	r0, r4
 8004914:	d107      	bne.n	8004926 <_dtoa_r+0xb1e>
 8004916:	f000 f9cb 	bl	8004cb0 <__multadd>
 800491a:	4680      	mov	r8, r0
 800491c:	4607      	mov	r7, r0
 800491e:	9b04      	ldr	r3, [sp, #16]
 8004920:	3301      	adds	r3, #1
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	e775      	b.n	8004812 <_dtoa_r+0xa0a>
 8004926:	f000 f9c3 	bl	8004cb0 <__multadd>
 800492a:	4639      	mov	r1, r7
 800492c:	4680      	mov	r8, r0
 800492e:	2300      	movs	r3, #0
 8004930:	220a      	movs	r2, #10
 8004932:	4620      	mov	r0, r4
 8004934:	f000 f9bc 	bl	8004cb0 <__multadd>
 8004938:	4607      	mov	r7, r0
 800493a:	e7f0      	b.n	800491e <_dtoa_r+0xb16>
 800493c:	9b04      	ldr	r3, [sp, #16]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	9d00      	ldr	r5, [sp, #0]
 8004942:	4631      	mov	r1, r6
 8004944:	4650      	mov	r0, sl
 8004946:	f7ff f9d6 	bl	8003cf6 <quorem>
 800494a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800494e:	9b00      	ldr	r3, [sp, #0]
 8004950:	f805 9b01 	strb.w	r9, [r5], #1
 8004954:	1aea      	subs	r2, r5, r3
 8004956:	9b01      	ldr	r3, [sp, #4]
 8004958:	4293      	cmp	r3, r2
 800495a:	dd07      	ble.n	800496c <_dtoa_r+0xb64>
 800495c:	4651      	mov	r1, sl
 800495e:	2300      	movs	r3, #0
 8004960:	220a      	movs	r2, #10
 8004962:	4620      	mov	r0, r4
 8004964:	f000 f9a4 	bl	8004cb0 <__multadd>
 8004968:	4682      	mov	sl, r0
 800496a:	e7ea      	b.n	8004942 <_dtoa_r+0xb3a>
 800496c:	9b01      	ldr	r3, [sp, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfc8      	it	gt
 8004972:	461d      	movgt	r5, r3
 8004974:	9b00      	ldr	r3, [sp, #0]
 8004976:	bfd8      	it	le
 8004978:	2501      	movle	r5, #1
 800497a:	441d      	add	r5, r3
 800497c:	f04f 0800 	mov.w	r8, #0
 8004980:	4651      	mov	r1, sl
 8004982:	2201      	movs	r2, #1
 8004984:	4620      	mov	r0, r4
 8004986:	f000 fb41 	bl	800500c <__lshift>
 800498a:	4631      	mov	r1, r6
 800498c:	4682      	mov	sl, r0
 800498e:	f000 fba9 	bl	80050e4 <__mcmp>
 8004992:	2800      	cmp	r0, #0
 8004994:	dc96      	bgt.n	80048c4 <_dtoa_r+0xabc>
 8004996:	d102      	bne.n	800499e <_dtoa_r+0xb96>
 8004998:	f019 0f01 	tst.w	r9, #1
 800499c:	d192      	bne.n	80048c4 <_dtoa_r+0xabc>
 800499e:	462b      	mov	r3, r5
 80049a0:	461d      	mov	r5, r3
 80049a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049a6:	2a30      	cmp	r2, #48	; 0x30
 80049a8:	d0fa      	beq.n	80049a0 <_dtoa_r+0xb98>
 80049aa:	e6dd      	b.n	8004768 <_dtoa_r+0x960>
 80049ac:	9a00      	ldr	r2, [sp, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d189      	bne.n	80048c6 <_dtoa_r+0xabe>
 80049b2:	f10b 0b01 	add.w	fp, fp, #1
 80049b6:	2331      	movs	r3, #49	; 0x31
 80049b8:	e796      	b.n	80048e8 <_dtoa_r+0xae0>
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <_dtoa_r+0xbdc>)
 80049bc:	f7ff ba99 	b.w	8003ef2 <_dtoa_r+0xea>
 80049c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f47f aa6d 	bne.w	8003ea2 <_dtoa_r+0x9a>
 80049c8:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <_dtoa_r+0xbe0>)
 80049ca:	f7ff ba92 	b.w	8003ef2 <_dtoa_r+0xea>
 80049ce:	9b01      	ldr	r3, [sp, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	dcb5      	bgt.n	8004940 <_dtoa_r+0xb38>
 80049d4:	9b07      	ldr	r3, [sp, #28]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	f73f aeb1 	bgt.w	800473e <_dtoa_r+0x936>
 80049dc:	e7b0      	b.n	8004940 <_dtoa_r+0xb38>
 80049de:	bf00      	nop
 80049e0:	08005b60 	.word	0x08005b60
 80049e4:	08005ac0 	.word	0x08005ac0
 80049e8:	08005ae4 	.word	0x08005ae4

080049ec <_free_r>:
 80049ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ee:	2900      	cmp	r1, #0
 80049f0:	d044      	beq.n	8004a7c <_free_r+0x90>
 80049f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f6:	9001      	str	r0, [sp, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f1a1 0404 	sub.w	r4, r1, #4
 80049fe:	bfb8      	it	lt
 8004a00:	18e4      	addlt	r4, r4, r3
 8004a02:	f000 f8e7 	bl	8004bd4 <__malloc_lock>
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <_free_r+0x94>)
 8004a08:	9801      	ldr	r0, [sp, #4]
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	b933      	cbnz	r3, 8004a1c <_free_r+0x30>
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	6014      	str	r4, [r2, #0]
 8004a12:	b003      	add	sp, #12
 8004a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a18:	f000 b8e2 	b.w	8004be0 <__malloc_unlock>
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	d908      	bls.n	8004a32 <_free_r+0x46>
 8004a20:	6825      	ldr	r5, [r4, #0]
 8004a22:	1961      	adds	r1, r4, r5
 8004a24:	428b      	cmp	r3, r1
 8004a26:	bf01      	itttt	eq
 8004a28:	6819      	ldreq	r1, [r3, #0]
 8004a2a:	685b      	ldreq	r3, [r3, #4]
 8004a2c:	1949      	addeq	r1, r1, r5
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	e7ed      	b.n	8004a0e <_free_r+0x22>
 8004a32:	461a      	mov	r2, r3
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	b10b      	cbz	r3, 8004a3c <_free_r+0x50>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d9fa      	bls.n	8004a32 <_free_r+0x46>
 8004a3c:	6811      	ldr	r1, [r2, #0]
 8004a3e:	1855      	adds	r5, r2, r1
 8004a40:	42a5      	cmp	r5, r4
 8004a42:	d10b      	bne.n	8004a5c <_free_r+0x70>
 8004a44:	6824      	ldr	r4, [r4, #0]
 8004a46:	4421      	add	r1, r4
 8004a48:	1854      	adds	r4, r2, r1
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	d1e0      	bne.n	8004a12 <_free_r+0x26>
 8004a50:	681c      	ldr	r4, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6053      	str	r3, [r2, #4]
 8004a56:	440c      	add	r4, r1
 8004a58:	6014      	str	r4, [r2, #0]
 8004a5a:	e7da      	b.n	8004a12 <_free_r+0x26>
 8004a5c:	d902      	bls.n	8004a64 <_free_r+0x78>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	6003      	str	r3, [r0, #0]
 8004a62:	e7d6      	b.n	8004a12 <_free_r+0x26>
 8004a64:	6825      	ldr	r5, [r4, #0]
 8004a66:	1961      	adds	r1, r4, r5
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	bf04      	itt	eq
 8004a6c:	6819      	ldreq	r1, [r3, #0]
 8004a6e:	685b      	ldreq	r3, [r3, #4]
 8004a70:	6063      	str	r3, [r4, #4]
 8004a72:	bf04      	itt	eq
 8004a74:	1949      	addeq	r1, r1, r5
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	6054      	str	r4, [r2, #4]
 8004a7a:	e7ca      	b.n	8004a12 <_free_r+0x26>
 8004a7c:	b003      	add	sp, #12
 8004a7e:	bd30      	pop	{r4, r5, pc}
 8004a80:	20016248 	.word	0x20016248

08004a84 <malloc>:
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <malloc+0xc>)
 8004a86:	4601      	mov	r1, r0
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f000 b823 	b.w	8004ad4 <_malloc_r>
 8004a8e:	bf00      	nop
 8004a90:	200002b4 	.word	0x200002b4

08004a94 <sbrk_aligned>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4e0e      	ldr	r6, [pc, #56]	; (8004ad0 <sbrk_aligned+0x3c>)
 8004a98:	460c      	mov	r4, r1
 8004a9a:	6831      	ldr	r1, [r6, #0]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	b911      	cbnz	r1, 8004aa6 <sbrk_aligned+0x12>
 8004aa0:	f000 fcce 	bl	8005440 <_sbrk_r>
 8004aa4:	6030      	str	r0, [r6, #0]
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 fcc9 	bl	8005440 <_sbrk_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d00a      	beq.n	8004ac8 <sbrk_aligned+0x34>
 8004ab2:	1cc4      	adds	r4, r0, #3
 8004ab4:	f024 0403 	bic.w	r4, r4, #3
 8004ab8:	42a0      	cmp	r0, r4
 8004aba:	d007      	beq.n	8004acc <sbrk_aligned+0x38>
 8004abc:	1a21      	subs	r1, r4, r0
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 fcbe 	bl	8005440 <_sbrk_r>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d101      	bne.n	8004acc <sbrk_aligned+0x38>
 8004ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8004acc:	4620      	mov	r0, r4
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	2001624c 	.word	0x2001624c

08004ad4 <_malloc_r>:
 8004ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	1ccd      	adds	r5, r1, #3
 8004ada:	f025 0503 	bic.w	r5, r5, #3
 8004ade:	3508      	adds	r5, #8
 8004ae0:	2d0c      	cmp	r5, #12
 8004ae2:	bf38      	it	cc
 8004ae4:	250c      	movcc	r5, #12
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	4607      	mov	r7, r0
 8004aea:	db01      	blt.n	8004af0 <_malloc_r+0x1c>
 8004aec:	42a9      	cmp	r1, r5
 8004aee:	d905      	bls.n	8004afc <_malloc_r+0x28>
 8004af0:	230c      	movs	r3, #12
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	2600      	movs	r6, #0
 8004af6:	4630      	mov	r0, r6
 8004af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bd0 <_malloc_r+0xfc>
 8004b00:	f000 f868 	bl	8004bd4 <__malloc_lock>
 8004b04:	f8d8 3000 	ldr.w	r3, [r8]
 8004b08:	461c      	mov	r4, r3
 8004b0a:	bb5c      	cbnz	r4, 8004b64 <_malloc_r+0x90>
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f7ff ffc0 	bl	8004a94 <sbrk_aligned>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	4604      	mov	r4, r0
 8004b18:	d155      	bne.n	8004bc6 <_malloc_r+0xf2>
 8004b1a:	f8d8 4000 	ldr.w	r4, [r8]
 8004b1e:	4626      	mov	r6, r4
 8004b20:	2e00      	cmp	r6, #0
 8004b22:	d145      	bne.n	8004bb0 <_malloc_r+0xdc>
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d048      	beq.n	8004bba <_malloc_r+0xe6>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	eb04 0903 	add.w	r9, r4, r3
 8004b32:	f000 fc85 	bl	8005440 <_sbrk_r>
 8004b36:	4581      	cmp	r9, r0
 8004b38:	d13f      	bne.n	8004bba <_malloc_r+0xe6>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	1a6d      	subs	r5, r5, r1
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4638      	mov	r0, r7
 8004b42:	f7ff ffa7 	bl	8004a94 <sbrk_aligned>
 8004b46:	3001      	adds	r0, #1
 8004b48:	d037      	beq.n	8004bba <_malloc_r+0xe6>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	442b      	add	r3, r5
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	f8d8 3000 	ldr.w	r3, [r8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d038      	beq.n	8004bca <_malloc_r+0xf6>
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	42a2      	cmp	r2, r4
 8004b5c:	d12b      	bne.n	8004bb6 <_malloc_r+0xe2>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e00f      	b.n	8004b84 <_malloc_r+0xb0>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	1b52      	subs	r2, r2, r5
 8004b68:	d41f      	bmi.n	8004baa <_malloc_r+0xd6>
 8004b6a:	2a0b      	cmp	r2, #11
 8004b6c:	d917      	bls.n	8004b9e <_malloc_r+0xca>
 8004b6e:	1961      	adds	r1, r4, r5
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	6025      	str	r5, [r4, #0]
 8004b74:	bf18      	it	ne
 8004b76:	6059      	strne	r1, [r3, #4]
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	bf08      	it	eq
 8004b7c:	f8c8 1000 	streq.w	r1, [r8]
 8004b80:	5162      	str	r2, [r4, r5]
 8004b82:	604b      	str	r3, [r1, #4]
 8004b84:	4638      	mov	r0, r7
 8004b86:	f104 060b 	add.w	r6, r4, #11
 8004b8a:	f000 f829 	bl	8004be0 <__malloc_unlock>
 8004b8e:	f026 0607 	bic.w	r6, r6, #7
 8004b92:	1d23      	adds	r3, r4, #4
 8004b94:	1af2      	subs	r2, r6, r3
 8004b96:	d0ae      	beq.n	8004af6 <_malloc_r+0x22>
 8004b98:	1b9b      	subs	r3, r3, r6
 8004b9a:	50a3      	str	r3, [r4, r2]
 8004b9c:	e7ab      	b.n	8004af6 <_malloc_r+0x22>
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	6862      	ldr	r2, [r4, #4]
 8004ba2:	d1dd      	bne.n	8004b60 <_malloc_r+0x8c>
 8004ba4:	f8c8 2000 	str.w	r2, [r8]
 8004ba8:	e7ec      	b.n	8004b84 <_malloc_r+0xb0>
 8004baa:	4623      	mov	r3, r4
 8004bac:	6864      	ldr	r4, [r4, #4]
 8004bae:	e7ac      	b.n	8004b0a <_malloc_r+0x36>
 8004bb0:	4634      	mov	r4, r6
 8004bb2:	6876      	ldr	r6, [r6, #4]
 8004bb4:	e7b4      	b.n	8004b20 <_malloc_r+0x4c>
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	e7cc      	b.n	8004b54 <_malloc_r+0x80>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f000 f80e 	bl	8004be0 <__malloc_unlock>
 8004bc4:	e797      	b.n	8004af6 <_malloc_r+0x22>
 8004bc6:	6025      	str	r5, [r4, #0]
 8004bc8:	e7dc      	b.n	8004b84 <_malloc_r+0xb0>
 8004bca:	605b      	str	r3, [r3, #4]
 8004bcc:	deff      	udf	#255	; 0xff
 8004bce:	bf00      	nop
 8004bd0:	20016248 	.word	0x20016248

08004bd4 <__malloc_lock>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__malloc_lock+0x8>)
 8004bd6:	f7ff b87e 	b.w	8003cd6 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20016244 	.word	0x20016244

08004be0 <__malloc_unlock>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__malloc_unlock+0x8>)
 8004be2:	f7ff b879 	b.w	8003cd8 <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	20016244 	.word	0x20016244

08004bec <_Balloc>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	69c6      	ldr	r6, [r0, #28]
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	b976      	cbnz	r6, 8004c14 <_Balloc+0x28>
 8004bf6:	2010      	movs	r0, #16
 8004bf8:	f7ff ff44 	bl	8004a84 <malloc>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	61e0      	str	r0, [r4, #28]
 8004c00:	b920      	cbnz	r0, 8004c0c <_Balloc+0x20>
 8004c02:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <_Balloc+0x78>)
 8004c04:	4818      	ldr	r0, [pc, #96]	; (8004c68 <_Balloc+0x7c>)
 8004c06:	216b      	movs	r1, #107	; 0x6b
 8004c08:	f000 fc2a 	bl	8005460 <__assert_func>
 8004c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c10:	6006      	str	r6, [r0, #0]
 8004c12:	60c6      	str	r6, [r0, #12]
 8004c14:	69e6      	ldr	r6, [r4, #28]
 8004c16:	68f3      	ldr	r3, [r6, #12]
 8004c18:	b183      	cbz	r3, 8004c3c <_Balloc+0x50>
 8004c1a:	69e3      	ldr	r3, [r4, #28]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c22:	b9b8      	cbnz	r0, 8004c54 <_Balloc+0x68>
 8004c24:	2101      	movs	r1, #1
 8004c26:	fa01 f605 	lsl.w	r6, r1, r5
 8004c2a:	1d72      	adds	r2, r6, #5
 8004c2c:	0092      	lsls	r2, r2, #2
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f000 fc34 	bl	800549c <_calloc_r>
 8004c34:	b160      	cbz	r0, 8004c50 <_Balloc+0x64>
 8004c36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c3a:	e00e      	b.n	8004c5a <_Balloc+0x6e>
 8004c3c:	2221      	movs	r2, #33	; 0x21
 8004c3e:	2104      	movs	r1, #4
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 fc2b 	bl	800549c <_calloc_r>
 8004c46:	69e3      	ldr	r3, [r4, #28]
 8004c48:	60f0      	str	r0, [r6, #12]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e4      	bne.n	8004c1a <_Balloc+0x2e>
 8004c50:	2000      	movs	r0, #0
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	6802      	ldr	r2, [r0, #0]
 8004c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c60:	e7f7      	b.n	8004c52 <_Balloc+0x66>
 8004c62:	bf00      	nop
 8004c64:	08005af1 	.word	0x08005af1
 8004c68:	08005b71 	.word	0x08005b71

08004c6c <_Bfree>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	69c6      	ldr	r6, [r0, #28]
 8004c70:	4605      	mov	r5, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	b976      	cbnz	r6, 8004c94 <_Bfree+0x28>
 8004c76:	2010      	movs	r0, #16
 8004c78:	f7ff ff04 	bl	8004a84 <malloc>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	61e8      	str	r0, [r5, #28]
 8004c80:	b920      	cbnz	r0, 8004c8c <_Bfree+0x20>
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <_Bfree+0x3c>)
 8004c84:	4809      	ldr	r0, [pc, #36]	; (8004cac <_Bfree+0x40>)
 8004c86:	218f      	movs	r1, #143	; 0x8f
 8004c88:	f000 fbea 	bl	8005460 <__assert_func>
 8004c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c90:	6006      	str	r6, [r0, #0]
 8004c92:	60c6      	str	r6, [r0, #12]
 8004c94:	b13c      	cbz	r4, 8004ca6 <_Bfree+0x3a>
 8004c96:	69eb      	ldr	r3, [r5, #28]
 8004c98:	6862      	ldr	r2, [r4, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ca0:	6021      	str	r1, [r4, #0]
 8004ca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	08005af1 	.word	0x08005af1
 8004cac:	08005b71 	.word	0x08005b71

08004cb0 <__multadd>:
 8004cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb4:	690d      	ldr	r5, [r1, #16]
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	461e      	mov	r6, r3
 8004cbc:	f101 0c14 	add.w	ip, r1, #20
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f8dc 3000 	ldr.w	r3, [ip]
 8004cc6:	b299      	uxth	r1, r3
 8004cc8:	fb02 6101 	mla	r1, r2, r1, r6
 8004ccc:	0c1e      	lsrs	r6, r3, #16
 8004cce:	0c0b      	lsrs	r3, r1, #16
 8004cd0:	fb02 3306 	mla	r3, r2, r6, r3
 8004cd4:	b289      	uxth	r1, r1
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004cdc:	4285      	cmp	r5, r0
 8004cde:	f84c 1b04 	str.w	r1, [ip], #4
 8004ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ce6:	dcec      	bgt.n	8004cc2 <__multadd+0x12>
 8004ce8:	b30e      	cbz	r6, 8004d2e <__multadd+0x7e>
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dc19      	bgt.n	8004d24 <__multadd+0x74>
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	3101      	adds	r1, #1
 8004cf6:	f7ff ff79 	bl	8004bec <_Balloc>
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	b928      	cbnz	r0, 8004d0a <__multadd+0x5a>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <__multadd+0x84>)
 8004d02:	480d      	ldr	r0, [pc, #52]	; (8004d38 <__multadd+0x88>)
 8004d04:	21ba      	movs	r1, #186	; 0xba
 8004d06:	f000 fbab 	bl	8005460 <__assert_func>
 8004d0a:	6922      	ldr	r2, [r4, #16]
 8004d0c:	3202      	adds	r2, #2
 8004d0e:	f104 010c 	add.w	r1, r4, #12
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	300c      	adds	r0, #12
 8004d16:	f7fe ffe0 	bl	8003cda <memcpy>
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ffa5 	bl	8004c6c <_Bfree>
 8004d22:	4644      	mov	r4, r8
 8004d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d28:	3501      	adds	r5, #1
 8004d2a:	615e      	str	r6, [r3, #20]
 8004d2c:	6125      	str	r5, [r4, #16]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	08005b60 	.word	0x08005b60
 8004d38:	08005b71 	.word	0x08005b71

08004d3c <__hi0bits>:
 8004d3c:	0c03      	lsrs	r3, r0, #16
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	b9d3      	cbnz	r3, 8004d78 <__hi0bits+0x3c>
 8004d42:	0400      	lsls	r0, r0, #16
 8004d44:	2310      	movs	r3, #16
 8004d46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d4a:	bf04      	itt	eq
 8004d4c:	0200      	lsleq	r0, r0, #8
 8004d4e:	3308      	addeq	r3, #8
 8004d50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d54:	bf04      	itt	eq
 8004d56:	0100      	lsleq	r0, r0, #4
 8004d58:	3304      	addeq	r3, #4
 8004d5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d5e:	bf04      	itt	eq
 8004d60:	0080      	lsleq	r0, r0, #2
 8004d62:	3302      	addeq	r3, #2
 8004d64:	2800      	cmp	r0, #0
 8004d66:	db05      	blt.n	8004d74 <__hi0bits+0x38>
 8004d68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004d6c:	f103 0301 	add.w	r3, r3, #1
 8004d70:	bf08      	it	eq
 8004d72:	2320      	moveq	r3, #32
 8004d74:	4618      	mov	r0, r3
 8004d76:	4770      	bx	lr
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e7e4      	b.n	8004d46 <__hi0bits+0xa>

08004d7c <__lo0bits>:
 8004d7c:	6803      	ldr	r3, [r0, #0]
 8004d7e:	f013 0207 	ands.w	r2, r3, #7
 8004d82:	d00c      	beq.n	8004d9e <__lo0bits+0x22>
 8004d84:	07d9      	lsls	r1, r3, #31
 8004d86:	d422      	bmi.n	8004dce <__lo0bits+0x52>
 8004d88:	079a      	lsls	r2, r3, #30
 8004d8a:	bf49      	itett	mi
 8004d8c:	085b      	lsrmi	r3, r3, #1
 8004d8e:	089b      	lsrpl	r3, r3, #2
 8004d90:	6003      	strmi	r3, [r0, #0]
 8004d92:	2201      	movmi	r2, #1
 8004d94:	bf5c      	itt	pl
 8004d96:	6003      	strpl	r3, [r0, #0]
 8004d98:	2202      	movpl	r2, #2
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4770      	bx	lr
 8004d9e:	b299      	uxth	r1, r3
 8004da0:	b909      	cbnz	r1, 8004da6 <__lo0bits+0x2a>
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	2210      	movs	r2, #16
 8004da6:	b2d9      	uxtb	r1, r3
 8004da8:	b909      	cbnz	r1, 8004dae <__lo0bits+0x32>
 8004daa:	3208      	adds	r2, #8
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	0719      	lsls	r1, r3, #28
 8004db0:	bf04      	itt	eq
 8004db2:	091b      	lsreq	r3, r3, #4
 8004db4:	3204      	addeq	r2, #4
 8004db6:	0799      	lsls	r1, r3, #30
 8004db8:	bf04      	itt	eq
 8004dba:	089b      	lsreq	r3, r3, #2
 8004dbc:	3202      	addeq	r2, #2
 8004dbe:	07d9      	lsls	r1, r3, #31
 8004dc0:	d403      	bmi.n	8004dca <__lo0bits+0x4e>
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	f102 0201 	add.w	r2, r2, #1
 8004dc8:	d003      	beq.n	8004dd2 <__lo0bits+0x56>
 8004dca:	6003      	str	r3, [r0, #0]
 8004dcc:	e7e5      	b.n	8004d9a <__lo0bits+0x1e>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	e7e3      	b.n	8004d9a <__lo0bits+0x1e>
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	e7e1      	b.n	8004d9a <__lo0bits+0x1e>
	...

08004dd8 <__i2b>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	2101      	movs	r1, #1
 8004dde:	f7ff ff05 	bl	8004bec <_Balloc>
 8004de2:	4602      	mov	r2, r0
 8004de4:	b928      	cbnz	r0, 8004df2 <__i2b+0x1a>
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <__i2b+0x24>)
 8004de8:	4805      	ldr	r0, [pc, #20]	; (8004e00 <__i2b+0x28>)
 8004dea:	f240 1145 	movw	r1, #325	; 0x145
 8004dee:	f000 fb37 	bl	8005460 <__assert_func>
 8004df2:	2301      	movs	r3, #1
 8004df4:	6144      	str	r4, [r0, #20]
 8004df6:	6103      	str	r3, [r0, #16]
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08005b60 	.word	0x08005b60
 8004e00:	08005b71 	.word	0x08005b71

08004e04 <__multiply>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4691      	mov	r9, r2
 8004e0a:	690a      	ldr	r2, [r1, #16]
 8004e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bfb8      	it	lt
 8004e14:	460b      	movlt	r3, r1
 8004e16:	460c      	mov	r4, r1
 8004e18:	bfbc      	itt	lt
 8004e1a:	464c      	movlt	r4, r9
 8004e1c:	4699      	movlt	r9, r3
 8004e1e:	6927      	ldr	r7, [r4, #16]
 8004e20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e24:	68a3      	ldr	r3, [r4, #8]
 8004e26:	6861      	ldr	r1, [r4, #4]
 8004e28:	eb07 060a 	add.w	r6, r7, sl
 8004e2c:	42b3      	cmp	r3, r6
 8004e2e:	b085      	sub	sp, #20
 8004e30:	bfb8      	it	lt
 8004e32:	3101      	addlt	r1, #1
 8004e34:	f7ff feda 	bl	8004bec <_Balloc>
 8004e38:	b930      	cbnz	r0, 8004e48 <__multiply+0x44>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b44      	ldr	r3, [pc, #272]	; (8004f50 <__multiply+0x14c>)
 8004e3e:	4845      	ldr	r0, [pc, #276]	; (8004f54 <__multiply+0x150>)
 8004e40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004e44:	f000 fb0c 	bl	8005460 <__assert_func>
 8004e48:	f100 0514 	add.w	r5, r0, #20
 8004e4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e50:	462b      	mov	r3, r5
 8004e52:	2200      	movs	r2, #0
 8004e54:	4543      	cmp	r3, r8
 8004e56:	d321      	bcc.n	8004e9c <__multiply+0x98>
 8004e58:	f104 0314 	add.w	r3, r4, #20
 8004e5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004e60:	f109 0314 	add.w	r3, r9, #20
 8004e64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004e68:	9202      	str	r2, [sp, #8]
 8004e6a:	1b3a      	subs	r2, r7, r4
 8004e6c:	3a15      	subs	r2, #21
 8004e6e:	f022 0203 	bic.w	r2, r2, #3
 8004e72:	3204      	adds	r2, #4
 8004e74:	f104 0115 	add.w	r1, r4, #21
 8004e78:	428f      	cmp	r7, r1
 8004e7a:	bf38      	it	cc
 8004e7c:	2204      	movcc	r2, #4
 8004e7e:	9201      	str	r2, [sp, #4]
 8004e80:	9a02      	ldr	r2, [sp, #8]
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d80c      	bhi.n	8004ea2 <__multiply+0x9e>
 8004e88:	2e00      	cmp	r6, #0
 8004e8a:	dd03      	ble.n	8004e94 <__multiply+0x90>
 8004e8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d05b      	beq.n	8004f4c <__multiply+0x148>
 8004e94:	6106      	str	r6, [r0, #16]
 8004e96:	b005      	add	sp, #20
 8004e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9c:	f843 2b04 	str.w	r2, [r3], #4
 8004ea0:	e7d8      	b.n	8004e54 <__multiply+0x50>
 8004ea2:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ea6:	f1ba 0f00 	cmp.w	sl, #0
 8004eaa:	d024      	beq.n	8004ef6 <__multiply+0xf2>
 8004eac:	f104 0e14 	add.w	lr, r4, #20
 8004eb0:	46a9      	mov	r9, r5
 8004eb2:	f04f 0c00 	mov.w	ip, #0
 8004eb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004eba:	f8d9 1000 	ldr.w	r1, [r9]
 8004ebe:	fa1f fb82 	uxth.w	fp, r2
 8004ec2:	b289      	uxth	r1, r1
 8004ec4:	fb0a 110b 	mla	r1, sl, fp, r1
 8004ec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ed0:	4461      	add	r1, ip
 8004ed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004ed6:	fb0a c20b 	mla	r2, sl, fp, ip
 8004eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004ede:	b289      	uxth	r1, r1
 8004ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ee4:	4577      	cmp	r7, lr
 8004ee6:	f849 1b04 	str.w	r1, [r9], #4
 8004eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004eee:	d8e2      	bhi.n	8004eb6 <__multiply+0xb2>
 8004ef0:	9a01      	ldr	r2, [sp, #4]
 8004ef2:	f845 c002 	str.w	ip, [r5, r2]
 8004ef6:	9a03      	ldr	r2, [sp, #12]
 8004ef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004efc:	3304      	adds	r3, #4
 8004efe:	f1b9 0f00 	cmp.w	r9, #0
 8004f02:	d021      	beq.n	8004f48 <__multiply+0x144>
 8004f04:	6829      	ldr	r1, [r5, #0]
 8004f06:	f104 0c14 	add.w	ip, r4, #20
 8004f0a:	46ae      	mov	lr, r5
 8004f0c:	f04f 0a00 	mov.w	sl, #0
 8004f10:	f8bc b000 	ldrh.w	fp, [ip]
 8004f14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004f18:	fb09 220b 	mla	r2, r9, fp, r2
 8004f1c:	4452      	add	r2, sl
 8004f1e:	b289      	uxth	r1, r1
 8004f20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f24:	f84e 1b04 	str.w	r1, [lr], #4
 8004f28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004f2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f30:	f8be 1000 	ldrh.w	r1, [lr]
 8004f34:	fb09 110a 	mla	r1, r9, sl, r1
 8004f38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004f3c:	4567      	cmp	r7, ip
 8004f3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f42:	d8e5      	bhi.n	8004f10 <__multiply+0x10c>
 8004f44:	9a01      	ldr	r2, [sp, #4]
 8004f46:	50a9      	str	r1, [r5, r2]
 8004f48:	3504      	adds	r5, #4
 8004f4a:	e799      	b.n	8004e80 <__multiply+0x7c>
 8004f4c:	3e01      	subs	r6, #1
 8004f4e:	e79b      	b.n	8004e88 <__multiply+0x84>
 8004f50:	08005b60 	.word	0x08005b60
 8004f54:	08005b71 	.word	0x08005b71

08004f58 <__pow5mult>:
 8004f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5c:	4615      	mov	r5, r2
 8004f5e:	f012 0203 	ands.w	r2, r2, #3
 8004f62:	4606      	mov	r6, r0
 8004f64:	460f      	mov	r7, r1
 8004f66:	d007      	beq.n	8004f78 <__pow5mult+0x20>
 8004f68:	4c25      	ldr	r4, [pc, #148]	; (8005000 <__pow5mult+0xa8>)
 8004f6a:	3a01      	subs	r2, #1
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f72:	f7ff fe9d 	bl	8004cb0 <__multadd>
 8004f76:	4607      	mov	r7, r0
 8004f78:	10ad      	asrs	r5, r5, #2
 8004f7a:	d03d      	beq.n	8004ff8 <__pow5mult+0xa0>
 8004f7c:	69f4      	ldr	r4, [r6, #28]
 8004f7e:	b97c      	cbnz	r4, 8004fa0 <__pow5mult+0x48>
 8004f80:	2010      	movs	r0, #16
 8004f82:	f7ff fd7f 	bl	8004a84 <malloc>
 8004f86:	4602      	mov	r2, r0
 8004f88:	61f0      	str	r0, [r6, #28]
 8004f8a:	b928      	cbnz	r0, 8004f98 <__pow5mult+0x40>
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <__pow5mult+0xac>)
 8004f8e:	481e      	ldr	r0, [pc, #120]	; (8005008 <__pow5mult+0xb0>)
 8004f90:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004f94:	f000 fa64 	bl	8005460 <__assert_func>
 8004f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f9c:	6004      	str	r4, [r0, #0]
 8004f9e:	60c4      	str	r4, [r0, #12]
 8004fa0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fa8:	b94c      	cbnz	r4, 8004fbe <__pow5mult+0x66>
 8004faa:	f240 2171 	movw	r1, #625	; 0x271
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ff12 	bl	8004dd8 <__i2b>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004fba:	4604      	mov	r4, r0
 8004fbc:	6003      	str	r3, [r0, #0]
 8004fbe:	f04f 0900 	mov.w	r9, #0
 8004fc2:	07eb      	lsls	r3, r5, #31
 8004fc4:	d50a      	bpl.n	8004fdc <__pow5mult+0x84>
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	4622      	mov	r2, r4
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff ff1a 	bl	8004e04 <__multiply>
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff fe49 	bl	8004c6c <_Bfree>
 8004fda:	4647      	mov	r7, r8
 8004fdc:	106d      	asrs	r5, r5, #1
 8004fde:	d00b      	beq.n	8004ff8 <__pow5mult+0xa0>
 8004fe0:	6820      	ldr	r0, [r4, #0]
 8004fe2:	b938      	cbnz	r0, 8004ff4 <__pow5mult+0x9c>
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f7ff ff0b 	bl	8004e04 <__multiply>
 8004fee:	6020      	str	r0, [r4, #0]
 8004ff0:	f8c0 9000 	str.w	r9, [r0]
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	e7e4      	b.n	8004fc2 <__pow5mult+0x6a>
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ffe:	bf00      	nop
 8005000:	08005cc0 	.word	0x08005cc0
 8005004:	08005af1 	.word	0x08005af1
 8005008:	08005b71 	.word	0x08005b71

0800500c <__lshift>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	460c      	mov	r4, r1
 8005012:	6849      	ldr	r1, [r1, #4]
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	4607      	mov	r7, r0
 800501e:	4691      	mov	r9, r2
 8005020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005024:	f108 0601 	add.w	r6, r8, #1
 8005028:	42b3      	cmp	r3, r6
 800502a:	db0b      	blt.n	8005044 <__lshift+0x38>
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff fddd 	bl	8004bec <_Balloc>
 8005032:	4605      	mov	r5, r0
 8005034:	b948      	cbnz	r0, 800504a <__lshift+0x3e>
 8005036:	4602      	mov	r2, r0
 8005038:	4b28      	ldr	r3, [pc, #160]	; (80050dc <__lshift+0xd0>)
 800503a:	4829      	ldr	r0, [pc, #164]	; (80050e0 <__lshift+0xd4>)
 800503c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005040:	f000 fa0e 	bl	8005460 <__assert_func>
 8005044:	3101      	adds	r1, #1
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	e7ee      	b.n	8005028 <__lshift+0x1c>
 800504a:	2300      	movs	r3, #0
 800504c:	f100 0114 	add.w	r1, r0, #20
 8005050:	f100 0210 	add.w	r2, r0, #16
 8005054:	4618      	mov	r0, r3
 8005056:	4553      	cmp	r3, sl
 8005058:	db33      	blt.n	80050c2 <__lshift+0xb6>
 800505a:	6920      	ldr	r0, [r4, #16]
 800505c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005060:	f104 0314 	add.w	r3, r4, #20
 8005064:	f019 091f 	ands.w	r9, r9, #31
 8005068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800506c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005070:	d02b      	beq.n	80050ca <__lshift+0xbe>
 8005072:	f1c9 0e20 	rsb	lr, r9, #32
 8005076:	468a      	mov	sl, r1
 8005078:	2200      	movs	r2, #0
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	fa00 f009 	lsl.w	r0, r0, r9
 8005080:	4310      	orrs	r0, r2
 8005082:	f84a 0b04 	str.w	r0, [sl], #4
 8005086:	f853 2b04 	ldr.w	r2, [r3], #4
 800508a:	459c      	cmp	ip, r3
 800508c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005090:	d8f3      	bhi.n	800507a <__lshift+0x6e>
 8005092:	ebac 0304 	sub.w	r3, ip, r4
 8005096:	3b15      	subs	r3, #21
 8005098:	f023 0303 	bic.w	r3, r3, #3
 800509c:	3304      	adds	r3, #4
 800509e:	f104 0015 	add.w	r0, r4, #21
 80050a2:	4584      	cmp	ip, r0
 80050a4:	bf38      	it	cc
 80050a6:	2304      	movcc	r3, #4
 80050a8:	50ca      	str	r2, [r1, r3]
 80050aa:	b10a      	cbz	r2, 80050b0 <__lshift+0xa4>
 80050ac:	f108 0602 	add.w	r6, r8, #2
 80050b0:	3e01      	subs	r6, #1
 80050b2:	4638      	mov	r0, r7
 80050b4:	612e      	str	r6, [r5, #16]
 80050b6:	4621      	mov	r1, r4
 80050b8:	f7ff fdd8 	bl	8004c6c <_Bfree>
 80050bc:	4628      	mov	r0, r5
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80050c6:	3301      	adds	r3, #1
 80050c8:	e7c5      	b.n	8005056 <__lshift+0x4a>
 80050ca:	3904      	subs	r1, #4
 80050cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80050d4:	459c      	cmp	ip, r3
 80050d6:	d8f9      	bhi.n	80050cc <__lshift+0xc0>
 80050d8:	e7ea      	b.n	80050b0 <__lshift+0xa4>
 80050da:	bf00      	nop
 80050dc:	08005b60 	.word	0x08005b60
 80050e0:	08005b71 	.word	0x08005b71

080050e4 <__mcmp>:
 80050e4:	b530      	push	{r4, r5, lr}
 80050e6:	6902      	ldr	r2, [r0, #16]
 80050e8:	690c      	ldr	r4, [r1, #16]
 80050ea:	1b12      	subs	r2, r2, r4
 80050ec:	d10e      	bne.n	800510c <__mcmp+0x28>
 80050ee:	f100 0314 	add.w	r3, r0, #20
 80050f2:	3114      	adds	r1, #20
 80050f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80050f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80050fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005100:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005104:	42a5      	cmp	r5, r4
 8005106:	d003      	beq.n	8005110 <__mcmp+0x2c>
 8005108:	d305      	bcc.n	8005116 <__mcmp+0x32>
 800510a:	2201      	movs	r2, #1
 800510c:	4610      	mov	r0, r2
 800510e:	bd30      	pop	{r4, r5, pc}
 8005110:	4283      	cmp	r3, r0
 8005112:	d3f3      	bcc.n	80050fc <__mcmp+0x18>
 8005114:	e7fa      	b.n	800510c <__mcmp+0x28>
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	e7f7      	b.n	800510c <__mcmp+0x28>

0800511c <__mdiff>:
 800511c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	460c      	mov	r4, r1
 8005122:	4606      	mov	r6, r0
 8005124:	4611      	mov	r1, r2
 8005126:	4620      	mov	r0, r4
 8005128:	4690      	mov	r8, r2
 800512a:	f7ff ffdb 	bl	80050e4 <__mcmp>
 800512e:	1e05      	subs	r5, r0, #0
 8005130:	d110      	bne.n	8005154 <__mdiff+0x38>
 8005132:	4629      	mov	r1, r5
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff fd59 	bl	8004bec <_Balloc>
 800513a:	b930      	cbnz	r0, 800514a <__mdiff+0x2e>
 800513c:	4b3a      	ldr	r3, [pc, #232]	; (8005228 <__mdiff+0x10c>)
 800513e:	4602      	mov	r2, r0
 8005140:	f240 2137 	movw	r1, #567	; 0x237
 8005144:	4839      	ldr	r0, [pc, #228]	; (800522c <__mdiff+0x110>)
 8005146:	f000 f98b 	bl	8005460 <__assert_func>
 800514a:	2301      	movs	r3, #1
 800514c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005154:	bfa4      	itt	ge
 8005156:	4643      	movge	r3, r8
 8005158:	46a0      	movge	r8, r4
 800515a:	4630      	mov	r0, r6
 800515c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005160:	bfa6      	itte	ge
 8005162:	461c      	movge	r4, r3
 8005164:	2500      	movge	r5, #0
 8005166:	2501      	movlt	r5, #1
 8005168:	f7ff fd40 	bl	8004bec <_Balloc>
 800516c:	b920      	cbnz	r0, 8005178 <__mdiff+0x5c>
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <__mdiff+0x10c>)
 8005170:	4602      	mov	r2, r0
 8005172:	f240 2145 	movw	r1, #581	; 0x245
 8005176:	e7e5      	b.n	8005144 <__mdiff+0x28>
 8005178:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800517c:	6926      	ldr	r6, [r4, #16]
 800517e:	60c5      	str	r5, [r0, #12]
 8005180:	f104 0914 	add.w	r9, r4, #20
 8005184:	f108 0514 	add.w	r5, r8, #20
 8005188:	f100 0e14 	add.w	lr, r0, #20
 800518c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005190:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005194:	f108 0210 	add.w	r2, r8, #16
 8005198:	46f2      	mov	sl, lr
 800519a:	2100      	movs	r1, #0
 800519c:	f859 3b04 	ldr.w	r3, [r9], #4
 80051a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80051a4:	fa11 f88b 	uxtah	r8, r1, fp
 80051a8:	b299      	uxth	r1, r3
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	eba8 0801 	sub.w	r8, r8, r1
 80051b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80051b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80051b8:	fa1f f888 	uxth.w	r8, r8
 80051bc:	1419      	asrs	r1, r3, #16
 80051be:	454e      	cmp	r6, r9
 80051c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80051c4:	f84a 3b04 	str.w	r3, [sl], #4
 80051c8:	d8e8      	bhi.n	800519c <__mdiff+0x80>
 80051ca:	1b33      	subs	r3, r6, r4
 80051cc:	3b15      	subs	r3, #21
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	3304      	adds	r3, #4
 80051d4:	3415      	adds	r4, #21
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	bf38      	it	cc
 80051da:	2304      	movcc	r3, #4
 80051dc:	441d      	add	r5, r3
 80051de:	4473      	add	r3, lr
 80051e0:	469e      	mov	lr, r3
 80051e2:	462e      	mov	r6, r5
 80051e4:	4566      	cmp	r6, ip
 80051e6:	d30e      	bcc.n	8005206 <__mdiff+0xea>
 80051e8:	f10c 0203 	add.w	r2, ip, #3
 80051ec:	1b52      	subs	r2, r2, r5
 80051ee:	f022 0203 	bic.w	r2, r2, #3
 80051f2:	3d03      	subs	r5, #3
 80051f4:	45ac      	cmp	ip, r5
 80051f6:	bf38      	it	cc
 80051f8:	2200      	movcc	r2, #0
 80051fa:	4413      	add	r3, r2
 80051fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005200:	b17a      	cbz	r2, 8005222 <__mdiff+0x106>
 8005202:	6107      	str	r7, [r0, #16]
 8005204:	e7a4      	b.n	8005150 <__mdiff+0x34>
 8005206:	f856 8b04 	ldr.w	r8, [r6], #4
 800520a:	fa11 f288 	uxtah	r2, r1, r8
 800520e:	1414      	asrs	r4, r2, #16
 8005210:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005214:	b292      	uxth	r2, r2
 8005216:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800521a:	f84e 2b04 	str.w	r2, [lr], #4
 800521e:	1421      	asrs	r1, r4, #16
 8005220:	e7e0      	b.n	80051e4 <__mdiff+0xc8>
 8005222:	3f01      	subs	r7, #1
 8005224:	e7ea      	b.n	80051fc <__mdiff+0xe0>
 8005226:	bf00      	nop
 8005228:	08005b60 	.word	0x08005b60
 800522c:	08005b71 	.word	0x08005b71

08005230 <__d2b>:
 8005230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005234:	460f      	mov	r7, r1
 8005236:	2101      	movs	r1, #1
 8005238:	ec59 8b10 	vmov	r8, r9, d0
 800523c:	4616      	mov	r6, r2
 800523e:	f7ff fcd5 	bl	8004bec <_Balloc>
 8005242:	4604      	mov	r4, r0
 8005244:	b930      	cbnz	r0, 8005254 <__d2b+0x24>
 8005246:	4602      	mov	r2, r0
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <__d2b+0xac>)
 800524a:	4825      	ldr	r0, [pc, #148]	; (80052e0 <__d2b+0xb0>)
 800524c:	f240 310f 	movw	r1, #783	; 0x30f
 8005250:	f000 f906 	bl	8005460 <__assert_func>
 8005254:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800525c:	bb2d      	cbnz	r5, 80052aa <__d2b+0x7a>
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	f1b8 0300 	subs.w	r3, r8, #0
 8005264:	d026      	beq.n	80052b4 <__d2b+0x84>
 8005266:	4668      	mov	r0, sp
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	f7ff fd87 	bl	8004d7c <__lo0bits>
 800526e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005272:	b1e8      	cbz	r0, 80052b0 <__d2b+0x80>
 8005274:	f1c0 0320 	rsb	r3, r0, #32
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	430b      	orrs	r3, r1
 800527e:	40c2      	lsrs	r2, r0
 8005280:	6163      	str	r3, [r4, #20]
 8005282:	9201      	str	r2, [sp, #4]
 8005284:	9b01      	ldr	r3, [sp, #4]
 8005286:	61a3      	str	r3, [r4, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf14      	ite	ne
 800528c:	2202      	movne	r2, #2
 800528e:	2201      	moveq	r2, #1
 8005290:	6122      	str	r2, [r4, #16]
 8005292:	b1bd      	cbz	r5, 80052c4 <__d2b+0x94>
 8005294:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005298:	4405      	add	r5, r0
 800529a:	603d      	str	r5, [r7, #0]
 800529c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80052a0:	6030      	str	r0, [r6, #0]
 80052a2:	4620      	mov	r0, r4
 80052a4:	b003      	add	sp, #12
 80052a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ae:	e7d6      	b.n	800525e <__d2b+0x2e>
 80052b0:	6161      	str	r1, [r4, #20]
 80052b2:	e7e7      	b.n	8005284 <__d2b+0x54>
 80052b4:	a801      	add	r0, sp, #4
 80052b6:	f7ff fd61 	bl	8004d7c <__lo0bits>
 80052ba:	9b01      	ldr	r3, [sp, #4]
 80052bc:	6163      	str	r3, [r4, #20]
 80052be:	3020      	adds	r0, #32
 80052c0:	2201      	movs	r2, #1
 80052c2:	e7e5      	b.n	8005290 <__d2b+0x60>
 80052c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80052c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80052cc:	6038      	str	r0, [r7, #0]
 80052ce:	6918      	ldr	r0, [r3, #16]
 80052d0:	f7ff fd34 	bl	8004d3c <__hi0bits>
 80052d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80052d8:	e7e2      	b.n	80052a0 <__d2b+0x70>
 80052da:	bf00      	nop
 80052dc:	08005b60 	.word	0x08005b60
 80052e0:	08005b71 	.word	0x08005b71

080052e4 <__sflush_r>:
 80052e4:	898a      	ldrh	r2, [r1, #12]
 80052e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	0710      	lsls	r0, r2, #28
 80052ee:	460c      	mov	r4, r1
 80052f0:	d458      	bmi.n	80053a4 <__sflush_r+0xc0>
 80052f2:	684b      	ldr	r3, [r1, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dc05      	bgt.n	8005304 <__sflush_r+0x20>
 80052f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	dc02      	bgt.n	8005304 <__sflush_r+0x20>
 80052fe:	2000      	movs	r0, #0
 8005300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005306:	2e00      	cmp	r6, #0
 8005308:	d0f9      	beq.n	80052fe <__sflush_r+0x1a>
 800530a:	2300      	movs	r3, #0
 800530c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005310:	682f      	ldr	r7, [r5, #0]
 8005312:	6a21      	ldr	r1, [r4, #32]
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	d032      	beq.n	800537e <__sflush_r+0x9a>
 8005318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	075a      	lsls	r2, r3, #29
 800531e:	d505      	bpl.n	800532c <__sflush_r+0x48>
 8005320:	6863      	ldr	r3, [r4, #4]
 8005322:	1ac0      	subs	r0, r0, r3
 8005324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005326:	b10b      	cbz	r3, 800532c <__sflush_r+0x48>
 8005328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800532a:	1ac0      	subs	r0, r0, r3
 800532c:	2300      	movs	r3, #0
 800532e:	4602      	mov	r2, r0
 8005330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005332:	6a21      	ldr	r1, [r4, #32]
 8005334:	4628      	mov	r0, r5
 8005336:	47b0      	blx	r6
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	d106      	bne.n	800534c <__sflush_r+0x68>
 800533e:	6829      	ldr	r1, [r5, #0]
 8005340:	291d      	cmp	r1, #29
 8005342:	d82b      	bhi.n	800539c <__sflush_r+0xb8>
 8005344:	4a29      	ldr	r2, [pc, #164]	; (80053ec <__sflush_r+0x108>)
 8005346:	410a      	asrs	r2, r1
 8005348:	07d6      	lsls	r6, r2, #31
 800534a:	d427      	bmi.n	800539c <__sflush_r+0xb8>
 800534c:	2200      	movs	r2, #0
 800534e:	6062      	str	r2, [r4, #4]
 8005350:	04d9      	lsls	r1, r3, #19
 8005352:	6922      	ldr	r2, [r4, #16]
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	d504      	bpl.n	8005362 <__sflush_r+0x7e>
 8005358:	1c42      	adds	r2, r0, #1
 800535a:	d101      	bne.n	8005360 <__sflush_r+0x7c>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b903      	cbnz	r3, 8005362 <__sflush_r+0x7e>
 8005360:	6560      	str	r0, [r4, #84]	; 0x54
 8005362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005364:	602f      	str	r7, [r5, #0]
 8005366:	2900      	cmp	r1, #0
 8005368:	d0c9      	beq.n	80052fe <__sflush_r+0x1a>
 800536a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800536e:	4299      	cmp	r1, r3
 8005370:	d002      	beq.n	8005378 <__sflush_r+0x94>
 8005372:	4628      	mov	r0, r5
 8005374:	f7ff fb3a 	bl	80049ec <_free_r>
 8005378:	2000      	movs	r0, #0
 800537a:	6360      	str	r0, [r4, #52]	; 0x34
 800537c:	e7c0      	b.n	8005300 <__sflush_r+0x1c>
 800537e:	2301      	movs	r3, #1
 8005380:	4628      	mov	r0, r5
 8005382:	47b0      	blx	r6
 8005384:	1c41      	adds	r1, r0, #1
 8005386:	d1c8      	bne.n	800531a <__sflush_r+0x36>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0c5      	beq.n	800531a <__sflush_r+0x36>
 800538e:	2b1d      	cmp	r3, #29
 8005390:	d001      	beq.n	8005396 <__sflush_r+0xb2>
 8005392:	2b16      	cmp	r3, #22
 8005394:	d101      	bne.n	800539a <__sflush_r+0xb6>
 8005396:	602f      	str	r7, [r5, #0]
 8005398:	e7b1      	b.n	80052fe <__sflush_r+0x1a>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	e7ad      	b.n	8005300 <__sflush_r+0x1c>
 80053a4:	690f      	ldr	r7, [r1, #16]
 80053a6:	2f00      	cmp	r7, #0
 80053a8:	d0a9      	beq.n	80052fe <__sflush_r+0x1a>
 80053aa:	0793      	lsls	r3, r2, #30
 80053ac:	680e      	ldr	r6, [r1, #0]
 80053ae:	bf08      	it	eq
 80053b0:	694b      	ldreq	r3, [r1, #20]
 80053b2:	600f      	str	r7, [r1, #0]
 80053b4:	bf18      	it	ne
 80053b6:	2300      	movne	r3, #0
 80053b8:	eba6 0807 	sub.w	r8, r6, r7
 80053bc:	608b      	str	r3, [r1, #8]
 80053be:	f1b8 0f00 	cmp.w	r8, #0
 80053c2:	dd9c      	ble.n	80052fe <__sflush_r+0x1a>
 80053c4:	6a21      	ldr	r1, [r4, #32]
 80053c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053c8:	4643      	mov	r3, r8
 80053ca:	463a      	mov	r2, r7
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b0      	blx	r6
 80053d0:	2800      	cmp	r0, #0
 80053d2:	dc06      	bgt.n	80053e2 <__sflush_r+0xfe>
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	e78e      	b.n	8005300 <__sflush_r+0x1c>
 80053e2:	4407      	add	r7, r0
 80053e4:	eba8 0800 	sub.w	r8, r8, r0
 80053e8:	e7e9      	b.n	80053be <__sflush_r+0xda>
 80053ea:	bf00      	nop
 80053ec:	dfbffffe 	.word	0xdfbffffe

080053f0 <_fflush_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	690b      	ldr	r3, [r1, #16]
 80053f4:	4605      	mov	r5, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	b913      	cbnz	r3, 8005400 <_fflush_r+0x10>
 80053fa:	2500      	movs	r5, #0
 80053fc:	4628      	mov	r0, r5
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	b118      	cbz	r0, 800540a <_fflush_r+0x1a>
 8005402:	6a03      	ldr	r3, [r0, #32]
 8005404:	b90b      	cbnz	r3, 800540a <_fflush_r+0x1a>
 8005406:	f7fe fb6f 	bl	8003ae8 <__sinit>
 800540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f3      	beq.n	80053fa <_fflush_r+0xa>
 8005412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005414:	07d0      	lsls	r0, r2, #31
 8005416:	d404      	bmi.n	8005422 <_fflush_r+0x32>
 8005418:	0599      	lsls	r1, r3, #22
 800541a:	d402      	bmi.n	8005422 <_fflush_r+0x32>
 800541c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800541e:	f7fe fc5a 	bl	8003cd6 <__retarget_lock_acquire_recursive>
 8005422:	4628      	mov	r0, r5
 8005424:	4621      	mov	r1, r4
 8005426:	f7ff ff5d 	bl	80052e4 <__sflush_r>
 800542a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800542c:	07da      	lsls	r2, r3, #31
 800542e:	4605      	mov	r5, r0
 8005430:	d4e4      	bmi.n	80053fc <_fflush_r+0xc>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	059b      	lsls	r3, r3, #22
 8005436:	d4e1      	bmi.n	80053fc <_fflush_r+0xc>
 8005438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543a:	f7fe fc4d 	bl	8003cd8 <__retarget_lock_release_recursive>
 800543e:	e7dd      	b.n	80053fc <_fflush_r+0xc>

08005440 <_sbrk_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d06      	ldr	r5, [pc, #24]	; (800545c <_sbrk_r+0x1c>)
 8005444:	2300      	movs	r3, #0
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fc f910 	bl	8001670 <_sbrk>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_sbrk_r+0x1a>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_sbrk_r+0x1a>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	20016240 	.word	0x20016240

08005460 <__assert_func>:
 8005460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005462:	4614      	mov	r4, r2
 8005464:	461a      	mov	r2, r3
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <__assert_func+0x2c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4605      	mov	r5, r0
 800546c:	68d8      	ldr	r0, [r3, #12]
 800546e:	b14c      	cbz	r4, 8005484 <__assert_func+0x24>
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <__assert_func+0x30>)
 8005472:	9100      	str	r1, [sp, #0]
 8005474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005478:	4906      	ldr	r1, [pc, #24]	; (8005494 <__assert_func+0x34>)
 800547a:	462b      	mov	r3, r5
 800547c:	f000 f844 	bl	8005508 <fiprintf>
 8005480:	f000 f854 	bl	800552c <abort>
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <__assert_func+0x38>)
 8005486:	461c      	mov	r4, r3
 8005488:	e7f3      	b.n	8005472 <__assert_func+0x12>
 800548a:	bf00      	nop
 800548c:	200002b4 	.word	0x200002b4
 8005490:	08005cd6 	.word	0x08005cd6
 8005494:	08005ce3 	.word	0x08005ce3
 8005498:	08005d11 	.word	0x08005d11

0800549c <_calloc_r>:
 800549c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800549e:	fba1 2402 	umull	r2, r4, r1, r2
 80054a2:	b94c      	cbnz	r4, 80054b8 <_calloc_r+0x1c>
 80054a4:	4611      	mov	r1, r2
 80054a6:	9201      	str	r2, [sp, #4]
 80054a8:	f7ff fb14 	bl	8004ad4 <_malloc_r>
 80054ac:	9a01      	ldr	r2, [sp, #4]
 80054ae:	4605      	mov	r5, r0
 80054b0:	b930      	cbnz	r0, 80054c0 <_calloc_r+0x24>
 80054b2:	4628      	mov	r0, r5
 80054b4:	b003      	add	sp, #12
 80054b6:	bd30      	pop	{r4, r5, pc}
 80054b8:	220c      	movs	r2, #12
 80054ba:	6002      	str	r2, [r0, #0]
 80054bc:	2500      	movs	r5, #0
 80054be:	e7f8      	b.n	80054b2 <_calloc_r+0x16>
 80054c0:	4621      	mov	r1, r4
 80054c2:	f7fe fb8a 	bl	8003bda <memset>
 80054c6:	e7f4      	b.n	80054b2 <_calloc_r+0x16>

080054c8 <__ascii_mbtowc>:
 80054c8:	b082      	sub	sp, #8
 80054ca:	b901      	cbnz	r1, 80054ce <__ascii_mbtowc+0x6>
 80054cc:	a901      	add	r1, sp, #4
 80054ce:	b142      	cbz	r2, 80054e2 <__ascii_mbtowc+0x1a>
 80054d0:	b14b      	cbz	r3, 80054e6 <__ascii_mbtowc+0x1e>
 80054d2:	7813      	ldrb	r3, [r2, #0]
 80054d4:	600b      	str	r3, [r1, #0]
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	1e10      	subs	r0, r2, #0
 80054da:	bf18      	it	ne
 80054dc:	2001      	movne	r0, #1
 80054de:	b002      	add	sp, #8
 80054e0:	4770      	bx	lr
 80054e2:	4610      	mov	r0, r2
 80054e4:	e7fb      	b.n	80054de <__ascii_mbtowc+0x16>
 80054e6:	f06f 0001 	mvn.w	r0, #1
 80054ea:	e7f8      	b.n	80054de <__ascii_mbtowc+0x16>

080054ec <__ascii_wctomb>:
 80054ec:	b149      	cbz	r1, 8005502 <__ascii_wctomb+0x16>
 80054ee:	2aff      	cmp	r2, #255	; 0xff
 80054f0:	bf85      	ittet	hi
 80054f2:	238a      	movhi	r3, #138	; 0x8a
 80054f4:	6003      	strhi	r3, [r0, #0]
 80054f6:	700a      	strbls	r2, [r1, #0]
 80054f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80054fc:	bf98      	it	ls
 80054fe:	2001      	movls	r0, #1
 8005500:	4770      	bx	lr
 8005502:	4608      	mov	r0, r1
 8005504:	4770      	bx	lr
	...

08005508 <fiprintf>:
 8005508:	b40e      	push	{r1, r2, r3}
 800550a:	b503      	push	{r0, r1, lr}
 800550c:	4601      	mov	r1, r0
 800550e:	ab03      	add	r3, sp, #12
 8005510:	4805      	ldr	r0, [pc, #20]	; (8005528 <fiprintf+0x20>)
 8005512:	f853 2b04 	ldr.w	r2, [r3], #4
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	f000 f837 	bl	800558c <_vfiprintf_r>
 800551e:	b002      	add	sp, #8
 8005520:	f85d eb04 	ldr.w	lr, [sp], #4
 8005524:	b003      	add	sp, #12
 8005526:	4770      	bx	lr
 8005528:	200002b4 	.word	0x200002b4

0800552c <abort>:
 800552c:	b508      	push	{r3, lr}
 800552e:	2006      	movs	r0, #6
 8005530:	f000 fa04 	bl	800593c <raise>
 8005534:	2001      	movs	r0, #1
 8005536:	f7fc f83f 	bl	80015b8 <_exit>

0800553a <__sfputc_r>:
 800553a:	6893      	ldr	r3, [r2, #8]
 800553c:	3b01      	subs	r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	b410      	push	{r4}
 8005542:	6093      	str	r3, [r2, #8]
 8005544:	da08      	bge.n	8005558 <__sfputc_r+0x1e>
 8005546:	6994      	ldr	r4, [r2, #24]
 8005548:	42a3      	cmp	r3, r4
 800554a:	db01      	blt.n	8005550 <__sfputc_r+0x16>
 800554c:	290a      	cmp	r1, #10
 800554e:	d103      	bne.n	8005558 <__sfputc_r+0x1e>
 8005550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005554:	f000 b934 	b.w	80057c0 <__swbuf_r>
 8005558:	6813      	ldr	r3, [r2, #0]
 800555a:	1c58      	adds	r0, r3, #1
 800555c:	6010      	str	r0, [r2, #0]
 800555e:	7019      	strb	r1, [r3, #0]
 8005560:	4608      	mov	r0, r1
 8005562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005566:	4770      	bx	lr

08005568 <__sfputs_r>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	4606      	mov	r6, r0
 800556c:	460f      	mov	r7, r1
 800556e:	4614      	mov	r4, r2
 8005570:	18d5      	adds	r5, r2, r3
 8005572:	42ac      	cmp	r4, r5
 8005574:	d101      	bne.n	800557a <__sfputs_r+0x12>
 8005576:	2000      	movs	r0, #0
 8005578:	e007      	b.n	800558a <__sfputs_r+0x22>
 800557a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557e:	463a      	mov	r2, r7
 8005580:	4630      	mov	r0, r6
 8005582:	f7ff ffda 	bl	800553a <__sfputc_r>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d1f3      	bne.n	8005572 <__sfputs_r+0xa>
 800558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800558c <_vfiprintf_r>:
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	460d      	mov	r5, r1
 8005592:	b09d      	sub	sp, #116	; 0x74
 8005594:	4614      	mov	r4, r2
 8005596:	4698      	mov	r8, r3
 8005598:	4606      	mov	r6, r0
 800559a:	b118      	cbz	r0, 80055a4 <_vfiprintf_r+0x18>
 800559c:	6a03      	ldr	r3, [r0, #32]
 800559e:	b90b      	cbnz	r3, 80055a4 <_vfiprintf_r+0x18>
 80055a0:	f7fe faa2 	bl	8003ae8 <__sinit>
 80055a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a6:	07d9      	lsls	r1, r3, #31
 80055a8:	d405      	bmi.n	80055b6 <_vfiprintf_r+0x2a>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	059a      	lsls	r2, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_vfiprintf_r+0x2a>
 80055b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b2:	f7fe fb90 	bl	8003cd6 <__retarget_lock_acquire_recursive>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	d501      	bpl.n	80055c0 <_vfiprintf_r+0x34>
 80055bc:	692b      	ldr	r3, [r5, #16]
 80055be:	b99b      	cbnz	r3, 80055e8 <_vfiprintf_r+0x5c>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 f93a 	bl	800583c <__swsetup_r>
 80055c8:	b170      	cbz	r0, 80055e8 <_vfiprintf_r+0x5c>
 80055ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055cc:	07dc      	lsls	r4, r3, #31
 80055ce:	d504      	bpl.n	80055da <_vfiprintf_r+0x4e>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	b01d      	add	sp, #116	; 0x74
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	89ab      	ldrh	r3, [r5, #12]
 80055dc:	0598      	lsls	r0, r3, #22
 80055de:	d4f7      	bmi.n	80055d0 <_vfiprintf_r+0x44>
 80055e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e2:	f7fe fb79 	bl	8003cd8 <__retarget_lock_release_recursive>
 80055e6:	e7f3      	b.n	80055d0 <_vfiprintf_r+0x44>
 80055e8:	2300      	movs	r3, #0
 80055ea:	9309      	str	r3, [sp, #36]	; 0x24
 80055ec:	2320      	movs	r3, #32
 80055ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f6:	2330      	movs	r3, #48	; 0x30
 80055f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057ac <_vfiprintf_r+0x220>
 80055fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005600:	f04f 0901 	mov.w	r9, #1
 8005604:	4623      	mov	r3, r4
 8005606:	469a      	mov	sl, r3
 8005608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560c:	b10a      	cbz	r2, 8005612 <_vfiprintf_r+0x86>
 800560e:	2a25      	cmp	r2, #37	; 0x25
 8005610:	d1f9      	bne.n	8005606 <_vfiprintf_r+0x7a>
 8005612:	ebba 0b04 	subs.w	fp, sl, r4
 8005616:	d00b      	beq.n	8005630 <_vfiprintf_r+0xa4>
 8005618:	465b      	mov	r3, fp
 800561a:	4622      	mov	r2, r4
 800561c:	4629      	mov	r1, r5
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff ffa2 	bl	8005568 <__sfputs_r>
 8005624:	3001      	adds	r0, #1
 8005626:	f000 80a9 	beq.w	800577c <_vfiprintf_r+0x1f0>
 800562a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562c:	445a      	add	r2, fp
 800562e:	9209      	str	r2, [sp, #36]	; 0x24
 8005630:	f89a 3000 	ldrb.w	r3, [sl]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a1 	beq.w	800577c <_vfiprintf_r+0x1f0>
 800563a:	2300      	movs	r3, #0
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005644:	f10a 0a01 	add.w	sl, sl, #1
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	9307      	str	r3, [sp, #28]
 800564c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005650:	931a      	str	r3, [sp, #104]	; 0x68
 8005652:	4654      	mov	r4, sl
 8005654:	2205      	movs	r2, #5
 8005656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565a:	4854      	ldr	r0, [pc, #336]	; (80057ac <_vfiprintf_r+0x220>)
 800565c:	f7fa fdc0 	bl	80001e0 <memchr>
 8005660:	9a04      	ldr	r2, [sp, #16]
 8005662:	b9d8      	cbnz	r0, 800569c <_vfiprintf_r+0x110>
 8005664:	06d1      	lsls	r1, r2, #27
 8005666:	bf44      	itt	mi
 8005668:	2320      	movmi	r3, #32
 800566a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800566e:	0713      	lsls	r3, r2, #28
 8005670:	bf44      	itt	mi
 8005672:	232b      	movmi	r3, #43	; 0x2b
 8005674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005678:	f89a 3000 	ldrb.w	r3, [sl]
 800567c:	2b2a      	cmp	r3, #42	; 0x2a
 800567e:	d015      	beq.n	80056ac <_vfiprintf_r+0x120>
 8005680:	9a07      	ldr	r2, [sp, #28]
 8005682:	4654      	mov	r4, sl
 8005684:	2000      	movs	r0, #0
 8005686:	f04f 0c0a 	mov.w	ip, #10
 800568a:	4621      	mov	r1, r4
 800568c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005690:	3b30      	subs	r3, #48	; 0x30
 8005692:	2b09      	cmp	r3, #9
 8005694:	d94d      	bls.n	8005732 <_vfiprintf_r+0x1a6>
 8005696:	b1b0      	cbz	r0, 80056c6 <_vfiprintf_r+0x13a>
 8005698:	9207      	str	r2, [sp, #28]
 800569a:	e014      	b.n	80056c6 <_vfiprintf_r+0x13a>
 800569c:	eba0 0308 	sub.w	r3, r0, r8
 80056a0:	fa09 f303 	lsl.w	r3, r9, r3
 80056a4:	4313      	orrs	r3, r2
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	46a2      	mov	sl, r4
 80056aa:	e7d2      	b.n	8005652 <_vfiprintf_r+0xc6>
 80056ac:	9b03      	ldr	r3, [sp, #12]
 80056ae:	1d19      	adds	r1, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	9103      	str	r1, [sp, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfbb      	ittet	lt
 80056b8:	425b      	neglt	r3, r3
 80056ba:	f042 0202 	orrlt.w	r2, r2, #2
 80056be:	9307      	strge	r3, [sp, #28]
 80056c0:	9307      	strlt	r3, [sp, #28]
 80056c2:	bfb8      	it	lt
 80056c4:	9204      	strlt	r2, [sp, #16]
 80056c6:	7823      	ldrb	r3, [r4, #0]
 80056c8:	2b2e      	cmp	r3, #46	; 0x2e
 80056ca:	d10c      	bne.n	80056e6 <_vfiprintf_r+0x15a>
 80056cc:	7863      	ldrb	r3, [r4, #1]
 80056ce:	2b2a      	cmp	r3, #42	; 0x2a
 80056d0:	d134      	bne.n	800573c <_vfiprintf_r+0x1b0>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	9203      	str	r2, [sp, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bfb8      	it	lt
 80056de:	f04f 33ff 	movlt.w	r3, #4294967295
 80056e2:	3402      	adds	r4, #2
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057bc <_vfiprintf_r+0x230>
 80056ea:	7821      	ldrb	r1, [r4, #0]
 80056ec:	2203      	movs	r2, #3
 80056ee:	4650      	mov	r0, sl
 80056f0:	f7fa fd76 	bl	80001e0 <memchr>
 80056f4:	b138      	cbz	r0, 8005706 <_vfiprintf_r+0x17a>
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	eba0 000a 	sub.w	r0, r0, sl
 80056fc:	2240      	movs	r2, #64	; 0x40
 80056fe:	4082      	lsls	r2, r0
 8005700:	4313      	orrs	r3, r2
 8005702:	3401      	adds	r4, #1
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570a:	4829      	ldr	r0, [pc, #164]	; (80057b0 <_vfiprintf_r+0x224>)
 800570c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005710:	2206      	movs	r2, #6
 8005712:	f7fa fd65 	bl	80001e0 <memchr>
 8005716:	2800      	cmp	r0, #0
 8005718:	d03f      	beq.n	800579a <_vfiprintf_r+0x20e>
 800571a:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <_vfiprintf_r+0x228>)
 800571c:	bb1b      	cbnz	r3, 8005766 <_vfiprintf_r+0x1da>
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	f023 0307 	bic.w	r3, r3, #7
 8005726:	3308      	adds	r3, #8
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572c:	443b      	add	r3, r7
 800572e:	9309      	str	r3, [sp, #36]	; 0x24
 8005730:	e768      	b.n	8005604 <_vfiprintf_r+0x78>
 8005732:	fb0c 3202 	mla	r2, ip, r2, r3
 8005736:	460c      	mov	r4, r1
 8005738:	2001      	movs	r0, #1
 800573a:	e7a6      	b.n	800568a <_vfiprintf_r+0xfe>
 800573c:	2300      	movs	r3, #0
 800573e:	3401      	adds	r4, #1
 8005740:	9305      	str	r3, [sp, #20]
 8005742:	4619      	mov	r1, r3
 8005744:	f04f 0c0a 	mov.w	ip, #10
 8005748:	4620      	mov	r0, r4
 800574a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800574e:	3a30      	subs	r2, #48	; 0x30
 8005750:	2a09      	cmp	r2, #9
 8005752:	d903      	bls.n	800575c <_vfiprintf_r+0x1d0>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0c6      	beq.n	80056e6 <_vfiprintf_r+0x15a>
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	e7c4      	b.n	80056e6 <_vfiprintf_r+0x15a>
 800575c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005760:	4604      	mov	r4, r0
 8005762:	2301      	movs	r3, #1
 8005764:	e7f0      	b.n	8005748 <_vfiprintf_r+0x1bc>
 8005766:	ab03      	add	r3, sp, #12
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	462a      	mov	r2, r5
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <_vfiprintf_r+0x22c>)
 800576e:	a904      	add	r1, sp, #16
 8005770:	4630      	mov	r0, r6
 8005772:	f7fd fd67 	bl	8003244 <_printf_float>
 8005776:	4607      	mov	r7, r0
 8005778:	1c78      	adds	r0, r7, #1
 800577a:	d1d6      	bne.n	800572a <_vfiprintf_r+0x19e>
 800577c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	d405      	bmi.n	800578e <_vfiprintf_r+0x202>
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	059a      	lsls	r2, r3, #22
 8005786:	d402      	bmi.n	800578e <_vfiprintf_r+0x202>
 8005788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800578a:	f7fe faa5 	bl	8003cd8 <__retarget_lock_release_recursive>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	065b      	lsls	r3, r3, #25
 8005792:	f53f af1d 	bmi.w	80055d0 <_vfiprintf_r+0x44>
 8005796:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005798:	e71c      	b.n	80055d4 <_vfiprintf_r+0x48>
 800579a:	ab03      	add	r3, sp, #12
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462a      	mov	r2, r5
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <_vfiprintf_r+0x22c>)
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	4630      	mov	r0, r6
 80057a6:	f7fd fff1 	bl	800378c <_printf_i>
 80057aa:	e7e4      	b.n	8005776 <_vfiprintf_r+0x1ea>
 80057ac:	08005e13 	.word	0x08005e13
 80057b0:	08005e1d 	.word	0x08005e1d
 80057b4:	08003245 	.word	0x08003245
 80057b8:	08005569 	.word	0x08005569
 80057bc:	08005e19 	.word	0x08005e19

080057c0 <__swbuf_r>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	460e      	mov	r6, r1
 80057c4:	4614      	mov	r4, r2
 80057c6:	4605      	mov	r5, r0
 80057c8:	b118      	cbz	r0, 80057d2 <__swbuf_r+0x12>
 80057ca:	6a03      	ldr	r3, [r0, #32]
 80057cc:	b90b      	cbnz	r3, 80057d2 <__swbuf_r+0x12>
 80057ce:	f7fe f98b 	bl	8003ae8 <__sinit>
 80057d2:	69a3      	ldr	r3, [r4, #24]
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	071a      	lsls	r2, r3, #28
 80057da:	d525      	bpl.n	8005828 <__swbuf_r+0x68>
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	b31b      	cbz	r3, 8005828 <__swbuf_r+0x68>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	1a98      	subs	r0, r3, r2
 80057e6:	6963      	ldr	r3, [r4, #20]
 80057e8:	b2f6      	uxtb	r6, r6
 80057ea:	4283      	cmp	r3, r0
 80057ec:	4637      	mov	r7, r6
 80057ee:	dc04      	bgt.n	80057fa <__swbuf_r+0x3a>
 80057f0:	4621      	mov	r1, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	f7ff fdfc 	bl	80053f0 <_fflush_r>
 80057f8:	b9e0      	cbnz	r0, 8005834 <__swbuf_r+0x74>
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60a3      	str	r3, [r4, #8]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	701e      	strb	r6, [r3, #0]
 8005808:	6962      	ldr	r2, [r4, #20]
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	429a      	cmp	r2, r3
 800580e:	d004      	beq.n	800581a <__swbuf_r+0x5a>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	07db      	lsls	r3, r3, #31
 8005814:	d506      	bpl.n	8005824 <__swbuf_r+0x64>
 8005816:	2e0a      	cmp	r6, #10
 8005818:	d104      	bne.n	8005824 <__swbuf_r+0x64>
 800581a:	4621      	mov	r1, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f7ff fde7 	bl	80053f0 <_fflush_r>
 8005822:	b938      	cbnz	r0, 8005834 <__swbuf_r+0x74>
 8005824:	4638      	mov	r0, r7
 8005826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005828:	4621      	mov	r1, r4
 800582a:	4628      	mov	r0, r5
 800582c:	f000 f806 	bl	800583c <__swsetup_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0d5      	beq.n	80057e0 <__swbuf_r+0x20>
 8005834:	f04f 37ff 	mov.w	r7, #4294967295
 8005838:	e7f4      	b.n	8005824 <__swbuf_r+0x64>
	...

0800583c <__swsetup_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4b2a      	ldr	r3, [pc, #168]	; (80058e8 <__swsetup_r+0xac>)
 8005840:	4605      	mov	r5, r0
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	460c      	mov	r4, r1
 8005846:	b118      	cbz	r0, 8005850 <__swsetup_r+0x14>
 8005848:	6a03      	ldr	r3, [r0, #32]
 800584a:	b90b      	cbnz	r3, 8005850 <__swsetup_r+0x14>
 800584c:	f7fe f94c 	bl	8003ae8 <__sinit>
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005856:	0718      	lsls	r0, r3, #28
 8005858:	d422      	bmi.n	80058a0 <__swsetup_r+0x64>
 800585a:	06d9      	lsls	r1, r3, #27
 800585c:	d407      	bmi.n	800586e <__swsetup_r+0x32>
 800585e:	2309      	movs	r3, #9
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	e034      	b.n	80058d8 <__swsetup_r+0x9c>
 800586e:	0758      	lsls	r0, r3, #29
 8005870:	d512      	bpl.n	8005898 <__swsetup_r+0x5c>
 8005872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005874:	b141      	cbz	r1, 8005888 <__swsetup_r+0x4c>
 8005876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587a:	4299      	cmp	r1, r3
 800587c:	d002      	beq.n	8005884 <__swsetup_r+0x48>
 800587e:	4628      	mov	r0, r5
 8005880:	f7ff f8b4 	bl	80049ec <_free_r>
 8005884:	2300      	movs	r3, #0
 8005886:	6363      	str	r3, [r4, #52]	; 0x34
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	2300      	movs	r3, #0
 8005892:	6063      	str	r3, [r4, #4]
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f043 0308 	orr.w	r3, r3, #8
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	b94b      	cbnz	r3, 80058b8 <__swsetup_r+0x7c>
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ae:	d003      	beq.n	80058b8 <__swsetup_r+0x7c>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f884 	bl	80059c0 <__smakebuf_r>
 80058b8:	89a0      	ldrh	r0, [r4, #12]
 80058ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058be:	f010 0301 	ands.w	r3, r0, #1
 80058c2:	d00a      	beq.n	80058da <__swsetup_r+0x9e>
 80058c4:	2300      	movs	r3, #0
 80058c6:	60a3      	str	r3, [r4, #8]
 80058c8:	6963      	ldr	r3, [r4, #20]
 80058ca:	425b      	negs	r3, r3
 80058cc:	61a3      	str	r3, [r4, #24]
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	b943      	cbnz	r3, 80058e4 <__swsetup_r+0xa8>
 80058d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058d6:	d1c4      	bne.n	8005862 <__swsetup_r+0x26>
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	0781      	lsls	r1, r0, #30
 80058dc:	bf58      	it	pl
 80058de:	6963      	ldrpl	r3, [r4, #20]
 80058e0:	60a3      	str	r3, [r4, #8]
 80058e2:	e7f4      	b.n	80058ce <__swsetup_r+0x92>
 80058e4:	2000      	movs	r0, #0
 80058e6:	e7f7      	b.n	80058d8 <__swsetup_r+0x9c>
 80058e8:	200002b4 	.word	0x200002b4

080058ec <_raise_r>:
 80058ec:	291f      	cmp	r1, #31
 80058ee:	b538      	push	{r3, r4, r5, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	d904      	bls.n	8005900 <_raise_r+0x14>
 80058f6:	2316      	movs	r3, #22
 80058f8:	6003      	str	r3, [r0, #0]
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005902:	b112      	cbz	r2, 800590a <_raise_r+0x1e>
 8005904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005908:	b94b      	cbnz	r3, 800591e <_raise_r+0x32>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f830 	bl	8005970 <_getpid_r>
 8005910:	462a      	mov	r2, r5
 8005912:	4601      	mov	r1, r0
 8005914:	4620      	mov	r0, r4
 8005916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591a:	f000 b817 	b.w	800594c <_kill_r>
 800591e:	2b01      	cmp	r3, #1
 8005920:	d00a      	beq.n	8005938 <_raise_r+0x4c>
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	d103      	bne.n	800592e <_raise_r+0x42>
 8005926:	2316      	movs	r3, #22
 8005928:	6003      	str	r3, [r0, #0]
 800592a:	2001      	movs	r0, #1
 800592c:	e7e7      	b.n	80058fe <_raise_r+0x12>
 800592e:	2400      	movs	r4, #0
 8005930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005934:	4628      	mov	r0, r5
 8005936:	4798      	blx	r3
 8005938:	2000      	movs	r0, #0
 800593a:	e7e0      	b.n	80058fe <_raise_r+0x12>

0800593c <raise>:
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <raise+0xc>)
 800593e:	4601      	mov	r1, r0
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	f7ff bfd3 	b.w	80058ec <_raise_r>
 8005946:	bf00      	nop
 8005948:	200002b4 	.word	0x200002b4

0800594c <_kill_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_kill_r+0x20>)
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f7fb fe1d 	bl	8001598 <_kill>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d102      	bne.n	8005968 <_kill_r+0x1c>
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	b103      	cbz	r3, 8005968 <_kill_r+0x1c>
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	bf00      	nop
 800596c:	20016240 	.word	0x20016240

08005970 <_getpid_r>:
 8005970:	f7fb be0a 	b.w	8001588 <_getpid>

08005974 <__swhatbuf_r>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	460c      	mov	r4, r1
 8005978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597c:	2900      	cmp	r1, #0
 800597e:	b096      	sub	sp, #88	; 0x58
 8005980:	4615      	mov	r5, r2
 8005982:	461e      	mov	r6, r3
 8005984:	da0d      	bge.n	80059a2 <__swhatbuf_r+0x2e>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f013 0f80 	tst.w	r3, #128	; 0x80
 800598c:	f04f 0100 	mov.w	r1, #0
 8005990:	bf0c      	ite	eq
 8005992:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005996:	2340      	movne	r3, #64	; 0x40
 8005998:	2000      	movs	r0, #0
 800599a:	6031      	str	r1, [r6, #0]
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	b016      	add	sp, #88	; 0x58
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
 80059a2:	466a      	mov	r2, sp
 80059a4:	f000 f848 	bl	8005a38 <_fstat_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	dbec      	blt.n	8005986 <__swhatbuf_r+0x12>
 80059ac:	9901      	ldr	r1, [sp, #4]
 80059ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059b6:	4259      	negs	r1, r3
 80059b8:	4159      	adcs	r1, r3
 80059ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059be:	e7eb      	b.n	8005998 <__swhatbuf_r+0x24>

080059c0 <__smakebuf_r>:
 80059c0:	898b      	ldrh	r3, [r1, #12]
 80059c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059c4:	079d      	lsls	r5, r3, #30
 80059c6:	4606      	mov	r6, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	d507      	bpl.n	80059dc <__smakebuf_r+0x1c>
 80059cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	6123      	str	r3, [r4, #16]
 80059d4:	2301      	movs	r3, #1
 80059d6:	6163      	str	r3, [r4, #20]
 80059d8:	b002      	add	sp, #8
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	ab01      	add	r3, sp, #4
 80059de:	466a      	mov	r2, sp
 80059e0:	f7ff ffc8 	bl	8005974 <__swhatbuf_r>
 80059e4:	9900      	ldr	r1, [sp, #0]
 80059e6:	4605      	mov	r5, r0
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff f873 	bl	8004ad4 <_malloc_r>
 80059ee:	b948      	cbnz	r0, 8005a04 <__smakebuf_r+0x44>
 80059f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f4:	059a      	lsls	r2, r3, #22
 80059f6:	d4ef      	bmi.n	80059d8 <__smakebuf_r+0x18>
 80059f8:	f023 0303 	bic.w	r3, r3, #3
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	e7e3      	b.n	80059cc <__smakebuf_r+0xc>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	6020      	str	r0, [r4, #0]
 8005a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	9b00      	ldr	r3, [sp, #0]
 8005a10:	6163      	str	r3, [r4, #20]
 8005a12:	9b01      	ldr	r3, [sp, #4]
 8005a14:	6120      	str	r0, [r4, #16]
 8005a16:	b15b      	cbz	r3, 8005a30 <__smakebuf_r+0x70>
 8005a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 f81d 	bl	8005a5c <_isatty_r>
 8005a22:	b128      	cbz	r0, 8005a30 <__smakebuf_r+0x70>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	431d      	orrs	r5, r3
 8005a34:	81a5      	strh	r5, [r4, #12]
 8005a36:	e7cf      	b.n	80059d8 <__smakebuf_r+0x18>

08005a38 <_fstat_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d07      	ldr	r5, [pc, #28]	; (8005a58 <_fstat_r+0x20>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	4611      	mov	r1, r2
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	f7fb fdea 	bl	800161e <_fstat>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	d102      	bne.n	8005a54 <_fstat_r+0x1c>
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	b103      	cbz	r3, 8005a54 <_fstat_r+0x1c>
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	bd38      	pop	{r3, r4, r5, pc}
 8005a56:	bf00      	nop
 8005a58:	20016240 	.word	0x20016240

08005a5c <_isatty_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d06      	ldr	r5, [pc, #24]	; (8005a78 <_isatty_r+0x1c>)
 8005a60:	2300      	movs	r3, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	f7fb fde9 	bl	800163e <_isatty>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_isatty_r+0x1a>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_isatty_r+0x1a>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20016240 	.word	0x20016240

08005a7c <_init>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	bf00      	nop
 8005a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a82:	bc08      	pop	{r3}
 8005a84:	469e      	mov	lr, r3
 8005a86:	4770      	bx	lr

08005a88 <_fini>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr
