
lab2_part1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d6c  08002d6c  00003d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d84  08002d84  00004050  2**0
                  CONTENTS
  4 .ARM          00000008  08002d84  08002d84  00003d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d8c  08002d8c  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00003d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08002d94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae5c  20000050  08002de4  00004050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000aeac  08002de4  00004eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9f1  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf7  00000000  00000000  0000ea71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00010768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000866  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163c2  00000000  00000000  00011aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e508  00000000  00000000  00027e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a03b  00000000  00000000  00036378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c03b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  000c03f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c3118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000050 	.word	0x20000050
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d54 	.word	0x08002d54

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000054 	.word	0x20000054
 80001d4:	08002d54 	.word	0x08002d54

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <FilterInit>:
int16_t history_int16[31] = {0};

/* this the function prototype for initializing the filter (specifically the history) */
void FilterInit(void);

void FilterInit(void) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
  // set all the history to zero
  for (int i = 0; i < 31; i++) {
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	e00e      	b.n	80004f2 <FilterInit+0x2a>
    history[i] = 0;
 80004d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <FilterInit+0x40>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	f04f 0200 	mov.w	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
    history_int16[i] = 0;
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <FilterInit+0x44>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2100      	movs	r1, #0
 80004e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 31; i++) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b1e      	cmp	r3, #30
 80004f6:	dded      	ble.n	80004d4 <FilterInit+0xc>
  }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000006c 	.word	0x2000006c
 800050c:	2000ad2c 	.word	0x2000ad2c

08000510 <FixedFilterGet>:
	return accumulator;
}

int16_t FixedFilterGet(int16_t new_sample);

int16_t FixedFilterGet(int16_t new_sample){
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
  // Set new sample as head
  history_int16[0] = new_sample;
 800051a:	4a1d      	ldr	r2, [pc, #116]	@ (8000590 <FixedFilterGet+0x80>)
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	8013      	strh	r3, [r2, #0]

  // convolution
  int tap = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  int32_t accumulator = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]

  for (tap = 0; tap < 31; tap++){
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e010      	b.n	8000550 <FixedFilterGet+0x40>
    accumulator += (int32_t)filter_taps_int16[tap] * (int32_t)history_int16[tap];
 800052e:	4a19      	ldr	r2, [pc, #100]	@ (8000594 <FixedFilterGet+0x84>)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000536:	4619      	mov	r1, r3
 8000538:	4a15      	ldr	r2, [pc, #84]	@ (8000590 <FixedFilterGet+0x80>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000540:	fb01 f303 	mul.w	r3, r1, r3
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	4413      	add	r3, r2
 8000548:	60bb      	str	r3, [r7, #8]
  for (tap = 0; tap < 31; tap++){
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3301      	adds	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b1e      	cmp	r3, #30
 8000554:	ddeb      	ble.n	800052e <FixedFilterGet+0x1e>
  }

  // Shift history
  for (tap = 30; tap > 0; tap--){
 8000556:	231e      	movs	r3, #30
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e00b      	b.n	8000574 <FixedFilterGet+0x64>
    history_int16[tap + 1] = history_int16[tap];
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3301      	adds	r3, #1
 8000560:	490b      	ldr	r1, [pc, #44]	@ (8000590 <FixedFilterGet+0x80>)
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000568:	4a09      	ldr	r2, [pc, #36]	@ (8000590 <FixedFilterGet+0x80>)
 800056a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tap = 30; tap > 0; tap--){
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3b01      	subs	r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b00      	cmp	r3, #0
 8000578:	dcf0      	bgt.n	800055c <FixedFilterGet+0x4c>
  }

  // Shift to adjust
  accumulator >>= 15;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	13db      	asrs	r3, r3, #15
 800057e:	60bb      	str	r3, [r7, #8]

  return (int16_t)accumulator;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	b21b      	sxth	r3, r3
}
 8000584:	4618      	mov	r0, r3
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	2000ad2c 	.word	0x2000ad2c
 8000594:	20000004 	.word	0x20000004

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fc73 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f837 	bl	8000614 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a6:	f000 f89d 	bl	80006e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f97d 	bl	80008a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 f8b9 	bl	8000724 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005b2:	f000 f8e5 	bl	8000780 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005b6:	f000 f911 	bl	80007dc <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ba:	f000 f93f 	bl	800083c <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FilterInit();
 80005be:	f7ff ff83 	bl	80004c8 <FilterInit>
	  ITM_Port32(31) = 1;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <main+0x70>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
	  #ifdef FILTER_MODE
	    for (int i = 0; i < NUMBER_OF_SAMPLES; i++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	e012      	b.n	80005f4 <main+0x5c>
	      newdata_int16[i] = FixedFilterGet(*(data_int16 + i));
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <main+0x74>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff97 	bl	8000510 <FixedFilterGet>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <main+0x78>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for (int i = 0; i < NUMBER_OF_SAMPLES; i++){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f245 6221 	movw	r2, #22049	@ 0x5621
 80005fa:	4293      	cmp	r3, r2
 80005fc:	dde7      	ble.n	80005ce <main+0x36>
	  #else
	    for (int i = 0; i < NUMBER_OF_SAMPLES; i++){
	      newdata[i] = FloatFilterGet(*(data + i));
	    }
	  #endif
	  ITM_Port32(31) = 2;
 80005fe:	4b02      	ldr	r3, [pc, #8]	@ (8000608 <main+0x70>)
 8000600:	2202      	movs	r2, #2
 8000602:	601a      	str	r2, [r3, #0]
	  __NOP();
 8000604:	bf00      	nop
	  FilterInit();
 8000606:	e7da      	b.n	80005be <main+0x26>
 8000608:	e000007c 	.word	0xe000007c
 800060c:	20000000 	.word	0x20000000
 8000610:	200000e8 	.word	0x200000e8

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	@ 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fb69 	bl	8002cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a26      	ldr	r2, [pc, #152]	@ (80006dc <SystemClock_Config+0xc8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <SystemClock_Config+0xcc>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000688:	23c0      	movs	r3, #192	@ 0xc0
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fccf 	bl	800203c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f9f8 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2103      	movs	r1, #3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ff31 	bl	800252c <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d0:	f000 f9e2 	bl	8000a98 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006fa:	2301      	movs	r3, #1
 80006fc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006fe:	23c8      	movs	r3, #200	@ 0xc8
 8000700:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f919 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000718:	f000 f9be 	bl	8000a98 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 fe87 	bl	8001474 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f994 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000ad6c 	.word	0x2000ad6c
 8000778:	40005400 	.word	0x40005400
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2S2_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_I2S2_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_I2S2_Init+0x50>)
 800078c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000790:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_I2S2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_I2S2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_I2S2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_I2S2_Init+0x50>)
 80007a6:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <MX_I2S2_Init+0x58>)
 80007a8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_I2S2_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_I2S2_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_I2S2_Init+0x50>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_I2S2_Init+0x50>)
 80007be:	f000 ff9d 	bl	80016fc <HAL_I2S_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 f966 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000adc0 	.word	0x2000adc0
 80007d4:	40003800 	.word	0x40003800
 80007d8:	00017700 	.word	0x00017700

080007dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007e2:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <MX_I2S3_Init+0x58>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000800:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_I2S3_Init+0x54>)
 8000804:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <MX_I2S3_Init+0x5c>)
 8000806:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_I2S3_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_I2S3_Init+0x54>)
 800081c:	f000 ff6e 	bl	80016fc <HAL_I2S_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000826:	f000 f937 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000ae08 	.word	0x2000ae08
 8000834:	40003c00 	.word	0x40003c00
 8000838:	00017700 	.word	0x00017700

0800083c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_SPI1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800088e:	f002 f9ab 	bl	8002be8 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f8fe 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000ae50 	.word	0x2000ae50
 80008a4:	40013000 	.word	0x40013000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b70      	ldr	r3, [pc, #448]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a6f      	ldr	r2, [pc, #444]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b6d      	ldr	r3, [pc, #436]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b69      	ldr	r3, [pc, #420]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a68      	ldr	r2, [pc, #416]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b66      	ldr	r3, [pc, #408]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b62      	ldr	r3, [pc, #392]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a61      	ldr	r2, [pc, #388]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b5f      	ldr	r3, [pc, #380]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b5b      	ldr	r3, [pc, #364]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a5a      	ldr	r2, [pc, #360]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b58      	ldr	r3, [pc, #352]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b54      	ldr	r3, [pc, #336]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a53      	ldr	r2, [pc, #332]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b51      	ldr	r3, [pc, #324]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a4c      	ldr	r2, [pc, #304]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a84 <MX_GPIO_Init+0x1dc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	4847      	ldr	r0, [pc, #284]	@ (8000a88 <MX_GPIO_Init+0x1e0>)
 800096c:	f000 fd68 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	4845      	ldr	r0, [pc, #276]	@ (8000a8c <MX_GPIO_Init+0x1e4>)
 8000976:	f000 fd63 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097a:	2200      	movs	r2, #0
 800097c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000980:	4843      	ldr	r0, [pc, #268]	@ (8000a90 <MX_GPIO_Init+0x1e8>)
 8000982:	f000 fd5d 	bl	8001440 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000986:	2304      	movs	r3, #4
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	483b      	ldr	r0, [pc, #236]	@ (8000a88 <MX_GPIO_Init+0x1e0>)
 800099a:	f000 fbcd 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4834      	ldr	r0, [pc, #208]	@ (8000a88 <MX_GPIO_Init+0x1e0>)
 80009b6:	f000 fbbf 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009ba:	2332      	movs	r3, #50	@ 0x32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	482e      	ldr	r0, [pc, #184]	@ (8000a88 <MX_GPIO_Init+0x1e0>)
 80009d0:	f000 fbb2 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4828      	ldr	r0, [pc, #160]	@ (8000a8c <MX_GPIO_Init+0x1e4>)
 80009ec:	f000 fba4 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4823      	ldr	r0, [pc, #140]	@ (8000a94 <MX_GPIO_Init+0x1ec>)
 8000a06:	f000 fb97 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a0a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481b      	ldr	r0, [pc, #108]	@ (8000a90 <MX_GPIO_Init+0x1e8>)
 8000a24:	f000 fb88 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4815      	ldr	r0, [pc, #84]	@ (8000a94 <MX_GPIO_Init+0x1ec>)
 8000a3e:	f000 fb7b 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a42:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a54:	230a      	movs	r3, #10
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_GPIO_Init+0x1ec>)
 8000a60:	f000 fb6a 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <MX_GPIO_Init+0x1e8>)
 8000a78:	f000 fb5e 	bl	8001138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3730      	adds	r7, #48	@ 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020000 	.word	0x40020000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 faf4 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	@ (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 faf2 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	@ 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	@ 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a59      	ldr	r2, [pc, #356]	@ (8000d08 <HAL_I2S_MspInit+0x184>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d15b      	bne.n	8000c5e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
 8000baa:	4b58      	ldr	r3, [pc, #352]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	4a57      	ldr	r2, [pc, #348]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb6:	4b55      	ldr	r3, [pc, #340]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	4b51      	ldr	r3, [pc, #324]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a50      	ldr	r2, [pc, #320]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a49      	ldr	r2, [pc, #292]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	483e      	ldr	r0, [pc, #248]	@ (8000d10 <HAL_I2S_MspInit+0x18c>)
 8000c16:	f000 fa8f 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4836      	ldr	r0, [pc, #216]	@ (8000d10 <HAL_I2S_MspInit+0x18c>)
 8000c36:	f000 fa7f 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	482f      	ldr	r0, [pc, #188]	@ (8000d14 <HAL_I2S_MspInit+0x190>)
 8000c58:	f000 fa6e 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c5c:	e04f      	b.n	8000cfe <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a2d      	ldr	r2, [pc, #180]	@ (8000d18 <HAL_I2S_MspInit+0x194>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d14a      	bne.n	8000cfe <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a18      	ldr	r2, [pc, #96]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_I2S_MspInit+0x188>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <HAL_I2S_MspInit+0x198>)
 8000cd8:	f000 fa2e 	bl	8001138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cdc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_I2S_MspInit+0x18c>)
 8000cfa:	f000 fa1d 	bl	8001138 <HAL_GPIO_Init>
}
 8000cfe:	bf00      	nop
 8000d00:	3738      	adds	r7, #56	@ 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40003800 	.word	0x40003800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40003c00 	.word	0x40003c00
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <HAL_SPI_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d7a:	23e0      	movs	r3, #224	@ 0xe0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_SPI_MspInit+0x8c>)
 8000d96:	f000 f9cf 	bl	8001138 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f891 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e38:	f7ff ffea 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	@ (8000e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f001 ff53 	bl	8002d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fb97 	bl	8000598 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000e78:	08002d94 	.word	0x08002d94
  ldr r2, =_sbss
 8000e7c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000e80:	2000aeac 	.word	0x2000aeac

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f90d 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fdf2 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f917 	bl	800111e <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f8ed 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000044 	.word	0x20000044
 8000f24:	2000004c 	.word	0x2000004c
 8000f28:	20000048 	.word	0x20000048

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000004c 	.word	0x2000004c
 8000f50:	2000aea8 	.word	0x2000aea8

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000aea8 	.word	0x2000aea8

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	@ (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	@ (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff47 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff5c 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb0 	bl	800108c <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e159      	b.n	8001408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8148 	bne.w	8001402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a2 	beq.w	8001402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b57      	ldr	r3, [pc, #348]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	@ (8001428 <HAL_GPIO_Init+0x2f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x202>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	@ (800142c <HAL_GPIO_Init+0x2f4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x1fe>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a47      	ldr	r2, [pc, #284]	@ (8001430 <HAL_GPIO_Init+0x2f8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a46      	ldr	r2, [pc, #280]	@ (8001434 <HAL_GPIO_Init+0x2fc>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x1f6>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	@ (8001438 <HAL_GPIO_Init+0x300>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x1f2>
 8001326:	2304      	movs	r3, #4
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x204>
 800132a:	2307      	movs	r3, #7
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x204>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x204>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x204>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x204>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <HAL_GPIO_Init+0x304>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a2f      	ldr	r2, [pc, #188]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a24      	ldr	r2, [pc, #144]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f aea2 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e12b      	b.n	80016de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fb2a 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2224      	movs	r2, #36	@ 0x24
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014d8:	f001 fa20 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 80014dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a81      	ldr	r2, [pc, #516]	@ (80016e8 <HAL_I2C_Init+0x274>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d807      	bhi.n	80014f8 <HAL_I2C_Init+0x84>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a80      	ldr	r2, [pc, #512]	@ (80016ec <HAL_I2C_Init+0x278>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bf94      	ite	ls
 80014f0:	2301      	movls	r3, #1
 80014f2:	2300      	movhi	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e006      	b.n	8001506 <HAL_I2C_Init+0x92>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a7d      	ldr	r2, [pc, #500]	@ (80016f0 <HAL_I2C_Init+0x27c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bf94      	ite	ls
 8001500:	2301      	movls	r3, #1
 8001502:	2300      	movhi	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0e7      	b.n	80016de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4a78      	ldr	r2, [pc, #480]	@ (80016f4 <HAL_I2C_Init+0x280>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0c9b      	lsrs	r3, r3, #18
 8001518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	430a      	orrs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a6a      	ldr	r2, [pc, #424]	@ (80016e8 <HAL_I2C_Init+0x274>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d802      	bhi.n	8001548 <HAL_I2C_Init+0xd4>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	e009      	b.n	800155c <HAL_I2C_Init+0xe8>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	4a69      	ldr	r2, [pc, #420]	@ (80016f8 <HAL_I2C_Init+0x284>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	3301      	adds	r3, #1
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800156e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	495c      	ldr	r1, [pc, #368]	@ (80016e8 <HAL_I2C_Init+0x274>)
 8001578:	428b      	cmp	r3, r1
 800157a:	d819      	bhi.n	80015b0 <HAL_I2C_Init+0x13c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e59      	subs	r1, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fbb1 f3f3 	udiv	r3, r1, r3
 800158a:	1c59      	adds	r1, r3, #1
 800158c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001590:	400b      	ands	r3, r1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00a      	beq.n	80015ac <HAL_I2C_Init+0x138>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1e59      	subs	r1, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015aa:	e051      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 80015ac:	2304      	movs	r3, #4
 80015ae:	e04f      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <HAL_I2C_Init+0x168>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	440b      	add	r3, r1
 80015c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	e012      	b.n	8001602 <HAL_I2C_Init+0x18e>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	0099      	lsls	r1, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Init+0x196>
 8001606:	2301      	movs	r3, #1
 8001608:	e022      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10e      	bne.n	8001630 <HAL_I2C_Init+0x1bc>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e58      	subs	r0, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	440b      	add	r3, r1
 8001620:	fbb0 f3f3 	udiv	r3, r0, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162e:	e00f      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e58      	subs	r0, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	6809      	ldr	r1, [r1, #0]
 8001654:	4313      	orrs	r3, r2
 8001656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800167e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6911      	ldr	r1, [r2, #16]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	4311      	orrs	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	000186a0 	.word	0x000186a0
 80016ec:	001e847f 	.word	0x001e847f
 80016f0:	003d08ff 	.word	0x003d08ff
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e128      	b.n	8001960 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a90      	ldr	r2, [pc, #576]	@ (8001968 <HAL_I2S_Init+0x26c>)
 8001726:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fa2b 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001744:	f023 030f 	bic.w	r3, r3, #15
 8001748:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2202      	movs	r2, #2
 8001750:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d060      	beq.n	800181c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001762:	2310      	movs	r3, #16
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e001      	b.n	800176c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b20      	cmp	r3, #32
 8001772:	d802      	bhi.n	800177a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800177a:	2001      	movs	r0, #1
 800177c:	f001 f9d2 	bl	8002b24 <HAL_RCCEx_GetPeriphCLKFreq>
 8001780:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178a:	d125      	bne.n	80017d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d010      	beq.n	80017b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	fbb2 f2f3 	udiv	r2, r2, r3
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	3305      	adds	r3, #5
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	e01f      	b.n	80017f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	3305      	adds	r3, #5
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	e00e      	b.n	80017f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	3305      	adds	r3, #5
 80017f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4a5c      	ldr	r2, [pc, #368]	@ (800196c <HAL_I2S_Init+0x270>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e003      	b.n	8001824 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800181c:	2302      	movs	r3, #2
 800181e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d902      	bls.n	8001830 <HAL_I2S_Init+0x134>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2bff      	cmp	r3, #255	@ 0xff
 800182e:	d907      	bls.n	8001840 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	f043 0210 	orr.w	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e08f      	b.n	8001960 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	ea42 0103 	orr.w	r1, r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	430a      	orrs	r2, r1
 8001852:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800185e:	f023 030f 	bic.w	r3, r3, #15
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6851      	ldr	r1, [r2, #4]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6892      	ldr	r2, [r2, #8]
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68d2      	ldr	r2, [r2, #12]
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6992      	ldr	r2, [r2, #24]
 8001876:	430a      	orrs	r2, r1
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001882:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d161      	bne.n	8001950 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a38      	ldr	r2, [pc, #224]	@ (8001970 <HAL_I2S_Init+0x274>)
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a37      	ldr	r2, [pc, #220]	@ (8001974 <HAL_I2S_Init+0x278>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_I2S_Init+0x1a4>
 800189c:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <HAL_I2S_Init+0x27c>)
 800189e:	e001      	b.n	80018a4 <HAL_I2S_Init+0x1a8>
 80018a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4932      	ldr	r1, [pc, #200]	@ (8001974 <HAL_I2S_Init+0x278>)
 80018ac:	428a      	cmp	r2, r1
 80018ae:	d101      	bne.n	80018b4 <HAL_I2S_Init+0x1b8>
 80018b0:	4a31      	ldr	r2, [pc, #196]	@ (8001978 <HAL_I2S_Init+0x27c>)
 80018b2:	e001      	b.n	80018b8 <HAL_I2S_Init+0x1bc>
 80018b4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80018b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001974 <HAL_I2S_Init+0x278>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_I2S_Init+0x1d4>
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_I2S_Init+0x27c>)
 80018ce:	e001      	b.n	80018d4 <HAL_I2S_Init+0x1d8>
 80018d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018d4:	2202      	movs	r2, #2
 80018d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a25      	ldr	r2, [pc, #148]	@ (8001974 <HAL_I2S_Init+0x278>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_I2S_Init+0x1ea>
 80018e2:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <HAL_I2S_Init+0x27c>)
 80018e4:	e001      	b.n	80018ea <HAL_I2S_Init+0x1ee>
 80018e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018f6:	d003      	beq.n	8001900 <HAL_I2S_Init+0x204>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e001      	b.n	800190c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001916:	4313      	orrs	r3, r2
 8001918:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001920:	4313      	orrs	r3, r2
 8001922:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800192a:	4313      	orrs	r3, r2
 800192c:	b29a      	uxth	r2, r3
 800192e:	897b      	ldrh	r3, [r7, #10]
 8001930:	4313      	orrs	r3, r2
 8001932:	b29b      	uxth	r3, r3
 8001934:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001938:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_I2S_Init+0x278>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_I2S_Init+0x24c>
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_I2S_Init+0x27c>)
 8001946:	e001      	b.n	800194c <HAL_I2S_Init+0x250>
 8001948:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800194c:	897a      	ldrh	r2, [r7, #10]
 800194e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08001a73 	.word	0x08001a73
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	08001b89 	.word	0x08001b89
 8001974:	40003800 	.word	0x40003800
 8001978:	40003400 	.word	0x40003400

0800197c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	1c9a      	adds	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10e      	bne.n	8001a0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80019fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffb8 	bl	800197c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	b292      	uxth	r2, r2
 8001a28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2e:	1c9a      	adds	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10e      	bne.n	8001a6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001a5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff93 	bl	8001990 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d13a      	bne.n	8001b04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d109      	bne.n	8001aac <I2S_IRQHandler+0x3a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa2:	2b40      	cmp	r3, #64	@ 0x40
 8001aa4:	d102      	bne.n	8001aac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb4 	bl	8001a14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab2:	2b40      	cmp	r3, #64	@ 0x40
 8001ab4:	d126      	bne.n	8001b04 <I2S_IRQHandler+0x92>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d11f      	bne.n	8001b04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ad2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	f043 0202 	orr.w	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff50 	bl	80019a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d136      	bne.n	8001b7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d109      	bne.n	8001b2e <I2S_IRQHandler+0xbc>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b24:	2b80      	cmp	r3, #128	@ 0x80
 8001b26:	d102      	bne.n	8001b2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff45 	bl	80019b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d122      	bne.n	8001b7e <I2S_IRQHandler+0x10c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d11b      	bne.n	8001b7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	f043 0204 	orr.w	r2, r3, #4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff13 	bl	80019a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a92      	ldr	r2, [pc, #584]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ba2:	4b92      	ldr	r3, [pc, #584]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ba4:	e001      	b.n	8001baa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ba6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a8b      	ldr	r2, [pc, #556]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bc2:	e001      	b.n	8001bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001bc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd4:	d004      	beq.n	8001be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 8099 	bne.w	8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d107      	bne.n	8001bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f925 	bl	8001e44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f9c8 	bl	8001fa4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1a:	2b40      	cmp	r3, #64	@ 0x40
 8001c1c:	d13a      	bne.n	8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d035      	beq.n	8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001c32:	4b6e      	ldr	r3, [pc, #440]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c34:	e001      	b.n	8001c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001c36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4969      	ldr	r1, [pc, #420]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c42:	428b      	cmp	r3, r1
 8001c44:	d101      	bne.n	8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001c46:	4b69      	ldr	r3, [pc, #420]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c48:	e001      	b.n	8001c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fe88 	bl	80019a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	f040 80c3 	bne.w	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80bd 	beq.w	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a49      	ldr	r2, [pc, #292]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001cc6:	4b49      	ldr	r3, [pc, #292]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cc8:	e001      	b.n	8001cce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001cca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4944      	ldr	r1, [pc, #272]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cd6:	428b      	cmp	r3, r1
 8001cd8:	d101      	bne.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001cda:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cdc:	e001      	b.n	8001ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ce2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ce6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f043 0204 	orr.w	r2, r3, #4
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fe4a 	bl	80019a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d10:	e089      	b.n	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d107      	bne.n	8001d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8be 	bl	8001ea8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8fd 	bl	8001f40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4c:	2b40      	cmp	r3, #64	@ 0x40
 8001d4e:	d12f      	bne.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02a      	beq.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001d74:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d76:	e001      	b.n	8001d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001d78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4919      	ldr	r1, [pc, #100]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d84:	428b      	cmp	r3, r1
 8001d86:	d101      	bne.n	8001d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001d88:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d8a:	e001      	b.n	8001d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001d8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	f043 0202 	orr.w	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fdfa 	bl	80019a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d136      	bne.n	8001e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d031      	beq.n	8001e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dd0:	e001      	b.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4902      	ldr	r1, [pc, #8]	@ (8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d106      	bne.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001de2:	4b02      	ldr	r3, [pc, #8]	@ (8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001de4:	e006      	b.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001de6:	bf00      	nop
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40003400 	.word	0x40003400
 8001df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001df4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001df8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fdc0 	bl	80019a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e24:	e000      	b.n	8001e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e26:	bf00      	nop
}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	1c99      	adds	r1, r3, #2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6251      	str	r1, [r2, #36]	@ 0x24
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d113      	bne.n	8001e9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffc9 	bl	8001e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	1c99      	adds	r1, r3, #2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6251      	str	r1, [r2, #36]	@ 0x24
 8001eba:	8819      	ldrh	r1, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <I2SEx_TxISR_I2SExt+0x90>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <I2SEx_TxISR_I2SExt+0x22>
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <I2SEx_TxISR_I2SExt+0x94>)
 8001ec8:	e001      	b.n	8001ece <I2SEx_TxISR_I2SExt+0x26>
 8001eca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ece:	460a      	mov	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d121      	bne.n	8001f2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <I2SEx_TxISR_I2SExt+0x90>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <I2SEx_TxISR_I2SExt+0x50>
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <I2SEx_TxISR_I2SExt+0x94>)
 8001ef6:	e001      	b.n	8001efc <I2SEx_TxISR_I2SExt+0x54>
 8001ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	490d      	ldr	r1, [pc, #52]	@ (8001f38 <I2SEx_TxISR_I2SExt+0x90>)
 8001f04:	428b      	cmp	r3, r1
 8001f06:	d101      	bne.n	8001f0c <I2SEx_TxISR_I2SExt+0x64>
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <I2SEx_TxISR_I2SExt+0x94>)
 8001f0a:	e001      	b.n	8001f10 <I2SEx_TxISR_I2SExt+0x68>
 8001f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff81 	bl	8001e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40003800 	.word	0x40003800
 8001f3c:	40003400 	.word	0x40003400

08001f40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68d8      	ldr	r0, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	1c99      	adds	r1, r3, #2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001f58:	b282      	uxth	r2, r0
 8001f5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4a 	bl	8001e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	@ (8002034 <I2SEx_RxISR_I2SExt+0x90>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <I2SEx_RxISR_I2SExt+0x16>
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <I2SEx_RxISR_I2SExt+0x94>)
 8001fb8:	e001      	b.n	8001fbe <I2SEx_RxISR_I2SExt+0x1a>
 8001fba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fbe:	68d8      	ldr	r0, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	1c99      	adds	r1, r3, #2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001fca:	b282      	uxth	r2, r0
 8001fcc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d121      	bne.n	800202a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <I2SEx_RxISR_I2SExt+0x90>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <I2SEx_RxISR_I2SExt+0x50>
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <I2SEx_RxISR_I2SExt+0x94>)
 8001ff2:	e001      	b.n	8001ff8 <I2SEx_RxISR_I2SExt+0x54>
 8001ff4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	490d      	ldr	r1, [pc, #52]	@ (8002034 <I2SEx_RxISR_I2SExt+0x90>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d101      	bne.n	8002008 <I2SEx_RxISR_I2SExt+0x64>
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <I2SEx_RxISR_I2SExt+0x94>)
 8002006:	e001      	b.n	800200c <I2SEx_RxISR_I2SExt+0x68>
 8002008:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800200c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002010:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff03 	bl	8001e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40003800 	.word	0x40003800
 8002038:	40003400 	.word	0x40003400

0800203c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e267      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d075      	beq.n	8002146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800205a:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d00c      	beq.n	8002080 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b85      	ldr	r3, [pc, #532]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800206e:	2b08      	cmp	r3, #8
 8002070:	d112      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002072:	4b82      	ldr	r3, [pc, #520]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4b7e      	ldr	r3, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05b      	beq.n	8002144 <HAL_RCC_OscConfig+0x108>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d157      	bne.n	8002144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e242      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x74>
 80020a2:	4b76      	ldr	r3, [pc, #472]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a75      	ldr	r2, [pc, #468]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b70      	ldr	r3, [pc, #448]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6f      	ldr	r2, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6d      	ldr	r3, [pc, #436]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6c      	ldr	r2, [pc, #432]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a68      	ldr	r2, [pc, #416]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a65      	ldr	r2, [pc, #404]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe ff2e 	bl	8000f54 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe ff2a 	bl	8000f54 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e207      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b5b      	ldr	r3, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xc0>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe ff1a 	bl	8000f54 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe ff16 	bl	8000f54 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1f3      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b51      	ldr	r3, [pc, #324]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0xe8>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b44      	ldr	r3, [pc, #272]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1c7      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4937      	ldr	r1, [pc, #220]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x244>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe fecf 	bl	8000f54 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7fe fecb 	bl	8000f54 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a8      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4925      	ldr	r1, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCC_OscConfig+0x244>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe feae 	bl	8000f54 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe feaa 	bl	8000f54 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e187      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d036      	beq.n	8002294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_RCC_OscConfig+0x248>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fe8e 	bl	8000f54 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7fe fe8a 	bl	8000f54 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e167      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x200>
 800225a:	e01b      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_RCC_OscConfig+0x248>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe fe77 	bl	8000f54 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	e00e      	b.n	8002288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7fe fe73 	bl	8000f54 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d907      	bls.n	8002288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e150      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	42470000 	.word	0x42470000
 8002284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b88      	ldr	r3, [pc, #544]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ea      	bne.n	800226a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8097 	beq.w	80023d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b81      	ldr	r3, [pc, #516]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b7d      	ldr	r3, [pc, #500]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a7c      	ldr	r2, [pc, #496]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b7a      	ldr	r3, [pc, #488]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b77      	ldr	r3, [pc, #476]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b74      	ldr	r3, [pc, #464]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a73      	ldr	r2, [pc, #460]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fe33 	bl	8000f54 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe fe2f 	bl	8000f54 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e10c      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x2ea>
 8002318:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	4a63      	ldr	r2, [pc, #396]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	@ 0x70
 8002324:	e01c      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x30c>
 800232e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	4a5e      	ldr	r2, [pc, #376]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	@ 0x70
 800233a:	4b5c      	ldr	r3, [pc, #368]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	@ 0x70
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002348:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	@ 0x70
 8002354:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	4a54      	ldr	r2, [pc, #336]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe fdf4 	bl	8000f54 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe fdf0 	bl	8000f54 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0cb      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	4b49      	ldr	r3, [pc, #292]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ee      	beq.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe fdde 	bl	8000f54 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7fe fdda 	bl	8000f54 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0b5      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ee      	bne.n	800239c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	4a38      	ldr	r2, [pc, #224]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a1 	beq.w	800251c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023da:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d05c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d141      	bne.n	8002472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fdae 	bl	8000f54 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fdaa 	bl	8000f54 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e087      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fd83 	bl	8000f54 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fd7f 	bl	8000f54 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e05c      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x416>
 8002470:	e054      	b.n	800251c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fd6c 	bl	8000f54 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fd68 	bl	8000f54 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e045      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x444>
 800249e:	e03d      	b.n	800251c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e038      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d028      	beq.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d121      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d11a      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d111      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cc      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b68      	ldr	r3, [pc, #416]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d90c      	bls.n	8002568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b65      	ldr	r3, [pc, #404]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a58      	ldr	r2, [pc, #352]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a52      	ldr	r2, [pc, #328]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d044      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d119      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e067      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4934      	ldr	r1, [pc, #208]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7fe fc9a 	bl	8000f54 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fc96 	bl	8000f54 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20c      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fbfa 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08002d6c 	.word	0x08002d6c
 80026f0:	20000044 	.word	0x20000044
 80026f4:	20000048 	.word	0x20000048

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026fc:	b094      	sub	sp, #80	@ 0x50
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	4b79      	ldr	r3, [pc, #484]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x40>
 800271c:	2b08      	cmp	r3, #8
 800271e:	f200 80e1 	bhi.w	80028e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002726:	2b04      	cmp	r3, #4
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x3a>
 800272a:	e0db      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b73      	ldr	r3, [pc, #460]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x204>)
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002730:	e0db      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x208>)
 8002734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002736:	e0d8      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b6f      	ldr	r3, [pc, #444]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002740:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	4b6d      	ldr	r3, [pc, #436]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d063      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002758:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	633b      	str	r3, [r7, #48]	@ 0x30
 8002762:	2300      	movs	r3, #0
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
 8002766:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800276a:	4622      	mov	r2, r4
 800276c:	462b      	mov	r3, r5
 800276e:	f04f 0000 	mov.w	r0, #0
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	0159      	lsls	r1, r3, #5
 8002778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277c:	0150      	lsls	r0, r2, #5
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4621      	mov	r1, r4
 8002784:	1a51      	subs	r1, r2, r1
 8002786:	6139      	str	r1, [r7, #16]
 8002788:	4629      	mov	r1, r5
 800278a:	eb63 0301 	sbc.w	r3, r3, r1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800279c:	4659      	mov	r1, fp
 800279e:	018b      	lsls	r3, r1, #6
 80027a0:	4651      	mov	r1, sl
 80027a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a6:	4651      	mov	r1, sl
 80027a8:	018a      	lsls	r2, r1, #6
 80027aa:	4651      	mov	r1, sl
 80027ac:	ebb2 0801 	subs.w	r8, r2, r1
 80027b0:	4659      	mov	r1, fp
 80027b2:	eb63 0901 	sbc.w	r9, r3, r1
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ca:	4690      	mov	r8, r2
 80027cc:	4699      	mov	r9, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	eb18 0303 	adds.w	r3, r8, r3
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	462b      	mov	r3, r5
 80027d8:	eb49 0303 	adc.w	r3, r9, r3
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ea:	4629      	mov	r1, r5
 80027ec:	024b      	lsls	r3, r1, #9
 80027ee:	4621      	mov	r1, r4
 80027f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027f4:	4621      	mov	r1, r4
 80027f6:	024a      	lsls	r2, r1, #9
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fe:	2200      	movs	r2, #0
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002808:	f7fd fce6 	bl	80001d8 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002814:	e058      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	2200      	movs	r2, #0
 800281e:	4618      	mov	r0, r3
 8002820:	4611      	mov	r1, r2
 8002822:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
 800282c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002830:	4642      	mov	r2, r8
 8002832:	464b      	mov	r3, r9
 8002834:	f04f 0000 	mov.w	r0, #0
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	0159      	lsls	r1, r3, #5
 800283e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002842:	0150      	lsls	r0, r2, #5
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4641      	mov	r1, r8
 800284a:	ebb2 0a01 	subs.w	sl, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb63 0b01 	sbc.w	fp, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002868:	ebb2 040a 	subs.w	r4, r2, sl
 800286c:	eb63 050b 	sbc.w	r5, r3, fp
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	00eb      	lsls	r3, r5, #3
 800287a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287e:	00e2      	lsls	r2, r4, #3
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
 8002884:	4643      	mov	r3, r8
 8002886:	18e3      	adds	r3, r4, r3
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	464b      	mov	r3, r9
 800288c:	eb45 0303 	adc.w	r3, r5, r3
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289e:	4629      	mov	r1, r5
 80028a0:	028b      	lsls	r3, r1, #10
 80028a2:	4621      	mov	r1, r4
 80028a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a8:	4621      	mov	r1, r4
 80028aa:	028a      	lsls	r2, r1, #10
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b2:	2200      	movs	r2, #0
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	61fa      	str	r2, [r7, #28]
 80028b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028bc:	f7fd fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x204>)
 80028e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3750      	adds	r7, #80	@ 0x50
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	00f42400 	.word	0x00f42400
 8002900:	007a1200 	.word	0x007a1200

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b03      	ldr	r3, [pc, #12]	@ (8002918 <HAL_RCC_GetHCLKFreq+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000044 	.word	0x20000044

0800291c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002920:	f7ff fff0 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0a9b      	lsrs	r3, r3, #10
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4903      	ldr	r1, [pc, #12]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	08002d7c 	.word	0x08002d7c

08002944 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002968:	2b00      	cmp	r3, #0
 800296a:	d038      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800296c:	4b68      	ldr	r3, [pc, #416]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002972:	f7fe faef 	bl	8000f54 <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002978:	e008      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800297a:	f7fe faeb 	bl	8000f54 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0bd      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800298c:	4b61      	ldr	r3, [pc, #388]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	495a      	ldr	r1, [pc, #360]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029b2:	4b57      	ldr	r3, [pc, #348]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe facc 	bl	8000f54 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029c0:	f7fe fac8 	bl	8000f54 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e09a      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029d2:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8083 	beq.w	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	4b48      	ldr	r3, [pc, #288]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	4a47      	ldr	r2, [pc, #284]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fc:	4b45      	ldr	r3, [pc, #276]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a08:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a12:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fa9e 	bl	8000f54 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe fa9a 	bl	8000f54 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e06c      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3a:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a42:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d02f      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d028      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a58:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a60:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a6e:	4a29      	ldr	r2, [pc, #164]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a74:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d114      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fa68 	bl	8000f54 <HAL_GetTick>
 8002a84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe fa64 	bl	8000f54 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e034      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0ee      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002ab8:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002acc:	4911      	ldr	r1, [pc, #68]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	4909      	ldr	r1, [pc, #36]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7d1a      	ldrb	r2, [r3, #20]
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002b04:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	42470068 	.word	0x42470068
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	42470e40 	.word	0x42470e40
 8002b20:	424711e0 	.word	0x424711e0

08002b24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d141      	bne.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002b42:	4b25      	ldr	r3, [pc, #148]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b58:	d131      	bne.n	8002bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002b5c:	617b      	str	r3, [r7, #20]
          break;
 8002b5e:	e031      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b78:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	e008      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b8c:	4a15      	ldr	r2, [pc, #84]	@ (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002b94:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bae:	0f1b      	lsrs	r3, r3, #28
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
          break;
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
          break;
 8002bc2:	bf00      	nop
        }
      }
      break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8002bc6:	bf00      	nop
    }
  }
  return frequency;
 8002bc8:	697b      	ldr	r3, [r7, #20]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00bb8000 	.word	0x00bb8000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	00f42400 	.word	0x00f42400

08002be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07b      	b.n	8002cf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0a:	d009      	beq.n	8002c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
 8002c12:	e005      	b.n	8002c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe f870 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 0104 	and.w	r1, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f003 0210 	and.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <memset>:
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d100      	bne.n	8002d04 <memset+0xa>
 8002d02:	4770      	bx	lr
 8002d04:	f803 1b01 	strb.w	r1, [r3], #1
 8002d08:	e7f9      	b.n	8002cfe <memset+0x4>
	...

08002d0c <__libc_init_array>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d44 <__libc_init_array+0x38>)
 8002d10:	4c0d      	ldr	r4, [pc, #52]	@ (8002d48 <__libc_init_array+0x3c>)
 8002d12:	1b64      	subs	r4, r4, r5
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	2600      	movs	r6, #0
 8002d18:	42a6      	cmp	r6, r4
 8002d1a:	d109      	bne.n	8002d30 <__libc_init_array+0x24>
 8002d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d4c <__libc_init_array+0x40>)
 8002d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8002d50 <__libc_init_array+0x44>)
 8002d20:	f000 f818 	bl	8002d54 <_init>
 8002d24:	1b64      	subs	r4, r4, r5
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	2600      	movs	r6, #0
 8002d2a:	42a6      	cmp	r6, r4
 8002d2c:	d105      	bne.n	8002d3a <__libc_init_array+0x2e>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d34:	4798      	blx	r3
 8002d36:	3601      	adds	r6, #1
 8002d38:	e7ee      	b.n	8002d18 <__libc_init_array+0xc>
 8002d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3e:	4798      	blx	r3
 8002d40:	3601      	adds	r6, #1
 8002d42:	e7f2      	b.n	8002d2a <__libc_init_array+0x1e>
 8002d44:	08002d8c 	.word	0x08002d8c
 8002d48:	08002d8c 	.word	0x08002d8c
 8002d4c:	08002d8c 	.word	0x08002d8c
 8002d50:	08002d90 	.word	0x08002d90

08002d54 <_init>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr

08002d60 <_fini>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	bf00      	nop
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr
